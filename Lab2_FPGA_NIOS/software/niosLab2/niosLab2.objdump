
niosLab2.elf:     file format elf32-littlenios2
niosLab2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00004738 memsz 0x00004738 flags r-x
    LOAD off    0x00005758 vaddr 0x0000c758 paddr 0x0000d184 align 2**12
         filesz 0x00000a2c memsz 0x00000a2c flags rw-
    LOAD off    0x00006bb0 vaddr 0x0000dbb0 paddr 0x0000dbb0 align 2**12
         filesz 0x00000000 memsz 0x00000044 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00006184  2**0
                  CONTENTS
  2 .text         000046f4  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000044  0000c714  0000c714  00005714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000a2c  0000c758  0000d184  00005758  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000044  0000dbb0  0000dbb0  00006bb0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000dbf4  0000dbf4  00006184  2**0
                  CONTENTS
  7 .comment      0000002c  00000000  00000000  00006184  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000008d0  00000000  00000000  000061b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002be0a  00000000  00000000  00006a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008cd4  00000000  00000000  0003288a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b023  00000000  00000000  0003b55e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001214  00000000  00000000  00046584  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002487  00000000  00000000  00047798  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005a1d  00000000  00000000  00049c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0004f63c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000648  00000000  00000000  0004f680  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00051c76  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00051c79  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00051c85  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00051c86  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00051c87  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00051c92  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00051c9d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  00051ca8  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000036  00000000  00000000  00051cb0  2**0
                  CONTENTS, READONLY
 26 .jdi          00004e8b  00000000  00000000  00051ce6  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003db42  00000000  00000000  00056b71  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
0000c714 l    d  .rodata	00000000 .rodata
0000c758 l    d  .rwdata	00000000 .rwdata
0000dbb0 l    d  .bss	00000000 .bss
0000dbf4 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../niosLab2_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
000084cc l     F .text	00000008 __fp_lock
000084e0 l     F .text	00000168 __sinit.part.0
00008648 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000c758 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 alt_close.c
0000ae38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000af50 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000af7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000b074 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000b160 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000b24c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000b42c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000d180 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000b6c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000b808 l     F .text	00000034 alt_dev_reg
0000d12c l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000bc64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000be30 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000bf80 l     F .text	0000003c alt_get_errno
0000bfbc l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000ade0 g     F .text	00000058 _isatty_r
0000b368 g     F .text	0000007c alt_main
00008358 g     F .text	000000cc _puts_r
0000aae0 g     F .text	00000064 _lseek_r
0000d184 g       *ABS*	00000000 __flash_rwdata_start
0000dbf4 g       *ABS*	00000000 __alt_heap_start
0000a094 g     F .text	0000005c __sseek
000087d8 g     F .text	00000010 __sinit
00008650 g     F .text	00000078 __sfmoreglue
0000b408 g     F .text	00000024 __malloc_unlock
000097e0 g     F .text	0000012c memmove
000087c4 g     F .text	00000014 _cleanup
0000c1f8 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000ad80 g     F .text	00000060 _fstat_r
0000dbbc g     O .bss	00000004 errno
0000a00c g     F .text	00000008 __seofread
0000dbc4 g     O .bss	00000004 alt_argv
00015158 g       *ABS*	00000000 _gp
0000b698 g     F .text	00000030 usleep
0000cfac g     O .rwdata	00000180 alt_fd_list
0000c21c g     F .text	00000090 alt_find_dev
000096e0 g     F .text	00000100 memcpy
000084d4 g     F .text	0000000c _cleanup_r
0000bf04 g     F .text	0000007c alt_io_redirect
0000c714 g       *ABS*	00000000 __DTOR_END__
00008424 g     F .text	00000010 puts
0000b96c g     F .text	000000ec altera_avalon_jtag_uart_read
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008270 g     F .text	00000064 .hidden __udivsi3
0000b0b0 g     F .text	000000b0 isatty
0000dbb8 g     O .bss	00000004 __malloc_top_pad
00008820 g     F .text	000004cc __sfvwrite_r
00009f60 g     F .text	00000058 _sbrk_r
0000ad1c g     F .text	00000064 _read_r
0000d178 g     O .rwdata	00000004 alt_max_fd
0000a310 g     F .text	000000f8 _fclose_r
0000a6a0 g     F .text	00000028 fflush
0000dbb4 g     O .bss	00000004 __malloc_max_sbrked_mem
0000b288 g     F .text	000000e0 lseek
0000d158 g     O .rwdata	00000004 _global_impure_ptr
000099fc g     F .text	00000564 _realloc_r
0000dbf4 g       *ABS*	00000000 __bss_end
000087f8 g     F .text	00000014 __fp_lock_all
0000cf84 g     O .rwdata	00000028 alt_dev_null
0000bc44 g     F .text	00000020 alt_dcache_flush_all
0000d184 g       *ABS*	00000000 __ram_rwdata_end
0000d170 g     O .rwdata	00000008 alt_dev_list
0000b704 g     F .text	00000104 write
0000c758 g       *ABS*	00000000 __ram_rodata_end
0000afb8 g     F .text	000000bc fstat
000082d4 g     F .text	0000005c .hidden __umodsi3
0000dbf4 g       *ABS*	00000000 end
0000c714 g       *ABS*	00000000 __CTOR_LIST__
00010000 g       *ABS*	00000000 __alt_stack_pointer
0000ba58 g     F .text	00000094 altera_avalon_jtag_uart_write
000087e8 g     F .text	00000004 __sfp_lock_acquire
0000960c g     F .text	000000d4 memchr
0000a7e4 g     F .text	000002fc _free_r
0000c5bc g     F .text	00000120 __call_exitprocs
0000d160 g     O .rwdata	00000004 __malloc_sbrk_base
00008020 g     F .text	0000003c _start
0000b468 g     F .text	00000108 read
0000b878 g     F .text	00000034 alt_sys_init
0000c52c g     F .text	00000090 __register_exitproc
00008330 g     F .text	00000028 .hidden __mulsi3
0000c758 g       *ABS*	00000000 __ram_rwdata_start
0000c714 g       *ABS*	00000000 __ram_rodata_start
0000dbcc g     O .bss	00000028 __malloc_current_mallinfo
0000b8ac g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000c3b4 g     F .text	000000b8 alt_get_fd
0000baec g     F .text	00000158 alt_busy_sleep
0000a2b8 g     F .text	00000058 _close_r
0000c4b4 g     F .text	00000078 memcmp
0000dbf4 g       *ABS*	00000000 __alt_stack_base
0000a15c g     F .text	0000015c __swsetup_r
000086c8 g     F .text	000000fc __sfp
0000cb7c g     O .rwdata	00000408 __malloc_av_
000087f4 g     F .text	00000004 __sinit_lock_release
00009fb8 g     F .text	00000054 __sread
0000c2ac g     F .text	00000108 alt_find_file
0000bca0 g     F .text	000000a8 alt_dev_llist_insert
0000b3e4 g     F .text	00000024 __malloc_lock
0000b5e0 g     F .text	000000b8 sbrk
0000a640 g     F .text	00000060 _fflush_r
0000dbb0 g       *ABS*	00000000 __bss_start
0000990c g     F .text	000000f0 memset
0000805c g     F .text	00000120 main
0000dbc8 g     O .bss	00000004 alt_envp
0000dbb0 g     O .bss	00000004 __malloc_max_total_mem
0000b90c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000a0f0 g     F .text	00000008 __sclose
00010000 g       *ABS*	00000000 __alt_heap_limit
0000a408 g     F .text	00000010 fclose
00008e2c g     F .text	000007e0 _malloc_r
0000d17c g     O .rwdata	00000004 alt_errno
00008cec g     F .text	00000098 _fwalk
0000817c g     F .text	00000080 .hidden __divsi3
0000a6c8 g     F .text	0000011c _malloc_trim_r
0000c714 g       *ABS*	00000000 __CTOR_END__
0000c714 g       *ABS*	00000000 __flash_rodata_start
0000c714 g       *ABS*	00000000 __DTOR_LIST__
0000b83c g     F .text	0000003c alt_irq_init
0000b570 g     F .text	00000070 alt_release_fd
0000c46c g     F .text	00000014 atexit
0000a0f8 g     F .text	00000064 _write_r
0000d15c g     O .rwdata	00000004 _impure_ptr
0000dbc0 g     O .bss	00000004 alt_argc
0000a418 g     F .text	00000228 __sflush_r
0000bdac g     F .text	00000064 _do_dtors
0000880c g     F .text	00000014 __fp_unlock_all
0000d168 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000ab44 g     F .text	00000098 __swhatbuf_r
0000d184 g       *ABS*	00000000 _edata
0000dbf4 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000a014 g     F .text	00000080 __swrite
0000d164 g     O .rwdata	00000004 __malloc_trim_threshold
0000c480 g     F .text	00000034 exit
00008d84 g     F .text	000000a8 _fwalk_reent
000081fc g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
000087ec g     F .text	00000004 __sfp_lock_release
0000c6dc g     F .text	00000038 _exit
0000abdc g     F .text	00000140 __smakebuf_r
00008434 g     F .text	00000098 strlen
0000c098 g     F .text	00000160 open
0000be10 g     F .text	00000020 alt_icache_flush_all
0000bd48 g     F .text	00000064 _do_ctors
0000ae74 g     F .text	000000dc close
0000b1c8 g     F .text	00000084 alt_load
000087f0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6945614 	ori	gp,gp,20824
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10b6ec14 	ori	r2,r2,56240

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18f6fd14 	ori	r3,r3,56308

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	000b1c80 	call	b1c8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	000b3680 	call	b368 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <main>:
#include <stdio.h>
#include "system.h"
#include <alt_types.h>
#include <io.h> /* Leiutura e escrita no Avalon */

int main(void){
    805c:	defff904 	addi	sp,sp,-28
    8060:	dfc00615 	stw	ra,24(sp)
    8064:	df000515 	stw	fp,20(sp)
    8068:	df000504 	addi	fp,sp,20
  unsigned int sw;
  unsigned int dir = 0;
    806c:	e03ffd15 	stw	zero,-12(fp)
  unsigned int vel;
  unsigned int phase = 0;
    8070:	e03fff15 	stw	zero,-4(fp)
  unsigned int stage = 0;
    8074:	e03ffe15 	stw	zero,-8(fp)


  printf("VroomVroom \n");
    8078:	01000074 	movhi	r4,1
    807c:	2131c504 	addi	r4,r4,-14572
    8080:	00084240 	call	8424 <puts>

  while(1){
	  sw = IORD_32DIRECT(PIO_2_BASE, 0);
    8084:	00800074 	movhi	r2,1
    8088:	10840437 	ldwio	r2,4112(r2)
    808c:	e0bffc15 	stw	r2,-16(fp)
	  dir = (sw >> 1) & 1;
    8090:	e0bffc17 	ldw	r2,-16(fp)
    8094:	1004d07a 	srli	r2,r2,1
    8098:	1080004c 	andi	r2,r2,1
    809c:	e0bffd15 	stw	r2,-12(fp)
	  vel = ((sw >> 2) & 1) + ((sw >> 3) & 1) + ((sw >> 4) & 1)  + ((sw >> 5) & 1);
    80a0:	e0bffc17 	ldw	r2,-16(fp)
    80a4:	1004d0ba 	srli	r2,r2,2
    80a8:	10c0004c 	andi	r3,r2,1
    80ac:	e0bffc17 	ldw	r2,-16(fp)
    80b0:	1004d0fa 	srli	r2,r2,3
    80b4:	1080004c 	andi	r2,r2,1
    80b8:	1887883a 	add	r3,r3,r2
    80bc:	e0bffc17 	ldw	r2,-16(fp)
    80c0:	1004d13a 	srli	r2,r2,4
    80c4:	1080004c 	andi	r2,r2,1
    80c8:	1887883a 	add	r3,r3,r2
    80cc:	e0bffc17 	ldw	r2,-16(fp)
    80d0:	1004d17a 	srli	r2,r2,5
    80d4:	1080004c 	andi	r2,r2,1
    80d8:	1885883a 	add	r2,r3,r2
    80dc:	e0bffb15 	stw	r2,-20(fp)

//	  printf("%c", dir);

	  if (sw & 1){
    80e0:	e0bffc17 	ldw	r2,-16(fp)
    80e4:	1080004c 	andi	r2,r2,1
    80e8:	10001a26 	beq	r2,zero,8154 <main+0xf8>
		  if (dir & 1){
    80ec:	e0bffd17 	ldw	r2,-12(fp)
    80f0:	1080004c 	andi	r2,r2,1
    80f4:	10000526 	beq	r2,zero,810c <main+0xb0>
			  phase = 0x08 >> stage;
    80f8:	00c00204 	movi	r3,8
    80fc:	e0bffe17 	ldw	r2,-8(fp)
    8100:	1885d83a 	sra	r2,r3,r2
    8104:	e0bfff15 	stw	r2,-4(fp)
    8108:	00000406 	br	811c <main+0xc0>
		  } else {
			  phase = 0x01 << stage;
    810c:	00c00044 	movi	r3,1
    8110:	e0bffe17 	ldw	r2,-8(fp)
    8114:	1884983a 	sll	r2,r3,r2
    8118:	e0bfff15 	stw	r2,-4(fp)
		  }

		  IOWR_32DIRECT(PIO_1_BASE, 0, phase);
    811c:	e0ffff17 	ldw	r3,-4(fp)
    8120:	00800074 	movhi	r2,1
    8124:	10c40035 	stwio	r3,4096(r2)
		  IOWR_32DIRECT(PIO_0_BASE, 0, phase);
    8128:	e0ffff17 	ldw	r3,-4(fp)
    812c:	00800074 	movhi	r2,1
    8130:	10c40835 	stwio	r3,4128(r2)

		  if(stage == 3){
    8134:	e0bffe17 	ldw	r2,-8(fp)
    8138:	108000d8 	cmpnei	r2,r2,3
    813c:	1000021e 	bne	r2,zero,8148 <main+0xec>
			  stage = 0;
    8140:	e03ffe15 	stw	zero,-8(fp)
    8144:	00000306 	br	8154 <main+0xf8>
		  } else {
			  stage ++;
    8148:	e0bffe17 	ldw	r2,-8(fp)
    814c:	10800044 	addi	r2,r2,1
    8150:	e0bffe15 	stw	r2,-8(fp)
		  }
	  }
	  usleep(100000 / (vel *20));
    8154:	01400504 	movi	r5,20
    8158:	e13ffb17 	ldw	r4,-20(fp)
    815c:	00083300 	call	8330 <__mulsi3>
    8160:	100b883a 	mov	r5,r2
    8164:	010000b4 	movhi	r4,2
    8168:	2121a804 	addi	r4,r4,-31072
    816c:	00082700 	call	8270 <__udivsi3>
    8170:	1009883a 	mov	r4,r2
    8174:	000b6980 	call	b698 <usleep>
  while(1){
    8178:	003fc206 	br	8084 <main+0x28>

0000817c <__divsi3>:
    817c:	20001a16 	blt	r4,zero,81e8 <__divsi3+0x6c>
    8180:	000f883a 	mov	r7,zero
    8184:	2800020e 	bge	r5,zero,8190 <__divsi3+0x14>
    8188:	014bc83a 	sub	r5,zero,r5
    818c:	39c0005c 	xori	r7,r7,1
    8190:	200d883a 	mov	r6,r4
    8194:	00c00044 	movi	r3,1
    8198:	2900092e 	bgeu	r5,r4,81c0 <__divsi3+0x44>
    819c:	00800804 	movi	r2,32
    81a0:	00c00044 	movi	r3,1
    81a4:	00000106 	br	81ac <__divsi3+0x30>
    81a8:	10001226 	beq	r2,zero,81f4 <__divsi3+0x78>
    81ac:	294b883a 	add	r5,r5,r5
    81b0:	10bfffc4 	addi	r2,r2,-1
    81b4:	18c7883a 	add	r3,r3,r3
    81b8:	293ffb36 	bltu	r5,r4,81a8 <__divsi3+0x2c>
    81bc:	18000d26 	beq	r3,zero,81f4 <__divsi3+0x78>
    81c0:	0005883a 	mov	r2,zero
    81c4:	31400236 	bltu	r6,r5,81d0 <__divsi3+0x54>
    81c8:	314dc83a 	sub	r6,r6,r5
    81cc:	10c4b03a 	or	r2,r2,r3
    81d0:	1806d07a 	srli	r3,r3,1
    81d4:	280ad07a 	srli	r5,r5,1
    81d8:	183ffa1e 	bne	r3,zero,81c4 <__divsi3+0x48>
    81dc:	38000126 	beq	r7,zero,81e4 <__divsi3+0x68>
    81e0:	0085c83a 	sub	r2,zero,r2
    81e4:	f800283a 	ret
    81e8:	0109c83a 	sub	r4,zero,r4
    81ec:	01c00044 	movi	r7,1
    81f0:	003fe406 	br	8184 <__divsi3+0x8>
    81f4:	0005883a 	mov	r2,zero
    81f8:	003ff806 	br	81dc <__divsi3+0x60>

000081fc <__modsi3>:
    81fc:	20001916 	blt	r4,zero,8264 <__modsi3+0x68>
    8200:	000f883a 	mov	r7,zero
    8204:	2005883a 	mov	r2,r4
    8208:	2800010e 	bge	r5,zero,8210 <__modsi3+0x14>
    820c:	014bc83a 	sub	r5,zero,r5
    8210:	00c00044 	movi	r3,1
    8214:	2900092e 	bgeu	r5,r4,823c <__modsi3+0x40>
    8218:	01800804 	movi	r6,32
    821c:	00c00044 	movi	r3,1
    8220:	00000106 	br	8228 <__modsi3+0x2c>
    8224:	30000d26 	beq	r6,zero,825c <__modsi3+0x60>
    8228:	294b883a 	add	r5,r5,r5
    822c:	31bfffc4 	addi	r6,r6,-1
    8230:	18c7883a 	add	r3,r3,r3
    8234:	293ffb36 	bltu	r5,r4,8224 <__modsi3+0x28>
    8238:	18000826 	beq	r3,zero,825c <__modsi3+0x60>
    823c:	1806d07a 	srli	r3,r3,1
    8240:	11400136 	bltu	r2,r5,8248 <__modsi3+0x4c>
    8244:	1145c83a 	sub	r2,r2,r5
    8248:	280ad07a 	srli	r5,r5,1
    824c:	183ffb1e 	bne	r3,zero,823c <__modsi3+0x40>
    8250:	38000126 	beq	r7,zero,8258 <__modsi3+0x5c>
    8254:	0085c83a 	sub	r2,zero,r2
    8258:	f800283a 	ret
    825c:	2005883a 	mov	r2,r4
    8260:	003ffb06 	br	8250 <__modsi3+0x54>
    8264:	0109c83a 	sub	r4,zero,r4
    8268:	01c00044 	movi	r7,1
    826c:	003fe506 	br	8204 <__modsi3+0x8>

00008270 <__udivsi3>:
    8270:	200d883a 	mov	r6,r4
    8274:	2900152e 	bgeu	r5,r4,82cc <__udivsi3+0x5c>
    8278:	28001416 	blt	r5,zero,82cc <__udivsi3+0x5c>
    827c:	00800804 	movi	r2,32
    8280:	00c00044 	movi	r3,1
    8284:	00000206 	br	8290 <__udivsi3+0x20>
    8288:	10000e26 	beq	r2,zero,82c4 <__udivsi3+0x54>
    828c:	28000516 	blt	r5,zero,82a4 <__udivsi3+0x34>
    8290:	294b883a 	add	r5,r5,r5
    8294:	10bfffc4 	addi	r2,r2,-1
    8298:	18c7883a 	add	r3,r3,r3
    829c:	293ffa36 	bltu	r5,r4,8288 <__udivsi3+0x18>
    82a0:	18000826 	beq	r3,zero,82c4 <__udivsi3+0x54>
    82a4:	0005883a 	mov	r2,zero
    82a8:	31400236 	bltu	r6,r5,82b4 <__udivsi3+0x44>
    82ac:	314dc83a 	sub	r6,r6,r5
    82b0:	10c4b03a 	or	r2,r2,r3
    82b4:	1806d07a 	srli	r3,r3,1
    82b8:	280ad07a 	srli	r5,r5,1
    82bc:	183ffa1e 	bne	r3,zero,82a8 <__udivsi3+0x38>
    82c0:	f800283a 	ret
    82c4:	0005883a 	mov	r2,zero
    82c8:	f800283a 	ret
    82cc:	00c00044 	movi	r3,1
    82d0:	003ff406 	br	82a4 <__udivsi3+0x34>

000082d4 <__umodsi3>:
    82d4:	2005883a 	mov	r2,r4
    82d8:	2900132e 	bgeu	r5,r4,8328 <__umodsi3+0x54>
    82dc:	28001216 	blt	r5,zero,8328 <__umodsi3+0x54>
    82e0:	01800804 	movi	r6,32
    82e4:	00c00044 	movi	r3,1
    82e8:	00000206 	br	82f4 <__umodsi3+0x20>
    82ec:	30000c26 	beq	r6,zero,8320 <__umodsi3+0x4c>
    82f0:	28000516 	blt	r5,zero,8308 <__umodsi3+0x34>
    82f4:	294b883a 	add	r5,r5,r5
    82f8:	31bfffc4 	addi	r6,r6,-1
    82fc:	18c7883a 	add	r3,r3,r3
    8300:	293ffa36 	bltu	r5,r4,82ec <__umodsi3+0x18>
    8304:	18000626 	beq	r3,zero,8320 <__umodsi3+0x4c>
    8308:	1806d07a 	srli	r3,r3,1
    830c:	11400136 	bltu	r2,r5,8314 <__umodsi3+0x40>
    8310:	1145c83a 	sub	r2,r2,r5
    8314:	280ad07a 	srli	r5,r5,1
    8318:	183ffb1e 	bne	r3,zero,8308 <__umodsi3+0x34>
    831c:	f800283a 	ret
    8320:	2005883a 	mov	r2,r4
    8324:	f800283a 	ret
    8328:	00c00044 	movi	r3,1
    832c:	003ff606 	br	8308 <__umodsi3+0x34>

00008330 <__mulsi3>:
    8330:	0005883a 	mov	r2,zero
    8334:	20000726 	beq	r4,zero,8354 <__mulsi3+0x24>
    8338:	20c0004c 	andi	r3,r4,1
    833c:	2008d07a 	srli	r4,r4,1
    8340:	18000126 	beq	r3,zero,8348 <__mulsi3+0x18>
    8344:	1145883a 	add	r2,r2,r5
    8348:	294b883a 	add	r5,r5,r5
    834c:	203ffa1e 	bne	r4,zero,8338 <__mulsi3+0x8>
    8350:	f800283a 	ret
    8354:	f800283a 	ret

00008358 <_puts_r>:
    8358:	defff504 	addi	sp,sp,-44
    835c:	dc000815 	stw	r16,32(sp)
    8360:	2021883a 	mov	r16,r4
    8364:	2809883a 	mov	r4,r5
    8368:	dc400915 	stw	r17,36(sp)
    836c:	dfc00a15 	stw	ra,40(sp)
    8370:	2823883a 	mov	r17,r5
    8374:	00084340 	call	8434 <strlen>
    8378:	11000044 	addi	r4,r2,1
    837c:	d8800515 	stw	r2,20(sp)
    8380:	00800044 	movi	r2,1
    8384:	00c00074 	movhi	r3,1
    8388:	d8800715 	stw	r2,28(sp)
    838c:	d8800404 	addi	r2,sp,16
    8390:	18f1c804 	addi	r3,r3,-14560
    8394:	d8800115 	stw	r2,4(sp)
    8398:	00800084 	movi	r2,2
    839c:	dc400415 	stw	r17,16(sp)
    83a0:	d8c00615 	stw	r3,24(sp)
    83a4:	d9000315 	stw	r4,12(sp)
    83a8:	d8800215 	stw	r2,8(sp)
    83ac:	81400217 	ldw	r5,8(r16)
    83b0:	80000226 	beq	r16,zero,83bc <_puts_r+0x64>
    83b4:	80800e17 	ldw	r2,56(r16)
    83b8:	10001326 	beq	r2,zero,8408 <_puts_r+0xb0>
    83bc:	2880030b 	ldhu	r2,12(r5)
    83c0:	10c8000c 	andi	r3,r2,8192
    83c4:	1800061e 	bne	r3,zero,83e0 <_puts_r+0x88>
    83c8:	28c01917 	ldw	r3,100(r5)
    83cc:	0137ffc4 	movi	r4,-8193
    83d0:	10880014 	ori	r2,r2,8192
    83d4:	1906703a 	and	r3,r3,r4
    83d8:	2880030d 	sth	r2,12(r5)
    83dc:	28c01915 	stw	r3,100(r5)
    83e0:	d9800104 	addi	r6,sp,4
    83e4:	8009883a 	mov	r4,r16
    83e8:	00088200 	call	8820 <__sfvwrite_r>
    83ec:	10000b1e 	bne	r2,zero,841c <_puts_r+0xc4>
    83f0:	00800284 	movi	r2,10
    83f4:	dfc00a17 	ldw	ra,40(sp)
    83f8:	dc400917 	ldw	r17,36(sp)
    83fc:	dc000817 	ldw	r16,32(sp)
    8400:	dec00b04 	addi	sp,sp,44
    8404:	f800283a 	ret
    8408:	8009883a 	mov	r4,r16
    840c:	d9400015 	stw	r5,0(sp)
    8410:	00087d80 	call	87d8 <__sinit>
    8414:	d9400017 	ldw	r5,0(sp)
    8418:	003fe806 	br	83bc <_puts_r+0x64>
    841c:	00bfffc4 	movi	r2,-1
    8420:	003ff406 	br	83f4 <_puts_r+0x9c>

00008424 <puts>:
    8424:	00800074 	movhi	r2,1
    8428:	200b883a 	mov	r5,r4
    842c:	11345717 	ldw	r4,-11940(r2)
    8430:	00083581 	jmpi	8358 <_puts_r>

00008434 <strlen>:
    8434:	208000cc 	andi	r2,r4,3
    8438:	10000926 	beq	r2,zero,8460 <strlen+0x2c>
    843c:	2005883a 	mov	r2,r4
    8440:	00000306 	br	8450 <strlen+0x1c>
    8444:	10800044 	addi	r2,r2,1
    8448:	10c000cc 	andi	r3,r2,3
    844c:	18000526 	beq	r3,zero,8464 <strlen+0x30>
    8450:	10c00007 	ldb	r3,0(r2)
    8454:	183ffb1e 	bne	r3,zero,8444 <strlen+0x10>
    8458:	1105c83a 	sub	r2,r2,r4
    845c:	f800283a 	ret
    8460:	2005883a 	mov	r2,r4
    8464:	11400017 	ldw	r5,0(r2)
    8468:	01ffbff4 	movhi	r7,65279
    846c:	39ffbfc4 	addi	r7,r7,-257
    8470:	29c7883a 	add	r3,r5,r7
    8474:	01a02074 	movhi	r6,32897
    8478:	014a303a 	nor	r5,zero,r5
    847c:	1946703a 	and	r3,r3,r5
    8480:	31a02004 	addi	r6,r6,-32640
    8484:	1986703a 	and	r3,r3,r6
    8488:	1800071e 	bne	r3,zero,84a8 <strlen+0x74>
    848c:	11400117 	ldw	r5,4(r2)
    8490:	10800104 	addi	r2,r2,4
    8494:	29c7883a 	add	r3,r5,r7
    8498:	014a303a 	nor	r5,zero,r5
    849c:	1946703a 	and	r3,r3,r5
    84a0:	1986703a 	and	r3,r3,r6
    84a4:	183ff926 	beq	r3,zero,848c <strlen+0x58>
    84a8:	10c00007 	ldb	r3,0(r2)
    84ac:	183fea26 	beq	r3,zero,8458 <strlen+0x24>
    84b0:	10c00047 	ldb	r3,1(r2)
    84b4:	10800044 	addi	r2,r2,1
    84b8:	183fe726 	beq	r3,zero,8458 <strlen+0x24>
    84bc:	10c00047 	ldb	r3,1(r2)
    84c0:	10800044 	addi	r2,r2,1
    84c4:	183ffa1e 	bne	r3,zero,84b0 <strlen+0x7c>
    84c8:	003fe306 	br	8458 <strlen+0x24>

000084cc <__fp_lock>:
    84cc:	0005883a 	mov	r2,zero
    84d0:	f800283a 	ret

000084d4 <_cleanup_r>:
    84d4:	01400074 	movhi	r5,1
    84d8:	2968c404 	addi	r5,r5,-23792
    84dc:	0008d841 	jmpi	8d84 <_fwalk_reent>

000084e0 <__sinit.part.0>:
    84e0:	00c00074 	movhi	r3,1
    84e4:	20800117 	ldw	r2,4(r4)
    84e8:	18e13504 	addi	r3,r3,-31532
    84ec:	20c00f15 	stw	r3,60(r4)
    84f0:	2140bb04 	addi	r5,r4,748
    84f4:	00c000c4 	movi	r3,3
    84f8:	20c0b915 	stw	r3,740(r4)
    84fc:	2140ba15 	stw	r5,744(r4)
    8500:	2000b815 	stw	zero,736(r4)
    8504:	10001705 	stb	zero,92(r2)
    8508:	10001745 	stb	zero,93(r2)
    850c:	10001785 	stb	zero,94(r2)
    8510:	100017c5 	stb	zero,95(r2)
    8514:	10001805 	stb	zero,96(r2)
    8518:	10001845 	stb	zero,97(r2)
    851c:	10001885 	stb	zero,98(r2)
    8520:	100018c5 	stb	zero,99(r2)
    8524:	00c00104 	movi	r3,4
    8528:	10c00315 	stw	r3,12(r2)
    852c:	02000074 	movhi	r8,1
    8530:	20c00217 	ldw	r3,8(r4)
    8534:	01c00074 	movhi	r7,1
    8538:	01800074 	movhi	r6,1
    853c:	01400074 	movhi	r5,1
    8540:	4227ee04 	addi	r8,r8,-24648
    8544:	39e80504 	addi	r7,r7,-24556
    8548:	31a82504 	addi	r6,r6,-24428
    854c:	29683c04 	addi	r5,r5,-24336
    8550:	02400074 	movhi	r9,1
    8554:	10001915 	stw	zero,100(r2)
    8558:	10000015 	stw	zero,0(r2)
    855c:	10000115 	stw	zero,4(r2)
    8560:	10000215 	stw	zero,8(r2)
    8564:	10000415 	stw	zero,16(r2)
    8568:	10000515 	stw	zero,20(r2)
    856c:	10000615 	stw	zero,24(r2)
    8570:	10800715 	stw	r2,28(r2)
    8574:	12000815 	stw	r8,32(r2)
    8578:	11c00915 	stw	r7,36(r2)
    857c:	11800a15 	stw	r6,40(r2)
    8580:	11400b15 	stw	r5,44(r2)
    8584:	4a400284 	addi	r9,r9,10
    8588:	1a400315 	stw	r9,12(r3)
    858c:	18001915 	stw	zero,100(r3)
    8590:	18000015 	stw	zero,0(r3)
    8594:	18000115 	stw	zero,4(r3)
    8598:	18000215 	stw	zero,8(r3)
    859c:	18000415 	stw	zero,16(r3)
    85a0:	18001705 	stb	zero,92(r3)
    85a4:	18001745 	stb	zero,93(r3)
    85a8:	18001785 	stb	zero,94(r3)
    85ac:	180017c5 	stb	zero,95(r3)
    85b0:	18001805 	stb	zero,96(r3)
    85b4:	18001845 	stb	zero,97(r3)
    85b8:	18001885 	stb	zero,98(r3)
    85bc:	180018c5 	stb	zero,99(r3)
    85c0:	20800317 	ldw	r2,12(r4)
    85c4:	024000b4 	movhi	r9,2
    85c8:	18000515 	stw	zero,20(r3)
    85cc:	18000615 	stw	zero,24(r3)
    85d0:	18c00715 	stw	r3,28(r3)
    85d4:	1a000815 	stw	r8,32(r3)
    85d8:	19c00915 	stw	r7,36(r3)
    85dc:	19800a15 	stw	r6,40(r3)
    85e0:	19400b15 	stw	r5,44(r3)
    85e4:	4a400484 	addi	r9,r9,18
    85e8:	10001915 	stw	zero,100(r2)
    85ec:	10000015 	stw	zero,0(r2)
    85f0:	10000115 	stw	zero,4(r2)
    85f4:	10000215 	stw	zero,8(r2)
    85f8:	12400315 	stw	r9,12(r2)
    85fc:	10000415 	stw	zero,16(r2)
    8600:	10000515 	stw	zero,20(r2)
    8604:	10000615 	stw	zero,24(r2)
    8608:	10001705 	stb	zero,92(r2)
    860c:	10001745 	stb	zero,93(r2)
    8610:	10001785 	stb	zero,94(r2)
    8614:	100017c5 	stb	zero,95(r2)
    8618:	10001805 	stb	zero,96(r2)
    861c:	10001845 	stb	zero,97(r2)
    8620:	10001885 	stb	zero,98(r2)
    8624:	100018c5 	stb	zero,99(r2)
    8628:	10800715 	stw	r2,28(r2)
    862c:	12000815 	stw	r8,32(r2)
    8630:	11c00915 	stw	r7,36(r2)
    8634:	11800a15 	stw	r6,40(r2)
    8638:	11400b15 	stw	r5,44(r2)
    863c:	00800044 	movi	r2,1
    8640:	20800e15 	stw	r2,56(r4)
    8644:	f800283a 	ret

00008648 <__fp_unlock>:
    8648:	0005883a 	mov	r2,zero
    864c:	f800283a 	ret

00008650 <__sfmoreglue>:
    8650:	defffc04 	addi	sp,sp,-16
    8654:	dc800215 	stw	r18,8(sp)
    8658:	2825883a 	mov	r18,r5
    865c:	dc000015 	stw	r16,0(sp)
    8660:	01401a04 	movi	r5,104
    8664:	2021883a 	mov	r16,r4
    8668:	913fffc4 	addi	r4,r18,-1
    866c:	dfc00315 	stw	ra,12(sp)
    8670:	dc400115 	stw	r17,4(sp)
    8674:	00083300 	call	8330 <__mulsi3>
    8678:	8009883a 	mov	r4,r16
    867c:	11401d04 	addi	r5,r2,116
    8680:	1023883a 	mov	r17,r2
    8684:	0008e2c0 	call	8e2c <_malloc_r>
    8688:	1021883a 	mov	r16,r2
    868c:	10000726 	beq	r2,zero,86ac <__sfmoreglue+0x5c>
    8690:	11000304 	addi	r4,r2,12
    8694:	10000015 	stw	zero,0(r2)
    8698:	14800115 	stw	r18,4(r2)
    869c:	11000215 	stw	r4,8(r2)
    86a0:	89801a04 	addi	r6,r17,104
    86a4:	000b883a 	mov	r5,zero
    86a8:	000990c0 	call	990c <memset>
    86ac:	8005883a 	mov	r2,r16
    86b0:	dfc00317 	ldw	ra,12(sp)
    86b4:	dc800217 	ldw	r18,8(sp)
    86b8:	dc400117 	ldw	r17,4(sp)
    86bc:	dc000017 	ldw	r16,0(sp)
    86c0:	dec00404 	addi	sp,sp,16
    86c4:	f800283a 	ret

000086c8 <__sfp>:
    86c8:	defffd04 	addi	sp,sp,-12
    86cc:	00800074 	movhi	r2,1
    86d0:	dc000015 	stw	r16,0(sp)
    86d4:	14345617 	ldw	r16,-11944(r2)
    86d8:	dc400115 	stw	r17,4(sp)
    86dc:	dfc00215 	stw	ra,8(sp)
    86e0:	80800e17 	ldw	r2,56(r16)
    86e4:	2023883a 	mov	r17,r4
    86e8:	10002b26 	beq	r2,zero,8798 <__sfp+0xd0>
    86ec:	8400b804 	addi	r16,r16,736
    86f0:	80c00117 	ldw	r3,4(r16)
    86f4:	80800217 	ldw	r2,8(r16)
    86f8:	18ffffc4 	addi	r3,r3,-1
    86fc:	1800030e 	bge	r3,zero,870c <__sfp+0x44>
    8700:	00002106 	br	8788 <__sfp+0xc0>
    8704:	10801a04 	addi	r2,r2,104
    8708:	30001f26 	beq	r6,zero,8788 <__sfp+0xc0>
    870c:	1140030f 	ldh	r5,12(r2)
    8710:	18ffffc4 	addi	r3,r3,-1
    8714:	19bfffd8 	cmpnei	r6,r3,-1
    8718:	283ffa1e 	bne	r5,zero,8704 <__sfp+0x3c>
    871c:	00fffff4 	movhi	r3,65535
    8720:	18c00044 	addi	r3,r3,1
    8724:	10001915 	stw	zero,100(r2)
    8728:	10000015 	stw	zero,0(r2)
    872c:	10000115 	stw	zero,4(r2)
    8730:	10000215 	stw	zero,8(r2)
    8734:	10c00315 	stw	r3,12(r2)
    8738:	10000415 	stw	zero,16(r2)
    873c:	10000515 	stw	zero,20(r2)
    8740:	10000615 	stw	zero,24(r2)
    8744:	10001705 	stb	zero,92(r2)
    8748:	10001745 	stb	zero,93(r2)
    874c:	10001785 	stb	zero,94(r2)
    8750:	100017c5 	stb	zero,95(r2)
    8754:	10001805 	stb	zero,96(r2)
    8758:	10001845 	stb	zero,97(r2)
    875c:	10001885 	stb	zero,98(r2)
    8760:	100018c5 	stb	zero,99(r2)
    8764:	10000c15 	stw	zero,48(r2)
    8768:	10000d15 	stw	zero,52(r2)
    876c:	10001115 	stw	zero,68(r2)
    8770:	10001215 	stw	zero,72(r2)
    8774:	dfc00217 	ldw	ra,8(sp)
    8778:	dc400117 	ldw	r17,4(sp)
    877c:	dc000017 	ldw	r16,0(sp)
    8780:	dec00304 	addi	sp,sp,12
    8784:	f800283a 	ret
    8788:	80800017 	ldw	r2,0(r16)
    878c:	10000526 	beq	r2,zero,87a4 <__sfp+0xdc>
    8790:	1021883a 	mov	r16,r2
    8794:	003fd606 	br	86f0 <__sfp+0x28>
    8798:	8009883a 	mov	r4,r16
    879c:	00084e00 	call	84e0 <__sinit.part.0>
    87a0:	003fd206 	br	86ec <__sfp+0x24>
    87a4:	01400104 	movi	r5,4
    87a8:	8809883a 	mov	r4,r17
    87ac:	00086500 	call	8650 <__sfmoreglue>
    87b0:	80800015 	stw	r2,0(r16)
    87b4:	103ff61e 	bne	r2,zero,8790 <__sfp+0xc8>
    87b8:	00c00304 	movi	r3,12
    87bc:	88c00015 	stw	r3,0(r17)
    87c0:	003fec06 	br	8774 <__sfp+0xac>

000087c4 <_cleanup>:
    87c4:	00800074 	movhi	r2,1
    87c8:	11345617 	ldw	r4,-11944(r2)
    87cc:	01400074 	movhi	r5,1
    87d0:	2968c404 	addi	r5,r5,-23792
    87d4:	0008d841 	jmpi	8d84 <_fwalk_reent>

000087d8 <__sinit>:
    87d8:	20800e17 	ldw	r2,56(r4)
    87dc:	10000126 	beq	r2,zero,87e4 <__sinit+0xc>
    87e0:	f800283a 	ret
    87e4:	00084e01 	jmpi	84e0 <__sinit.part.0>

000087e8 <__sfp_lock_acquire>:
    87e8:	f800283a 	ret

000087ec <__sfp_lock_release>:
    87ec:	f800283a 	ret

000087f0 <__sinit_lock_acquire>:
    87f0:	f800283a 	ret

000087f4 <__sinit_lock_release>:
    87f4:	f800283a 	ret

000087f8 <__fp_lock_all>:
    87f8:	00800074 	movhi	r2,1
    87fc:	11345717 	ldw	r4,-11940(r2)
    8800:	01400074 	movhi	r5,1
    8804:	29613304 	addi	r5,r5,-31540
    8808:	0008cec1 	jmpi	8cec <_fwalk>

0000880c <__fp_unlock_all>:
    880c:	00800074 	movhi	r2,1
    8810:	11345717 	ldw	r4,-11940(r2)
    8814:	01400074 	movhi	r5,1
    8818:	29619204 	addi	r5,r5,-31160
    881c:	0008cec1 	jmpi	8cec <_fwalk>

00008820 <__sfvwrite_r>:
    8820:	30800217 	ldw	r2,8(r6)
    8824:	1000c826 	beq	r2,zero,8b48 <__sfvwrite_r+0x328>
    8828:	29c0030b 	ldhu	r7,12(r5)
    882c:	defff404 	addi	sp,sp,-48
    8830:	dd800815 	stw	r22,32(sp)
    8834:	dd400715 	stw	r21,28(sp)
    8838:	dc000215 	stw	r16,8(sp)
    883c:	dfc00b15 	stw	ra,44(sp)
    8840:	df000a15 	stw	fp,40(sp)
    8844:	ddc00915 	stw	r23,36(sp)
    8848:	dd000615 	stw	r20,24(sp)
    884c:	dcc00515 	stw	r19,20(sp)
    8850:	dc800415 	stw	r18,16(sp)
    8854:	dc400315 	stw	r17,12(sp)
    8858:	3880020c 	andi	r2,r7,8
    885c:	302d883a 	mov	r22,r6
    8860:	202b883a 	mov	r21,r4
    8864:	2821883a 	mov	r16,r5
    8868:	10002226 	beq	r2,zero,88f4 <__sfvwrite_r+0xd4>
    886c:	28800417 	ldw	r2,16(r5)
    8870:	10002026 	beq	r2,zero,88f4 <__sfvwrite_r+0xd4>
    8874:	3880008c 	andi	r2,r7,2
    8878:	b4400017 	ldw	r17,0(r22)
    887c:	10002526 	beq	r2,zero,8914 <__sfvwrite_r+0xf4>
    8880:	80800917 	ldw	r2,36(r16)
    8884:	81400717 	ldw	r5,28(r16)
    8888:	05200034 	movhi	r20,32768
    888c:	0027883a 	mov	r19,zero
    8890:	0025883a 	mov	r18,zero
    8894:	a53f0004 	addi	r20,r20,-1024
    8898:	980d883a 	mov	r6,r19
    889c:	a809883a 	mov	r4,r21
    88a0:	90001026 	beq	r18,zero,88e4 <__sfvwrite_r+0xc4>
    88a4:	900f883a 	mov	r7,r18
    88a8:	a480012e 	bgeu	r20,r18,88b0 <__sfvwrite_r+0x90>
    88ac:	a00f883a 	mov	r7,r20
    88b0:	103ee83a 	callr	r2
    88b4:	00809f0e 	bge	zero,r2,8b34 <__sfvwrite_r+0x314>
    88b8:	b1000217 	ldw	r4,8(r22)
    88bc:	98a7883a 	add	r19,r19,r2
    88c0:	90a5c83a 	sub	r18,r18,r2
    88c4:	2085c83a 	sub	r2,r4,r2
    88c8:	b0800215 	stw	r2,8(r22)
    88cc:	10006326 	beq	r2,zero,8a5c <__sfvwrite_r+0x23c>
    88d0:	80800917 	ldw	r2,36(r16)
    88d4:	81400717 	ldw	r5,28(r16)
    88d8:	980d883a 	mov	r6,r19
    88dc:	a809883a 	mov	r4,r21
    88e0:	903ff01e 	bne	r18,zero,88a4 <__sfvwrite_r+0x84>
    88e4:	8cc00017 	ldw	r19,0(r17)
    88e8:	8c800117 	ldw	r18,4(r17)
    88ec:	8c400204 	addi	r17,r17,8
    88f0:	003fe906 	br	8898 <__sfvwrite_r+0x78>
    88f4:	800b883a 	mov	r5,r16
    88f8:	a809883a 	mov	r4,r21
    88fc:	000a15c0 	call	a15c <__swsetup_r>
    8900:	1000f81e 	bne	r2,zero,8ce4 <__sfvwrite_r+0x4c4>
    8904:	81c0030b 	ldhu	r7,12(r16)
    8908:	b4400017 	ldw	r17,0(r22)
    890c:	3880008c 	andi	r2,r7,2
    8910:	103fdb1e 	bne	r2,zero,8880 <__sfvwrite_r+0x60>
    8914:	3880004c 	andi	r2,r7,1
    8918:	84800217 	ldw	r18,8(r16)
    891c:	82000017 	ldw	r8,0(r16)
    8920:	10008b1e 	bne	r2,zero,8b50 <__sfvwrite_r+0x330>
    8924:	00a00034 	movhi	r2,32768
    8928:	10bfff84 	addi	r2,r2,-2
    892c:	00e00034 	movhi	r3,32768
    8930:	d8800015 	stw	r2,0(sp)
    8934:	18bfffc4 	addi	r2,r3,-1
    8938:	0039883a 	mov	fp,zero
    893c:	0027883a 	mov	r19,zero
    8940:	d8800115 	stw	r2,4(sp)
    8944:	98004126 	beq	r19,zero,8a4c <__sfvwrite_r+0x22c>
    8948:	3880800c 	andi	r2,r7,512
    894c:	10009326 	beq	r2,zero,8b9c <__sfvwrite_r+0x37c>
    8950:	902f883a 	mov	r23,r18
    8954:	9c80ba36 	bltu	r19,r18,8c40 <__sfvwrite_r+0x420>
    8958:	3881200c 	andi	r2,r7,1152
    895c:	10002626 	beq	r2,zero,89f8 <__sfvwrite_r+0x1d8>
    8960:	81800517 	ldw	r6,20(r16)
    8964:	81400417 	ldw	r5,16(r16)
    8968:	98800044 	addi	r2,r19,1
    896c:	3189883a 	add	r4,r6,r6
    8970:	2189883a 	add	r4,r4,r6
    8974:	2028d7fa 	srli	r20,r4,31
    8978:	4165c83a 	sub	r18,r8,r5
    897c:	1485883a 	add	r2,r2,r18
    8980:	a109883a 	add	r4,r20,r4
    8984:	2029d07a 	srai	r20,r4,1
    8988:	a00d883a 	mov	r6,r20
    898c:	a080022e 	bgeu	r20,r2,8998 <__sfvwrite_r+0x178>
    8990:	1029883a 	mov	r20,r2
    8994:	100d883a 	mov	r6,r2
    8998:	39c1000c 	andi	r7,r7,1024
    899c:	3800c126 	beq	r7,zero,8ca4 <__sfvwrite_r+0x484>
    89a0:	a809883a 	mov	r4,r21
    89a4:	300b883a 	mov	r5,r6
    89a8:	0008e2c0 	call	8e2c <_malloc_r>
    89ac:	1009883a 	mov	r4,r2
    89b0:	1000c826 	beq	r2,zero,8cd4 <__sfvwrite_r+0x4b4>
    89b4:	81400417 	ldw	r5,16(r16)
    89b8:	900d883a 	mov	r6,r18
    89bc:	00096e00 	call	96e0 <memcpy>
    89c0:	1009883a 	mov	r4,r2
    89c4:	8080030b 	ldhu	r2,12(r16)
    89c8:	00fedfc4 	movi	r3,-1153
    89cc:	10c4703a 	and	r2,r2,r3
    89d0:	10802014 	ori	r2,r2,128
    89d4:	8080030d 	sth	r2,12(r16)
    89d8:	2491883a 	add	r8,r4,r18
    89dc:	a485c83a 	sub	r2,r20,r18
    89e0:	81000415 	stw	r4,16(r16)
    89e4:	82000015 	stw	r8,0(r16)
    89e8:	85000515 	stw	r20,20(r16)
    89ec:	9825883a 	mov	r18,r19
    89f0:	80800215 	stw	r2,8(r16)
    89f4:	982f883a 	mov	r23,r19
    89f8:	4009883a 	mov	r4,r8
    89fc:	b80d883a 	mov	r6,r23
    8a00:	e00b883a 	mov	r5,fp
    8a04:	00097e00 	call	97e0 <memmove>
    8a08:	81000217 	ldw	r4,8(r16)
    8a0c:	80800017 	ldw	r2,0(r16)
    8a10:	9829883a 	mov	r20,r19
    8a14:	24a5c83a 	sub	r18,r4,r18
    8a18:	15c5883a 	add	r2,r2,r23
    8a1c:	84800215 	stw	r18,8(r16)
    8a20:	80800015 	stw	r2,0(r16)
    8a24:	0027883a 	mov	r19,zero
    8a28:	b0800217 	ldw	r2,8(r22)
    8a2c:	e539883a 	add	fp,fp,r20
    8a30:	1529c83a 	sub	r20,r2,r20
    8a34:	b5000215 	stw	r20,8(r22)
    8a38:	a0000826 	beq	r20,zero,8a5c <__sfvwrite_r+0x23c>
    8a3c:	81c0030b 	ldhu	r7,12(r16)
    8a40:	84800217 	ldw	r18,8(r16)
    8a44:	82000017 	ldw	r8,0(r16)
    8a48:	983fbf1e 	bne	r19,zero,8948 <__sfvwrite_r+0x128>
    8a4c:	8f000017 	ldw	fp,0(r17)
    8a50:	8cc00117 	ldw	r19,4(r17)
    8a54:	8c400204 	addi	r17,r17,8
    8a58:	003fba06 	br	8944 <__sfvwrite_r+0x124>
    8a5c:	0005883a 	mov	r2,zero
    8a60:	dfc00b17 	ldw	ra,44(sp)
    8a64:	df000a17 	ldw	fp,40(sp)
    8a68:	ddc00917 	ldw	r23,36(sp)
    8a6c:	dd800817 	ldw	r22,32(sp)
    8a70:	dd400717 	ldw	r21,28(sp)
    8a74:	dd000617 	ldw	r20,24(sp)
    8a78:	dcc00517 	ldw	r19,20(sp)
    8a7c:	dc800417 	ldw	r18,16(sp)
    8a80:	dc400317 	ldw	r17,12(sp)
    8a84:	dc000217 	ldw	r16,8(sp)
    8a88:	dec00c04 	addi	sp,sp,48
    8a8c:	f800283a 	ret
    8a90:	e1c07316 	blt	fp,r7,8c60 <__sfvwrite_r+0x440>
    8a94:	80800917 	ldw	r2,36(r16)
    8a98:	81400717 	ldw	r5,28(r16)
    8a9c:	b80d883a 	mov	r6,r23
    8aa0:	a809883a 	mov	r4,r21
    8aa4:	103ee83a 	callr	r2
    8aa8:	1025883a 	mov	r18,r2
    8aac:	0080210e 	bge	zero,r2,8b34 <__sfvwrite_r+0x314>
    8ab0:	a4a9c83a 	sub	r20,r20,r18
    8ab4:	a0006526 	beq	r20,zero,8c4c <__sfvwrite_r+0x42c>
    8ab8:	00800044 	movi	r2,1
    8abc:	b1800217 	ldw	r6,8(r22)
    8ac0:	bcaf883a 	add	r23,r23,r18
    8ac4:	9ca7c83a 	sub	r19,r19,r18
    8ac8:	34a5c83a 	sub	r18,r6,r18
    8acc:	b4800215 	stw	r18,8(r22)
    8ad0:	903fe226 	beq	r18,zero,8a5c <__sfvwrite_r+0x23c>
    8ad4:	84800217 	ldw	r18,8(r16)
    8ad8:	82000017 	ldw	r8,0(r16)
    8adc:	98002126 	beq	r19,zero,8b64 <__sfvwrite_r+0x344>
    8ae0:	10002426 	beq	r2,zero,8b74 <__sfvwrite_r+0x354>
    8ae4:	a005883a 	mov	r2,r20
    8ae8:	9839883a 	mov	fp,r19
    8aec:	14c0012e 	bgeu	r2,r19,8af4 <__sfvwrite_r+0x2d4>
    8af0:	1039883a 	mov	fp,r2
    8af4:	80800417 	ldw	r2,16(r16)
    8af8:	81c00517 	ldw	r7,20(r16)
    8afc:	123fe42e 	bgeu	r2,r8,8a90 <__sfvwrite_r+0x270>
    8b00:	3ca5883a 	add	r18,r7,r18
    8b04:	973fe20e 	bge	r18,fp,8a90 <__sfvwrite_r+0x270>
    8b08:	b80b883a 	mov	r5,r23
    8b0c:	4009883a 	mov	r4,r8
    8b10:	900d883a 	mov	r6,r18
    8b14:	00097e00 	call	97e0 <memmove>
    8b18:	80800017 	ldw	r2,0(r16)
    8b1c:	800b883a 	mov	r5,r16
    8b20:	a809883a 	mov	r4,r21
    8b24:	1485883a 	add	r2,r2,r18
    8b28:	80800015 	stw	r2,0(r16)
    8b2c:	000a6400 	call	a640 <_fflush_r>
    8b30:	103fdf26 	beq	r2,zero,8ab0 <__sfvwrite_r+0x290>
    8b34:	8080030b 	ldhu	r2,12(r16)
    8b38:	10801014 	ori	r2,r2,64
    8b3c:	8080030d 	sth	r2,12(r16)
    8b40:	00bfffc4 	movi	r2,-1
    8b44:	003fc606 	br	8a60 <__sfvwrite_r+0x240>
    8b48:	0005883a 	mov	r2,zero
    8b4c:	f800283a 	ret
    8b50:	0027883a 	mov	r19,zero
    8b54:	0029883a 	mov	r20,zero
    8b58:	0005883a 	mov	r2,zero
    8b5c:	002f883a 	mov	r23,zero
    8b60:	983fdf1e 	bne	r19,zero,8ae0 <__sfvwrite_r+0x2c0>
    8b64:	8cc00117 	ldw	r19,4(r17)
    8b68:	8dc00017 	ldw	r23,0(r17)
    8b6c:	8c400204 	addi	r17,r17,8
    8b70:	983ffc26 	beq	r19,zero,8b64 <__sfvwrite_r+0x344>
    8b74:	980d883a 	mov	r6,r19
    8b78:	01400284 	movi	r5,10
    8b7c:	b809883a 	mov	r4,r23
    8b80:	da000015 	stw	r8,0(sp)
    8b84:	000960c0 	call	960c <memchr>
    8b88:	da000017 	ldw	r8,0(sp)
    8b8c:	10004226 	beq	r2,zero,8c98 <__sfvwrite_r+0x478>
    8b90:	10800044 	addi	r2,r2,1
    8b94:	15e9c83a 	sub	r20,r2,r23
    8b98:	003fd206 	br	8ae4 <__sfvwrite_r+0x2c4>
    8b9c:	80800417 	ldw	r2,16(r16)
    8ba0:	12001436 	bltu	r2,r8,8bf4 <__sfvwrite_r+0x3d4>
    8ba4:	85000517 	ldw	r20,20(r16)
    8ba8:	9d001236 	bltu	r19,r20,8bf4 <__sfvwrite_r+0x3d4>
    8bac:	d8800017 	ldw	r2,0(sp)
    8bb0:	14c0372e 	bgeu	r2,r19,8c90 <__sfvwrite_r+0x470>
    8bb4:	d9000117 	ldw	r4,4(sp)
    8bb8:	a00b883a 	mov	r5,r20
    8bbc:	000817c0 	call	817c <__divsi3>
    8bc0:	a00b883a 	mov	r5,r20
    8bc4:	1009883a 	mov	r4,r2
    8bc8:	00083300 	call	8330 <__mulsi3>
    8bcc:	82000917 	ldw	r8,36(r16)
    8bd0:	81400717 	ldw	r5,28(r16)
    8bd4:	100f883a 	mov	r7,r2
    8bd8:	e00d883a 	mov	r6,fp
    8bdc:	a809883a 	mov	r4,r21
    8be0:	403ee83a 	callr	r8
    8be4:	1029883a 	mov	r20,r2
    8be8:	00bfd20e 	bge	zero,r2,8b34 <__sfvwrite_r+0x314>
    8bec:	9d27c83a 	sub	r19,r19,r20
    8bf0:	003f8d06 	br	8a28 <__sfvwrite_r+0x208>
    8bf4:	9029883a 	mov	r20,r18
    8bf8:	9c80012e 	bgeu	r19,r18,8c00 <__sfvwrite_r+0x3e0>
    8bfc:	9829883a 	mov	r20,r19
    8c00:	4009883a 	mov	r4,r8
    8c04:	a00d883a 	mov	r6,r20
    8c08:	e00b883a 	mov	r5,fp
    8c0c:	00097e00 	call	97e0 <memmove>
    8c10:	80800217 	ldw	r2,8(r16)
    8c14:	81000017 	ldw	r4,0(r16)
    8c18:	1505c83a 	sub	r2,r2,r20
    8c1c:	2509883a 	add	r4,r4,r20
    8c20:	80800215 	stw	r2,8(r16)
    8c24:	81000015 	stw	r4,0(r16)
    8c28:	103ff01e 	bne	r2,zero,8bec <__sfvwrite_r+0x3cc>
    8c2c:	800b883a 	mov	r5,r16
    8c30:	a809883a 	mov	r4,r21
    8c34:	000a6400 	call	a640 <_fflush_r>
    8c38:	103fec26 	beq	r2,zero,8bec <__sfvwrite_r+0x3cc>
    8c3c:	003fbd06 	br	8b34 <__sfvwrite_r+0x314>
    8c40:	9825883a 	mov	r18,r19
    8c44:	982f883a 	mov	r23,r19
    8c48:	003f6b06 	br	89f8 <__sfvwrite_r+0x1d8>
    8c4c:	800b883a 	mov	r5,r16
    8c50:	a809883a 	mov	r4,r21
    8c54:	000a6400 	call	a640 <_fflush_r>
    8c58:	103f9826 	beq	r2,zero,8abc <__sfvwrite_r+0x29c>
    8c5c:	003fb506 	br	8b34 <__sfvwrite_r+0x314>
    8c60:	e00d883a 	mov	r6,fp
    8c64:	b80b883a 	mov	r5,r23
    8c68:	4009883a 	mov	r4,r8
    8c6c:	00097e00 	call	97e0 <memmove>
    8c70:	80800217 	ldw	r2,8(r16)
    8c74:	81800017 	ldw	r6,0(r16)
    8c78:	e025883a 	mov	r18,fp
    8c7c:	1705c83a 	sub	r2,r2,fp
    8c80:	370d883a 	add	r6,r6,fp
    8c84:	80800215 	stw	r2,8(r16)
    8c88:	81800015 	stw	r6,0(r16)
    8c8c:	003f8806 	br	8ab0 <__sfvwrite_r+0x290>
    8c90:	9809883a 	mov	r4,r19
    8c94:	003fc806 	br	8bb8 <__sfvwrite_r+0x398>
    8c98:	98800044 	addi	r2,r19,1
    8c9c:	1029883a 	mov	r20,r2
    8ca0:	003f9106 	br	8ae8 <__sfvwrite_r+0x2c8>
    8ca4:	a809883a 	mov	r4,r21
    8ca8:	00099fc0 	call	99fc <_realloc_r>
    8cac:	1009883a 	mov	r4,r2
    8cb0:	103f491e 	bne	r2,zero,89d8 <__sfvwrite_r+0x1b8>
    8cb4:	81400417 	ldw	r5,16(r16)
    8cb8:	a809883a 	mov	r4,r21
    8cbc:	000a7e40 	call	a7e4 <_free_r>
    8cc0:	8080030b 	ldhu	r2,12(r16)
    8cc4:	00c00304 	movi	r3,12
    8cc8:	a8c00015 	stw	r3,0(r21)
    8ccc:	10bfdfcc 	andi	r2,r2,65407
    8cd0:	003f9906 	br	8b38 <__sfvwrite_r+0x318>
    8cd4:	00c00304 	movi	r3,12
    8cd8:	8080030b 	ldhu	r2,12(r16)
    8cdc:	a8c00015 	stw	r3,0(r21)
    8ce0:	003f9506 	br	8b38 <__sfvwrite_r+0x318>
    8ce4:	00bfffc4 	movi	r2,-1
    8ce8:	003f5d06 	br	8a60 <__sfvwrite_r+0x240>

00008cec <_fwalk>:
    8cec:	defffa04 	addi	sp,sp,-24
    8cf0:	dd000415 	stw	r20,16(sp)
    8cf4:	dcc00315 	stw	r19,12(sp)
    8cf8:	dc800215 	stw	r18,8(sp)
    8cfc:	dfc00515 	stw	ra,20(sp)
    8d00:	dc400115 	stw	r17,4(sp)
    8d04:	dc000015 	stw	r16,0(sp)
    8d08:	2827883a 	mov	r19,r5
    8d0c:	2480b804 	addi	r18,r4,736
    8d10:	0029883a 	mov	r20,zero
    8d14:	94400117 	ldw	r17,4(r18)
    8d18:	94000217 	ldw	r16,8(r18)
    8d1c:	8c7fffc4 	addi	r17,r17,-1
    8d20:	88000d16 	blt	r17,zero,8d58 <_fwalk+0x6c>
    8d24:	8080030b 	ldhu	r2,12(r16)
    8d28:	8c7fffc4 	addi	r17,r17,-1
    8d2c:	108000b0 	cmpltui	r2,r2,2
    8d30:	1000061e 	bne	r2,zero,8d4c <_fwalk+0x60>
    8d34:	8080038f 	ldh	r2,14(r16)
    8d38:	8009883a 	mov	r4,r16
    8d3c:	10bfffe0 	cmpeqi	r2,r2,-1
    8d40:	1000021e 	bne	r2,zero,8d4c <_fwalk+0x60>
    8d44:	983ee83a 	callr	r19
    8d48:	a0a8b03a 	or	r20,r20,r2
    8d4c:	88bfffd8 	cmpnei	r2,r17,-1
    8d50:	84001a04 	addi	r16,r16,104
    8d54:	103ff31e 	bne	r2,zero,8d24 <_fwalk+0x38>
    8d58:	94800017 	ldw	r18,0(r18)
    8d5c:	903fed1e 	bne	r18,zero,8d14 <_fwalk+0x28>
    8d60:	a005883a 	mov	r2,r20
    8d64:	dfc00517 	ldw	ra,20(sp)
    8d68:	dd000417 	ldw	r20,16(sp)
    8d6c:	dcc00317 	ldw	r19,12(sp)
    8d70:	dc800217 	ldw	r18,8(sp)
    8d74:	dc400117 	ldw	r17,4(sp)
    8d78:	dc000017 	ldw	r16,0(sp)
    8d7c:	dec00604 	addi	sp,sp,24
    8d80:	f800283a 	ret

00008d84 <_fwalk_reent>:
    8d84:	defff904 	addi	sp,sp,-28
    8d88:	dd400515 	stw	r21,20(sp)
    8d8c:	dd000415 	stw	r20,16(sp)
    8d90:	dcc00315 	stw	r19,12(sp)
    8d94:	dc800215 	stw	r18,8(sp)
    8d98:	dfc00615 	stw	ra,24(sp)
    8d9c:	dc400115 	stw	r17,4(sp)
    8da0:	dc000015 	stw	r16,0(sp)
    8da4:	202b883a 	mov	r21,r4
    8da8:	2827883a 	mov	r19,r5
    8dac:	2480b804 	addi	r18,r4,736
    8db0:	0029883a 	mov	r20,zero
    8db4:	94400117 	ldw	r17,4(r18)
    8db8:	94000217 	ldw	r16,8(r18)
    8dbc:	8c7fffc4 	addi	r17,r17,-1
    8dc0:	88000e16 	blt	r17,zero,8dfc <_fwalk_reent+0x78>
    8dc4:	8080030b 	ldhu	r2,12(r16)
    8dc8:	8c7fffc4 	addi	r17,r17,-1
    8dcc:	108000b0 	cmpltui	r2,r2,2
    8dd0:	1000071e 	bne	r2,zero,8df0 <_fwalk_reent+0x6c>
    8dd4:	8080038f 	ldh	r2,14(r16)
    8dd8:	800b883a 	mov	r5,r16
    8ddc:	a809883a 	mov	r4,r21
    8de0:	10bfffe0 	cmpeqi	r2,r2,-1
    8de4:	1000021e 	bne	r2,zero,8df0 <_fwalk_reent+0x6c>
    8de8:	983ee83a 	callr	r19
    8dec:	a0a8b03a 	or	r20,r20,r2
    8df0:	88bfffd8 	cmpnei	r2,r17,-1
    8df4:	84001a04 	addi	r16,r16,104
    8df8:	103ff21e 	bne	r2,zero,8dc4 <_fwalk_reent+0x40>
    8dfc:	94800017 	ldw	r18,0(r18)
    8e00:	903fec1e 	bne	r18,zero,8db4 <_fwalk_reent+0x30>
    8e04:	a005883a 	mov	r2,r20
    8e08:	dfc00617 	ldw	ra,24(sp)
    8e0c:	dd400517 	ldw	r21,20(sp)
    8e10:	dd000417 	ldw	r20,16(sp)
    8e14:	dcc00317 	ldw	r19,12(sp)
    8e18:	dc800217 	ldw	r18,8(sp)
    8e1c:	dc400117 	ldw	r17,4(sp)
    8e20:	dc000017 	ldw	r16,0(sp)
    8e24:	dec00704 	addi	sp,sp,28
    8e28:	f800283a 	ret

00008e2c <_malloc_r>:
    8e2c:	defff604 	addi	sp,sp,-40
    8e30:	dc400115 	stw	r17,4(sp)
    8e34:	2c4002c4 	addi	r17,r5,11
    8e38:	dc800215 	stw	r18,8(sp)
    8e3c:	dfc00915 	stw	ra,36(sp)
    8e40:	df000815 	stw	fp,32(sp)
    8e44:	ddc00715 	stw	r23,28(sp)
    8e48:	dd800615 	stw	r22,24(sp)
    8e4c:	dd400515 	stw	r21,20(sp)
    8e50:	dd000415 	stw	r20,16(sp)
    8e54:	dcc00315 	stw	r19,12(sp)
    8e58:	dc000015 	stw	r16,0(sp)
    8e5c:	888005e8 	cmpgeui	r2,r17,23
    8e60:	2025883a 	mov	r18,r4
    8e64:	10001b1e 	bne	r2,zero,8ed4 <_malloc_r+0xa8>
    8e68:	29400468 	cmpgeui	r5,r5,17
    8e6c:	2800821e 	bne	r5,zero,9078 <_malloc_r+0x24c>
    8e70:	000b3e40 	call	b3e4 <__malloc_lock>
    8e74:	04400404 	movi	r17,16
    8e78:	01c00084 	movi	r7,2
    8e7c:	00800604 	movi	r2,24
    8e80:	04c00074 	movhi	r19,1
    8e84:	9cf2df04 	addi	r19,r19,-13444
    8e88:	9885883a 	add	r2,r19,r2
    8e8c:	14000117 	ldw	r16,4(r2)
    8e90:	10fffe04 	addi	r3,r2,-8
    8e94:	80c08b26 	beq	r16,r3,90c4 <_malloc_r+0x298>
    8e98:	80800117 	ldw	r2,4(r16)
    8e9c:	81000317 	ldw	r4,12(r16)
    8ea0:	00ffff04 	movi	r3,-4
    8ea4:	10c4703a 	and	r2,r2,r3
    8ea8:	81400217 	ldw	r5,8(r16)
    8eac:	8085883a 	add	r2,r16,r2
    8eb0:	10c00117 	ldw	r3,4(r2)
    8eb4:	29000315 	stw	r4,12(r5)
    8eb8:	21400215 	stw	r5,8(r4)
    8ebc:	18c00054 	ori	r3,r3,1
    8ec0:	10c00115 	stw	r3,4(r2)
    8ec4:	9009883a 	mov	r4,r18
    8ec8:	000b4080 	call	b408 <__malloc_unlock>
    8ecc:	80800204 	addi	r2,r16,8
    8ed0:	00006c06 	br	9084 <_malloc_r+0x258>
    8ed4:	00bffe04 	movi	r2,-8
    8ed8:	88a2703a 	and	r17,r17,r2
    8edc:	88006616 	blt	r17,zero,9078 <_malloc_r+0x24c>
    8ee0:	89406536 	bltu	r17,r5,9078 <_malloc_r+0x24c>
    8ee4:	000b3e40 	call	b3e4 <__malloc_lock>
    8ee8:	88807e28 	cmpgeui	r2,r17,504
    8eec:	10012226 	beq	r2,zero,9378 <_malloc_r+0x54c>
    8ef0:	8804d27a 	srli	r2,r17,9
    8ef4:	10006f26 	beq	r2,zero,90b4 <_malloc_r+0x288>
    8ef8:	10c00168 	cmpgeui	r3,r2,5
    8efc:	1800fe1e 	bne	r3,zero,92f8 <_malloc_r+0x4cc>
    8f00:	8804d1ba 	srli	r2,r17,6
    8f04:	11c00e44 	addi	r7,r2,57
    8f08:	380890fa 	slli	r4,r7,3
    8f0c:	12000e04 	addi	r8,r2,56
    8f10:	04c00074 	movhi	r19,1
    8f14:	9cf2df04 	addi	r19,r19,-13444
    8f18:	9909883a 	add	r4,r19,r4
    8f1c:	24000117 	ldw	r16,4(r4)
    8f20:	213ffe04 	addi	r4,r4,-8
    8f24:	24000b26 	beq	r4,r16,8f54 <_malloc_r+0x128>
    8f28:	01bfff04 	movi	r6,-4
    8f2c:	00000306 	br	8f3c <_malloc_r+0x110>
    8f30:	1800d60e 	bge	r3,zero,928c <_malloc_r+0x460>
    8f34:	84000317 	ldw	r16,12(r16)
    8f38:	24000626 	beq	r4,r16,8f54 <_malloc_r+0x128>
    8f3c:	80800117 	ldw	r2,4(r16)
    8f40:	1184703a 	and	r2,r2,r6
    8f44:	1447c83a 	sub	r3,r2,r17
    8f48:	19400408 	cmpgei	r5,r3,16
    8f4c:	283ff826 	beq	r5,zero,8f30 <_malloc_r+0x104>
    8f50:	400f883a 	mov	r7,r8
    8f54:	9c000417 	ldw	r16,16(r19)
    8f58:	02400074 	movhi	r9,1
    8f5c:	4a72e104 	addi	r9,r9,-13436
    8f60:	82405f26 	beq	r16,r9,90e0 <_malloc_r+0x2b4>
    8f64:	80c00117 	ldw	r3,4(r16)
    8f68:	00bfff04 	movi	r2,-4
    8f6c:	1884703a 	and	r2,r3,r2
    8f70:	1447c83a 	sub	r3,r2,r17
    8f74:	19000410 	cmplti	r4,r3,16
    8f78:	20010a26 	beq	r4,zero,93a4 <_malloc_r+0x578>
    8f7c:	9a400515 	stw	r9,20(r19)
    8f80:	9a400415 	stw	r9,16(r19)
    8f84:	1800ff0e 	bge	r3,zero,9384 <_malloc_r+0x558>
    8f88:	10c08028 	cmpgeui	r3,r2,512
    8f8c:	1800c11e 	bne	r3,zero,9294 <_malloc_r+0x468>
    8f90:	1006d0fa 	srli	r3,r2,3
    8f94:	1008d17a 	srli	r4,r2,5
    8f98:	00800044 	movi	r2,1
    8f9c:	18c00044 	addi	r3,r3,1
    8fa0:	180690fa 	slli	r3,r3,3
    8fa4:	99400117 	ldw	r5,4(r19)
    8fa8:	1104983a 	sll	r2,r2,r4
    8fac:	98c7883a 	add	r3,r19,r3
    8fb0:	19000017 	ldw	r4,0(r3)
    8fb4:	1144b03a 	or	r2,r2,r5
    8fb8:	197ffe04 	addi	r5,r3,-8
    8fbc:	81400315 	stw	r5,12(r16)
    8fc0:	81000215 	stw	r4,8(r16)
    8fc4:	98800115 	stw	r2,4(r19)
    8fc8:	1c000015 	stw	r16,0(r3)
    8fcc:	24000315 	stw	r16,12(r4)
    8fd0:	3807d0ba 	srai	r3,r7,2
    8fd4:	01000044 	movi	r4,1
    8fd8:	20c8983a 	sll	r4,r4,r3
    8fdc:	11004536 	bltu	r2,r4,90f4 <_malloc_r+0x2c8>
    8fe0:	2086703a 	and	r3,r4,r2
    8fe4:	18000a1e 	bne	r3,zero,9010 <_malloc_r+0x1e4>
    8fe8:	00ffff04 	movi	r3,-4
    8fec:	2109883a 	add	r4,r4,r4
    8ff0:	38ce703a 	and	r7,r7,r3
    8ff4:	2086703a 	and	r3,r4,r2
    8ff8:	39c00104 	addi	r7,r7,4
    8ffc:	1800041e 	bne	r3,zero,9010 <_malloc_r+0x1e4>
    9000:	2109883a 	add	r4,r4,r4
    9004:	2086703a 	and	r3,r4,r2
    9008:	39c00104 	addi	r7,r7,4
    900c:	183ffc26 	beq	r3,zero,9000 <_malloc_r+0x1d4>
    9010:	02bfff04 	movi	r10,-4
    9014:	381690fa 	slli	r11,r7,3
    9018:	3819883a 	mov	r12,r7
    901c:	9ad7883a 	add	r11,r19,r11
    9020:	5811883a 	mov	r8,r11
    9024:	40800317 	ldw	r2,12(r8)
    9028:	4080bc26 	beq	r8,r2,931c <_malloc_r+0x4f0>
    902c:	10c00117 	ldw	r3,4(r2)
    9030:	1021883a 	mov	r16,r2
    9034:	10800317 	ldw	r2,12(r2)
    9038:	1a86703a 	and	r3,r3,r10
    903c:	1c4bc83a 	sub	r5,r3,r17
    9040:	29800410 	cmplti	r6,r5,16
    9044:	3000ba26 	beq	r6,zero,9330 <_malloc_r+0x504>
    9048:	283ff716 	blt	r5,zero,9028 <_malloc_r+0x1fc>
    904c:	80c7883a 	add	r3,r16,r3
    9050:	19400117 	ldw	r5,4(r3)
    9054:	81800217 	ldw	r6,8(r16)
    9058:	9009883a 	mov	r4,r18
    905c:	29400054 	ori	r5,r5,1
    9060:	19400115 	stw	r5,4(r3)
    9064:	30800315 	stw	r2,12(r6)
    9068:	11800215 	stw	r6,8(r2)
    906c:	000b4080 	call	b408 <__malloc_unlock>
    9070:	80800204 	addi	r2,r16,8
    9074:	00000306 	br	9084 <_malloc_r+0x258>
    9078:	00800304 	movi	r2,12
    907c:	90800015 	stw	r2,0(r18)
    9080:	0005883a 	mov	r2,zero
    9084:	dfc00917 	ldw	ra,36(sp)
    9088:	df000817 	ldw	fp,32(sp)
    908c:	ddc00717 	ldw	r23,28(sp)
    9090:	dd800617 	ldw	r22,24(sp)
    9094:	dd400517 	ldw	r21,20(sp)
    9098:	dd000417 	ldw	r20,16(sp)
    909c:	dcc00317 	ldw	r19,12(sp)
    90a0:	dc800217 	ldw	r18,8(sp)
    90a4:	dc400117 	ldw	r17,4(sp)
    90a8:	dc000017 	ldw	r16,0(sp)
    90ac:	dec00a04 	addi	sp,sp,40
    90b0:	f800283a 	ret
    90b4:	01008004 	movi	r4,512
    90b8:	01c01004 	movi	r7,64
    90bc:	02000fc4 	movi	r8,63
    90c0:	003f9306 	br	8f10 <_malloc_r+0xe4>
    90c4:	14000317 	ldw	r16,12(r2)
    90c8:	39c00084 	addi	r7,r7,2
    90cc:	143f721e 	bne	r2,r16,8e98 <_malloc_r+0x6c>
    90d0:	9c000417 	ldw	r16,16(r19)
    90d4:	02400074 	movhi	r9,1
    90d8:	4a72e104 	addi	r9,r9,-13436
    90dc:	827fa11e 	bne	r16,r9,8f64 <_malloc_r+0x138>
    90e0:	3807d0ba 	srai	r3,r7,2
    90e4:	01000044 	movi	r4,1
    90e8:	98800117 	ldw	r2,4(r19)
    90ec:	20c8983a 	sll	r4,r4,r3
    90f0:	113fbb2e 	bgeu	r2,r4,8fe0 <_malloc_r+0x1b4>
    90f4:	9c000217 	ldw	r16,8(r19)
    90f8:	00bfff04 	movi	r2,-4
    90fc:	85400117 	ldw	r21,4(r16)
    9100:	a8ac703a 	and	r22,r21,r2
    9104:	b4400336 	bltu	r22,r17,9114 <_malloc_r+0x2e8>
    9108:	b445c83a 	sub	r2,r22,r17
    910c:	10c00408 	cmpgei	r3,r2,16
    9110:	1800541e 	bne	r3,zero,9264 <_malloc_r+0x438>
    9114:	00800074 	movhi	r2,1
    9118:	10b45817 	ldw	r2,-11936(r2)
    911c:	00c00074 	movhi	r3,1
    9120:	1d76ee17 	ldw	r21,-9288(r3)
    9124:	10bfffd8 	cmpnei	r2,r2,-1
    9128:	85b9883a 	add	fp,r16,r22
    912c:	8d6b883a 	add	r21,r17,r21
    9130:	1000d626 	beq	r2,zero,948c <_malloc_r+0x660>
    9134:	ad4403c4 	addi	r21,r21,4111
    9138:	00bc0004 	movi	r2,-4096
    913c:	a8aa703a 	and	r21,r21,r2
    9140:	a80b883a 	mov	r5,r21
    9144:	9009883a 	mov	r4,r18
    9148:	0009f600 	call	9f60 <_sbrk_r>
    914c:	102f883a 	mov	r23,r2
    9150:	10bfffd8 	cmpnei	r2,r2,-1
    9154:	1000a826 	beq	r2,zero,93f8 <_malloc_r+0x5cc>
    9158:	bf00a636 	bltu	r23,fp,93f4 <_malloc_r+0x5c8>
    915c:	00800074 	movhi	r2,1
    9160:	1536f317 	ldw	r20,-9268(r2)
    9164:	ad29883a 	add	r20,r21,r20
    9168:	1536f315 	stw	r20,-9268(r2)
    916c:	a007883a 	mov	r3,r20
    9170:	e5c0ec26 	beq	fp,r23,9524 <_malloc_r+0x6f8>
    9174:	00800074 	movhi	r2,1
    9178:	10b45817 	ldw	r2,-11936(r2)
    917c:	10bfffd8 	cmpnei	r2,r2,-1
    9180:	1000ef26 	beq	r2,zero,9540 <_malloc_r+0x714>
    9184:	bf39c83a 	sub	fp,r23,fp
    9188:	e0c7883a 	add	r3,fp,r3
    918c:	00800074 	movhi	r2,1
    9190:	10f6f315 	stw	r3,-9268(r2)
    9194:	bf0001cc 	andi	fp,r23,7
    9198:	e000c526 	beq	fp,zero,94b0 <_malloc_r+0x684>
    919c:	bf2fc83a 	sub	r23,r23,fp
    91a0:	bdc00204 	addi	r23,r23,8
    91a4:	05040204 	movi	r20,4104
    91a8:	a729c83a 	sub	r20,r20,fp
    91ac:	bd6b883a 	add	r21,r23,r21
    91b0:	a569c83a 	sub	r20,r20,r21
    91b4:	a503ffcc 	andi	r20,r20,4095
    91b8:	a00b883a 	mov	r5,r20
    91bc:	9009883a 	mov	r4,r18
    91c0:	0009f600 	call	9f60 <_sbrk_r>
    91c4:	10ffffe0 	cmpeqi	r3,r2,-1
    91c8:	1800f31e 	bne	r3,zero,9598 <_malloc_r+0x76c>
    91cc:	15c5c83a 	sub	r2,r2,r23
    91d0:	152b883a 	add	r21,r2,r20
    91d4:	00800074 	movhi	r2,1
    91d8:	1176f317 	ldw	r5,-9268(r2)
    91dc:	9dc00215 	stw	r23,8(r19)
    91e0:	ad400054 	ori	r21,r21,1
    91e4:	a169883a 	add	r20,r20,r5
    91e8:	1536f315 	stw	r20,-9268(r2)
    91ec:	bd400115 	stw	r21,4(r23)
    91f0:	84c0d626 	beq	r16,r19,954c <_malloc_r+0x720>
    91f4:	b0800428 	cmpgeui	r2,r22,16
    91f8:	1000d626 	beq	r2,zero,9554 <_malloc_r+0x728>
    91fc:	80c00117 	ldw	r3,4(r16)
    9200:	013ffe04 	movi	r4,-8
    9204:	b0bffd04 	addi	r2,r22,-12
    9208:	1104703a 	and	r2,r2,r4
    920c:	18c0004c 	andi	r3,r3,1
    9210:	1886b03a 	or	r3,r3,r2
    9214:	80c00115 	stw	r3,4(r16)
    9218:	01000144 	movi	r4,5
    921c:	8087883a 	add	r3,r16,r2
    9220:	19000115 	stw	r4,4(r3)
    9224:	19000215 	stw	r4,8(r3)
    9228:	10800428 	cmpgeui	r2,r2,16
    922c:	1000df1e 	bne	r2,zero,95ac <_malloc_r+0x780>
    9230:	bd400117 	ldw	r21,4(r23)
    9234:	b821883a 	mov	r16,r23
    9238:	00800074 	movhi	r2,1
    923c:	10b6ed17 	ldw	r2,-9292(r2)
    9240:	1500022e 	bgeu	r2,r20,924c <_malloc_r+0x420>
    9244:	00800074 	movhi	r2,1
    9248:	1536ed15 	stw	r20,-9292(r2)
    924c:	00800074 	movhi	r2,1
    9250:	10b6ec17 	ldw	r2,-9296(r2)
    9254:	15006a2e 	bgeu	r2,r20,9400 <_malloc_r+0x5d4>
    9258:	00800074 	movhi	r2,1
    925c:	1536ec15 	stw	r20,-9296(r2)
    9260:	00006706 	br	9400 <_malloc_r+0x5d4>
    9264:	88c00054 	ori	r3,r17,1
    9268:	80c00115 	stw	r3,4(r16)
    926c:	8463883a 	add	r17,r16,r17
    9270:	10800054 	ori	r2,r2,1
    9274:	9c400215 	stw	r17,8(r19)
    9278:	88800115 	stw	r2,4(r17)
    927c:	9009883a 	mov	r4,r18
    9280:	000b4080 	call	b408 <__malloc_unlock>
    9284:	80800204 	addi	r2,r16,8
    9288:	003f7e06 	br	9084 <_malloc_r+0x258>
    928c:	81000317 	ldw	r4,12(r16)
    9290:	003f0506 	br	8ea8 <_malloc_r+0x7c>
    9294:	1006d27a 	srli	r3,r2,9
    9298:	19000168 	cmpgeui	r4,r3,5
    929c:	20005026 	beq	r4,zero,93e0 <_malloc_r+0x5b4>
    92a0:	19000568 	cmpgeui	r4,r3,21
    92a4:	20008c1e 	bne	r4,zero,94d8 <_malloc_r+0x6ac>
    92a8:	19401704 	addi	r5,r3,92
    92ac:	280a90fa 	slli	r5,r5,3
    92b0:	190016c4 	addi	r4,r3,91
    92b4:	994b883a 	add	r5,r19,r5
    92b8:	28c00017 	ldw	r3,0(r5)
    92bc:	297ffe04 	addi	r5,r5,-8
    92c0:	28c07426 	beq	r5,r3,9494 <_malloc_r+0x668>
    92c4:	01bfff04 	movi	r6,-4
    92c8:	19000117 	ldw	r4,4(r3)
    92cc:	2188703a 	and	r4,r4,r6
    92d0:	1100022e 	bgeu	r2,r4,92dc <_malloc_r+0x4b0>
    92d4:	18c00217 	ldw	r3,8(r3)
    92d8:	28fffb1e 	bne	r5,r3,92c8 <_malloc_r+0x49c>
    92dc:	19400317 	ldw	r5,12(r3)
    92e0:	98800117 	ldw	r2,4(r19)
    92e4:	81400315 	stw	r5,12(r16)
    92e8:	80c00215 	stw	r3,8(r16)
    92ec:	2c000215 	stw	r16,8(r5)
    92f0:	1c000315 	stw	r16,12(r3)
    92f4:	003f3606 	br	8fd0 <_malloc_r+0x1a4>
    92f8:	10c00568 	cmpgeui	r3,r2,21
    92fc:	18004a26 	beq	r3,zero,9428 <_malloc_r+0x5fc>
    9300:	10c01568 	cmpgeui	r3,r2,85
    9304:	18007b1e 	bne	r3,zero,94f4 <_malloc_r+0x6c8>
    9308:	8804d33a 	srli	r2,r17,12
    930c:	11c01bc4 	addi	r7,r2,111
    9310:	380890fa 	slli	r4,r7,3
    9314:	12001b84 	addi	r8,r2,110
    9318:	003efd06 	br	8f10 <_malloc_r+0xe4>
    931c:	63000044 	addi	r12,r12,1
    9320:	608000cc 	andi	r2,r12,3
    9324:	42000204 	addi	r8,r8,8
    9328:	103f3e1e 	bne	r2,zero,9024 <_malloc_r+0x1f8>
    932c:	00004506 	br	9444 <_malloc_r+0x618>
    9330:	81000217 	ldw	r4,8(r16)
    9334:	89800054 	ori	r6,r17,1
    9338:	81800115 	stw	r6,4(r16)
    933c:	20800315 	stw	r2,12(r4)
    9340:	11000215 	stw	r4,8(r2)
    9344:	8463883a 	add	r17,r16,r17
    9348:	9c400515 	stw	r17,20(r19)
    934c:	9c400415 	stw	r17,16(r19)
    9350:	28800054 	ori	r2,r5,1
    9354:	88800115 	stw	r2,4(r17)
    9358:	8a400315 	stw	r9,12(r17)
    935c:	8a400215 	stw	r9,8(r17)
    9360:	80c7883a 	add	r3,r16,r3
    9364:	19400015 	stw	r5,0(r3)
    9368:	9009883a 	mov	r4,r18
    936c:	000b4080 	call	b408 <__malloc_unlock>
    9370:	80800204 	addi	r2,r16,8
    9374:	003f4306 	br	9084 <_malloc_r+0x258>
    9378:	880ed0fa 	srli	r7,r17,3
    937c:	88800204 	addi	r2,r17,8
    9380:	003ebf06 	br	8e80 <_malloc_r+0x54>
    9384:	8085883a 	add	r2,r16,r2
    9388:	10c00117 	ldw	r3,4(r2)
    938c:	9009883a 	mov	r4,r18
    9390:	18c00054 	ori	r3,r3,1
    9394:	10c00115 	stw	r3,4(r2)
    9398:	000b4080 	call	b408 <__malloc_unlock>
    939c:	80800204 	addi	r2,r16,8
    93a0:	003f3806 	br	9084 <_malloc_r+0x258>
    93a4:	89000054 	ori	r4,r17,1
    93a8:	81000115 	stw	r4,4(r16)
    93ac:	8463883a 	add	r17,r16,r17
    93b0:	9c400515 	stw	r17,20(r19)
    93b4:	9c400415 	stw	r17,16(r19)
    93b8:	19000054 	ori	r4,r3,1
    93bc:	89000115 	stw	r4,4(r17)
    93c0:	8085883a 	add	r2,r16,r2
    93c4:	8a400315 	stw	r9,12(r17)
    93c8:	8a400215 	stw	r9,8(r17)
    93cc:	10c00015 	stw	r3,0(r2)
    93d0:	9009883a 	mov	r4,r18
    93d4:	000b4080 	call	b408 <__malloc_unlock>
    93d8:	80800204 	addi	r2,r16,8
    93dc:	003f2906 	br	9084 <_malloc_r+0x258>
    93e0:	1006d1ba 	srli	r3,r2,6
    93e4:	19400e44 	addi	r5,r3,57
    93e8:	280a90fa 	slli	r5,r5,3
    93ec:	19000e04 	addi	r4,r3,56
    93f0:	003fb006 	br	92b4 <_malloc_r+0x488>
    93f4:	84c04626 	beq	r16,r19,9510 <_malloc_r+0x6e4>
    93f8:	9c000217 	ldw	r16,8(r19)
    93fc:	85400117 	ldw	r21,4(r16)
    9400:	00bfff04 	movi	r2,-4
    9404:	a8aa703a 	and	r21,r21,r2
    9408:	ac45c83a 	sub	r2,r21,r17
    940c:	ac400236 	bltu	r21,r17,9418 <_malloc_r+0x5ec>
    9410:	10c00408 	cmpgei	r3,r2,16
    9414:	183f931e 	bne	r3,zero,9264 <_malloc_r+0x438>
    9418:	9009883a 	mov	r4,r18
    941c:	000b4080 	call	b408 <__malloc_unlock>
    9420:	0005883a 	mov	r2,zero
    9424:	003f1706 	br	9084 <_malloc_r+0x258>
    9428:	11c01704 	addi	r7,r2,92
    942c:	380890fa 	slli	r4,r7,3
    9430:	120016c4 	addi	r8,r2,91
    9434:	003eb606 	br	8f10 <_malloc_r+0xe4>
    9438:	58800217 	ldw	r2,8(r11)
    943c:	39ffffc4 	addi	r7,r7,-1
    9440:	12c0701e 	bne	r2,r11,9604 <_malloc_r+0x7d8>
    9444:	388000cc 	andi	r2,r7,3
    9448:	5afffe04 	addi	r11,r11,-8
    944c:	103ffa1e 	bne	r2,zero,9438 <_malloc_r+0x60c>
    9450:	98c00117 	ldw	r3,4(r19)
    9454:	0104303a 	nor	r2,zero,r4
    9458:	10c4703a 	and	r2,r2,r3
    945c:	98800115 	stw	r2,4(r19)
    9460:	2109883a 	add	r4,r4,r4
    9464:	113f2336 	bltu	r2,r4,90f4 <_malloc_r+0x2c8>
    9468:	203f2226 	beq	r4,zero,90f4 <_malloc_r+0x2c8>
    946c:	2086703a 	and	r3,r4,r2
    9470:	1800041e 	bne	r3,zero,9484 <_malloc_r+0x658>
    9474:	2109883a 	add	r4,r4,r4
    9478:	2086703a 	and	r3,r4,r2
    947c:	63000104 	addi	r12,r12,4
    9480:	183ffc26 	beq	r3,zero,9474 <_malloc_r+0x648>
    9484:	600f883a 	mov	r7,r12
    9488:	003ee206 	br	9014 <_malloc_r+0x1e8>
    948c:	ad400404 	addi	r21,r21,16
    9490:	003f2b06 	br	9140 <_malloc_r+0x314>
    9494:	2009d0ba 	srai	r4,r4,2
    9498:	00800044 	movi	r2,1
    949c:	99800117 	ldw	r6,4(r19)
    94a0:	1104983a 	sll	r2,r2,r4
    94a4:	1184b03a 	or	r2,r2,r6
    94a8:	98800115 	stw	r2,4(r19)
    94ac:	003f8d06 	br	92e4 <_malloc_r+0x4b8>
    94b0:	bd69883a 	add	r20,r23,r21
    94b4:	0529c83a 	sub	r20,zero,r20
    94b8:	a503ffcc 	andi	r20,r20,4095
    94bc:	a00b883a 	mov	r5,r20
    94c0:	9009883a 	mov	r4,r18
    94c4:	0009f600 	call	9f60 <_sbrk_r>
    94c8:	10ffffe0 	cmpeqi	r3,r2,-1
    94cc:	183f3f26 	beq	r3,zero,91cc <_malloc_r+0x3a0>
    94d0:	0029883a 	mov	r20,zero
    94d4:	003f3f06 	br	91d4 <_malloc_r+0x3a8>
    94d8:	19001568 	cmpgeui	r4,r3,85
    94dc:	2000201e 	bne	r4,zero,9560 <_malloc_r+0x734>
    94e0:	1006d33a 	srli	r3,r2,12
    94e4:	19401bc4 	addi	r5,r3,111
    94e8:	280a90fa 	slli	r5,r5,3
    94ec:	19001b84 	addi	r4,r3,110
    94f0:	003f7006 	br	92b4 <_malloc_r+0x488>
    94f4:	10c05568 	cmpgeui	r3,r2,341
    94f8:	1800201e 	bne	r3,zero,957c <_malloc_r+0x750>
    94fc:	8804d3fa 	srli	r2,r17,15
    9500:	11c01e04 	addi	r7,r2,120
    9504:	380890fa 	slli	r4,r7,3
    9508:	12001dc4 	addi	r8,r2,119
    950c:	003e8006 	br	8f10 <_malloc_r+0xe4>
    9510:	00800074 	movhi	r2,1
    9514:	10f6f317 	ldw	r3,-9268(r2)
    9518:	a8c7883a 	add	r3,r21,r3
    951c:	10f6f315 	stw	r3,-9268(r2)
    9520:	003f1406 	br	9174 <_malloc_r+0x348>
    9524:	e083ffcc 	andi	r2,fp,4095
    9528:	103f121e 	bne	r2,zero,9174 <_malloc_r+0x348>
    952c:	9c000217 	ldw	r16,8(r19)
    9530:	b56b883a 	add	r21,r22,r21
    9534:	ad400054 	ori	r21,r21,1
    9538:	85400115 	stw	r21,4(r16)
    953c:	003f3e06 	br	9238 <_malloc_r+0x40c>
    9540:	00800074 	movhi	r2,1
    9544:	15f45815 	stw	r23,-11936(r2)
    9548:	003f1206 	br	9194 <_malloc_r+0x368>
    954c:	b821883a 	mov	r16,r23
    9550:	003f3906 	br	9238 <_malloc_r+0x40c>
    9554:	00800044 	movi	r2,1
    9558:	b8800115 	stw	r2,4(r23)
    955c:	003fae06 	br	9418 <_malloc_r+0x5ec>
    9560:	19005568 	cmpgeui	r4,r3,341
    9564:	2000191e 	bne	r4,zero,95cc <_malloc_r+0x7a0>
    9568:	1006d3fa 	srli	r3,r2,15
    956c:	19401e04 	addi	r5,r3,120
    9570:	280a90fa 	slli	r5,r5,3
    9574:	19001dc4 	addi	r4,r3,119
    9578:	003f4e06 	br	92b4 <_malloc_r+0x488>
    957c:	10815568 	cmpgeui	r2,r2,1365
    9580:	1000191e 	bne	r2,zero,95e8 <_malloc_r+0x7bc>
    9584:	8804d4ba 	srli	r2,r17,18
    9588:	11c01f44 	addi	r7,r2,125
    958c:	380890fa 	slli	r4,r7,3
    9590:	12001f04 	addi	r8,r2,124
    9594:	003e5e06 	br	8f10 <_malloc_r+0xe4>
    9598:	e73ffe04 	addi	fp,fp,-8
    959c:	af2b883a 	add	r21,r21,fp
    95a0:	adebc83a 	sub	r21,r21,r23
    95a4:	0029883a 	mov	r20,zero
    95a8:	003f0a06 	br	91d4 <_malloc_r+0x3a8>
    95ac:	81400204 	addi	r5,r16,8
    95b0:	9009883a 	mov	r4,r18
    95b4:	000a7e40 	call	a7e4 <_free_r>
    95b8:	9c000217 	ldw	r16,8(r19)
    95bc:	00800074 	movhi	r2,1
    95c0:	1536f317 	ldw	r20,-9268(r2)
    95c4:	85400117 	ldw	r21,4(r16)
    95c8:	003f1b06 	br	9238 <_malloc_r+0x40c>
    95cc:	18c15568 	cmpgeui	r3,r3,1365
    95d0:	1800091e 	bne	r3,zero,95f8 <_malloc_r+0x7cc>
    95d4:	1006d4ba 	srli	r3,r2,18
    95d8:	19401f44 	addi	r5,r3,125
    95dc:	280a90fa 	slli	r5,r5,3
    95e0:	19001f04 	addi	r4,r3,124
    95e4:	003f3306 	br	92b4 <_malloc_r+0x488>
    95e8:	0100fe04 	movi	r4,1016
    95ec:	01c01fc4 	movi	r7,127
    95f0:	02001f84 	movi	r8,126
    95f4:	003e4606 	br	8f10 <_malloc_r+0xe4>
    95f8:	0140fe04 	movi	r5,1016
    95fc:	01001f84 	movi	r4,126
    9600:	003f2c06 	br	92b4 <_malloc_r+0x488>
    9604:	98800117 	ldw	r2,4(r19)
    9608:	003f9506 	br	9460 <_malloc_r+0x634>

0000960c <memchr>:
    960c:	208000cc 	andi	r2,r4,3
    9610:	280f883a 	mov	r7,r5
    9614:	10000e26 	beq	r2,zero,9650 <memchr+0x44>
    9618:	30bfffc4 	addi	r2,r6,-1
    961c:	30001726 	beq	r6,zero,967c <memchr+0x70>
    9620:	29803fcc 	andi	r6,r5,255
    9624:	00000606 	br	9640 <memchr+0x34>
    9628:	21000044 	addi	r4,r4,1
    962c:	20c000cc 	andi	r3,r4,3
    9630:	18000826 	beq	r3,zero,9654 <memchr+0x48>
    9634:	10bfffc4 	addi	r2,r2,-1
    9638:	10ffffe0 	cmpeqi	r3,r2,-1
    963c:	18000f1e 	bne	r3,zero,967c <memchr+0x70>
    9640:	20c00003 	ldbu	r3,0(r4)
    9644:	19bff81e 	bne	r3,r6,9628 <memchr+0x1c>
    9648:	2005883a 	mov	r2,r4
    964c:	f800283a 	ret
    9650:	3005883a 	mov	r2,r6
    9654:	10c00128 	cmpgeui	r3,r2,4
    9658:	18000a1e 	bne	r3,zero,9684 <memchr+0x78>
    965c:	10001f26 	beq	r2,zero,96dc <memchr+0xd0>
    9660:	2087883a 	add	r3,r4,r2
    9664:	39803fcc 	andi	r6,r7,255
    9668:	2005883a 	mov	r2,r4
    966c:	11000003 	ldbu	r4,0(r2)
    9670:	21bff626 	beq	r4,r6,964c <memchr+0x40>
    9674:	10800044 	addi	r2,r2,1
    9678:	18bffc1e 	bne	r3,r2,966c <memchr+0x60>
    967c:	0005883a 	mov	r2,zero
    9680:	f800283a 	ret
    9684:	2810923a 	slli	r8,r5,8
    9688:	29403fcc 	andi	r5,r5,255
    968c:	027fbff4 	movhi	r9,65279
    9690:	423fffcc 	andi	r8,r8,65535
    9694:	414ab03a 	or	r5,r8,r5
    9698:	2810943a 	slli	r8,r5,16
    969c:	01a02074 	movhi	r6,32897
    96a0:	4a7fbfc4 	addi	r9,r9,-257
    96a4:	4150b03a 	or	r8,r8,r5
    96a8:	31a02004 	addi	r6,r6,-32640
    96ac:	20c00017 	ldw	r3,0(r4)
    96b0:	40c6f03a 	xor	r3,r8,r3
    96b4:	1a4b883a 	add	r5,r3,r9
    96b8:	00c6303a 	nor	r3,zero,r3
    96bc:	28c6703a 	and	r3,r5,r3
    96c0:	1986703a 	and	r3,r3,r6
    96c4:	183fe61e 	bne	r3,zero,9660 <memchr+0x54>
    96c8:	10bfff04 	addi	r2,r2,-4
    96cc:	10c00128 	cmpgeui	r3,r2,4
    96d0:	21000104 	addi	r4,r4,4
    96d4:	183ff51e 	bne	r3,zero,96ac <memchr+0xa0>
    96d8:	003fe006 	br	965c <memchr+0x50>
    96dc:	f800283a 	ret

000096e0 <memcpy>:
    96e0:	30c00430 	cmpltui	r3,r6,16
    96e4:	2005883a 	mov	r2,r4
    96e8:	18002d1e 	bne	r3,zero,97a0 <memcpy+0xc0>
    96ec:	2906b03a 	or	r3,r5,r4
    96f0:	18c000cc 	andi	r3,r3,3
    96f4:	1800351e 	bne	r3,zero,97cc <memcpy+0xec>
    96f8:	32fffc04 	addi	r11,r6,-16
    96fc:	5816d13a 	srli	r11,r11,4
    9700:	280f883a 	mov	r7,r5
    9704:	2007883a 	mov	r3,r4
    9708:	5ac00044 	addi	r11,r11,1
    970c:	5816913a 	slli	r11,r11,4
    9710:	22d5883a 	add	r10,r4,r11
    9714:	39000117 	ldw	r4,4(r7)
    9718:	3a400017 	ldw	r9,0(r7)
    971c:	3a000217 	ldw	r8,8(r7)
    9720:	19000115 	stw	r4,4(r3)
    9724:	39000317 	ldw	r4,12(r7)
    9728:	1a400015 	stw	r9,0(r3)
    972c:	1a000215 	stw	r8,8(r3)
    9730:	19000315 	stw	r4,12(r3)
    9734:	18c00404 	addi	r3,r3,16
    9738:	39c00404 	addi	r7,r7,16
    973c:	50fff51e 	bne	r10,r3,9714 <memcpy+0x34>
    9740:	3100030c 	andi	r4,r6,12
    9744:	2acb883a 	add	r5,r5,r11
    9748:	320003cc 	andi	r8,r6,15
    974c:	20002226 	beq	r4,zero,97d8 <memcpy+0xf8>
    9750:	280f883a 	mov	r7,r5
    9754:	1813883a 	mov	r9,r3
    9758:	39c00104 	addi	r7,r7,4
    975c:	3abfff17 	ldw	r10,-4(r7)
    9760:	41c9c83a 	sub	r4,r8,r7
    9764:	2909883a 	add	r4,r5,r4
    9768:	4a800015 	stw	r10,0(r9)
    976c:	21000128 	cmpgeui	r4,r4,4
    9770:	4a400104 	addi	r9,r9,4
    9774:	203ff81e 	bne	r4,zero,9758 <memcpy+0x78>
    9778:	413fff04 	addi	r4,r8,-4
    977c:	2008d0ba 	srli	r4,r4,2
    9780:	318000cc 	andi	r6,r6,3
    9784:	31ffffc4 	addi	r7,r6,-1
    9788:	21000044 	addi	r4,r4,1
    978c:	200890ba 	slli	r4,r4,2
    9790:	1907883a 	add	r3,r3,r4
    9794:	290b883a 	add	r5,r5,r4
    9798:	3000041e 	bne	r6,zero,97ac <memcpy+0xcc>
    979c:	f800283a 	ret
    97a0:	2007883a 	mov	r3,r4
    97a4:	31ffffc4 	addi	r7,r6,-1
    97a8:	303ffc26 	beq	r6,zero,979c <memcpy+0xbc>
    97ac:	39c00044 	addi	r7,r7,1
    97b0:	19cf883a 	add	r7,r3,r7
    97b4:	29800003 	ldbu	r6,0(r5)
    97b8:	18c00044 	addi	r3,r3,1
    97bc:	29400044 	addi	r5,r5,1
    97c0:	19bfffc5 	stb	r6,-1(r3)
    97c4:	38fffb1e 	bne	r7,r3,97b4 <memcpy+0xd4>
    97c8:	f800283a 	ret
    97cc:	31ffffc4 	addi	r7,r6,-1
    97d0:	2007883a 	mov	r3,r4
    97d4:	003ff506 	br	97ac <memcpy+0xcc>
    97d8:	400d883a 	mov	r6,r8
    97dc:	003ff106 	br	97a4 <memcpy+0xc4>

000097e0 <memmove>:
    97e0:	2005883a 	mov	r2,r4
    97e4:	29000a2e 	bgeu	r5,r4,9810 <memmove+0x30>
    97e8:	2989883a 	add	r4,r5,r6
    97ec:	1100082e 	bgeu	r2,r4,9810 <memmove+0x30>
    97f0:	1187883a 	add	r3,r2,r6
    97f4:	30003e26 	beq	r6,zero,98f0 <memmove+0x110>
    97f8:	217fffc3 	ldbu	r5,-1(r4)
    97fc:	18ffffc4 	addi	r3,r3,-1
    9800:	213fffc4 	addi	r4,r4,-1
    9804:	19400005 	stb	r5,0(r3)
    9808:	10fffb1e 	bne	r2,r3,97f8 <memmove+0x18>
    980c:	f800283a 	ret
    9810:	30c00430 	cmpltui	r3,r6,16
    9814:	18000b26 	beq	r3,zero,9844 <memmove+0x64>
    9818:	1007883a 	mov	r3,r2
    981c:	31ffffc4 	addi	r7,r6,-1
    9820:	30003726 	beq	r6,zero,9900 <memmove+0x120>
    9824:	39c00044 	addi	r7,r7,1
    9828:	29cf883a 	add	r7,r5,r7
    982c:	29800003 	ldbu	r6,0(r5)
    9830:	29400044 	addi	r5,r5,1
    9834:	18c00044 	addi	r3,r3,1
    9838:	19bfffc5 	stb	r6,-1(r3)
    983c:	29fffb1e 	bne	r5,r7,982c <memmove+0x4c>
    9840:	f800283a 	ret
    9844:	2886b03a 	or	r3,r5,r2
    9848:	18c000cc 	andi	r3,r3,3
    984c:	1800291e 	bne	r3,zero,98f4 <memmove+0x114>
    9850:	327ffc04 	addi	r9,r6,-16
    9854:	4812d13a 	srli	r9,r9,4
    9858:	280f883a 	mov	r7,r5
    985c:	1007883a 	mov	r3,r2
    9860:	4a400044 	addi	r9,r9,1
    9864:	4812913a 	slli	r9,r9,4
    9868:	1251883a 	add	r8,r2,r9
    986c:	39000017 	ldw	r4,0(r7)
    9870:	39c00404 	addi	r7,r7,16
    9874:	18c00404 	addi	r3,r3,16
    9878:	193ffc15 	stw	r4,-16(r3)
    987c:	393ffd17 	ldw	r4,-12(r7)
    9880:	193ffd15 	stw	r4,-12(r3)
    9884:	393ffe17 	ldw	r4,-8(r7)
    9888:	193ffe15 	stw	r4,-8(r3)
    988c:	393fff17 	ldw	r4,-4(r7)
    9890:	193fff15 	stw	r4,-4(r3)
    9894:	40fff51e 	bne	r8,r3,986c <memmove+0x8c>
    9898:	3100030c 	andi	r4,r6,12
    989c:	2a4b883a 	add	r5,r5,r9
    98a0:	320003cc 	andi	r8,r6,15
    98a4:	20001726 	beq	r4,zero,9904 <memmove+0x124>
    98a8:	2813883a 	mov	r9,r5
    98ac:	180f883a 	mov	r7,r3
    98b0:	4a800017 	ldw	r10,0(r9)
    98b4:	39c00104 	addi	r7,r7,4
    98b8:	41c9c83a 	sub	r4,r8,r7
    98bc:	1909883a 	add	r4,r3,r4
    98c0:	21000128 	cmpgeui	r4,r4,4
    98c4:	3abfff15 	stw	r10,-4(r7)
    98c8:	4a400104 	addi	r9,r9,4
    98cc:	203ff81e 	bne	r4,zero,98b0 <memmove+0xd0>
    98d0:	413fff04 	addi	r4,r8,-4
    98d4:	2008d0ba 	srli	r4,r4,2
    98d8:	318000cc 	andi	r6,r6,3
    98dc:	21000044 	addi	r4,r4,1
    98e0:	200890ba 	slli	r4,r4,2
    98e4:	1907883a 	add	r3,r3,r4
    98e8:	290b883a 	add	r5,r5,r4
    98ec:	003fcb06 	br	981c <memmove+0x3c>
    98f0:	f800283a 	ret
    98f4:	31ffffc4 	addi	r7,r6,-1
    98f8:	1007883a 	mov	r3,r2
    98fc:	003fc906 	br	9824 <memmove+0x44>
    9900:	f800283a 	ret
    9904:	400d883a 	mov	r6,r8
    9908:	003fc406 	br	981c <memmove+0x3c>

0000990c <memset>:
    990c:	20c000cc 	andi	r3,r4,3
    9910:	2005883a 	mov	r2,r4
    9914:	18003626 	beq	r3,zero,99f0 <memset+0xe4>
    9918:	31ffffc4 	addi	r7,r6,-1
    991c:	30003326 	beq	r6,zero,99ec <memset+0xe0>
    9920:	2811883a 	mov	r8,r5
    9924:	2007883a 	mov	r3,r4
    9928:	00000306 	br	9938 <memset+0x2c>
    992c:	39ffffc4 	addi	r7,r7,-1
    9930:	39bfffe0 	cmpeqi	r6,r7,-1
    9934:	30002d1e 	bne	r6,zero,99ec <memset+0xe0>
    9938:	18c00044 	addi	r3,r3,1
    993c:	198000cc 	andi	r6,r3,3
    9940:	1a3fffc5 	stb	r8,-1(r3)
    9944:	303ff91e 	bne	r6,zero,992c <memset+0x20>
    9948:	39000130 	cmpltui	r4,r7,4
    994c:	2000221e 	bne	r4,zero,99d8 <memset+0xcc>
    9950:	29003fcc 	andi	r4,r5,255
    9954:	200c923a 	slli	r6,r4,8
    9958:	3a000430 	cmpltui	r8,r7,16
    995c:	3108b03a 	or	r4,r6,r4
    9960:	200c943a 	slli	r6,r4,16
    9964:	310cb03a 	or	r6,r6,r4
    9968:	40000e1e 	bne	r8,zero,99a4 <memset+0x98>
    996c:	393ffc04 	addi	r4,r7,-16
    9970:	2008d13a 	srli	r4,r4,4
    9974:	21000044 	addi	r4,r4,1
    9978:	2008913a 	slli	r4,r4,4
    997c:	1909883a 	add	r4,r3,r4
    9980:	19800015 	stw	r6,0(r3)
    9984:	19800115 	stw	r6,4(r3)
    9988:	19800215 	stw	r6,8(r3)
    998c:	19800315 	stw	r6,12(r3)
    9990:	18c00404 	addi	r3,r3,16
    9994:	20fffa1e 	bne	r4,r3,9980 <memset+0x74>
    9998:	3900030c 	andi	r4,r7,12
    999c:	39c003cc 	andi	r7,r7,15
    99a0:	20000d26 	beq	r4,zero,99d8 <memset+0xcc>
    99a4:	1811883a 	mov	r8,r3
    99a8:	42000104 	addi	r8,r8,4
    99ac:	3a09c83a 	sub	r4,r7,r8
    99b0:	1909883a 	add	r4,r3,r4
    99b4:	21000128 	cmpgeui	r4,r4,4
    99b8:	41bfff15 	stw	r6,-4(r8)
    99bc:	203ffa1e 	bne	r4,zero,99a8 <memset+0x9c>
    99c0:	393fff04 	addi	r4,r7,-4
    99c4:	2008d0ba 	srli	r4,r4,2
    99c8:	39c000cc 	andi	r7,r7,3
    99cc:	21000044 	addi	r4,r4,1
    99d0:	200890ba 	slli	r4,r4,2
    99d4:	1907883a 	add	r3,r3,r4
    99d8:	38000426 	beq	r7,zero,99ec <memset+0xe0>
    99dc:	19cf883a 	add	r7,r3,r7
    99e0:	18c00044 	addi	r3,r3,1
    99e4:	197fffc5 	stb	r5,-1(r3)
    99e8:	38fffd1e 	bne	r7,r3,99e0 <memset+0xd4>
    99ec:	f800283a 	ret
    99f0:	2007883a 	mov	r3,r4
    99f4:	300f883a 	mov	r7,r6
    99f8:	003fd306 	br	9948 <memset+0x3c>

000099fc <_realloc_r>:
    99fc:	defff504 	addi	sp,sp,-44
    9a00:	dc800315 	stw	r18,12(sp)
    9a04:	dfc00a15 	stw	ra,40(sp)
    9a08:	df000915 	stw	fp,36(sp)
    9a0c:	ddc00815 	stw	r23,32(sp)
    9a10:	dd800715 	stw	r22,28(sp)
    9a14:	dd400615 	stw	r21,24(sp)
    9a18:	dd000515 	stw	r20,20(sp)
    9a1c:	dcc00415 	stw	r19,16(sp)
    9a20:	dc400215 	stw	r17,8(sp)
    9a24:	dc000115 	stw	r16,4(sp)
    9a28:	3025883a 	mov	r18,r6
    9a2c:	28008b26 	beq	r5,zero,9c5c <_realloc_r+0x260>
    9a30:	2821883a 	mov	r16,r5
    9a34:	2027883a 	mov	r19,r4
    9a38:	944002c4 	addi	r17,r18,11
    9a3c:	000b3e40 	call	b3e4 <__malloc_lock>
    9a40:	888005f0 	cmpltui	r2,r17,23
    9a44:	1000521e 	bne	r2,zero,9b90 <_realloc_r+0x194>
    9a48:	017ffe04 	movi	r5,-8
    9a4c:	8962703a 	and	r17,r17,r5
    9a50:	8807883a 	mov	r3,r17
    9a54:	88005116 	blt	r17,zero,9b9c <_realloc_r+0x1a0>
    9a58:	8c805036 	bltu	r17,r18,9b9c <_realloc_r+0x1a0>
    9a5c:	80bfff17 	ldw	r2,-4(r16)
    9a60:	017fff04 	movi	r5,-4
    9a64:	857ffe04 	addi	r21,r16,-8
    9a68:	1168703a 	and	r20,r2,r5
    9a6c:	ad2d883a 	add	r22,r21,r20
    9a70:	a0c0390e 	bge	r20,r3,9b58 <_realloc_r+0x15c>
    9a74:	07000074 	movhi	fp,1
    9a78:	e732df04 	addi	fp,fp,-13444
    9a7c:	e2000217 	ldw	r8,8(fp)
    9a80:	b1000117 	ldw	r4,4(r22)
    9a84:	45808e26 	beq	r8,r22,9cc0 <_realloc_r+0x2c4>
    9a88:	01bfff84 	movi	r6,-2
    9a8c:	218c703a 	and	r6,r4,r6
    9a90:	b18d883a 	add	r6,r22,r6
    9a94:	31800117 	ldw	r6,4(r6)
    9a98:	3180004c 	andi	r6,r6,1
    9a9c:	30004f1e 	bne	r6,zero,9bdc <_realloc_r+0x1e0>
    9aa0:	2148703a 	and	r4,r4,r5
    9aa4:	a10b883a 	add	r5,r20,r4
    9aa8:	28c0bf0e 	bge	r5,r3,9da8 <_realloc_r+0x3ac>
    9aac:	1080004c 	andi	r2,r2,1
    9ab0:	10004c1e 	bne	r2,zero,9be4 <_realloc_r+0x1e8>
    9ab4:	81fffe17 	ldw	r7,-8(r16)
    9ab8:	00bfff04 	movi	r2,-4
    9abc:	a9cfc83a 	sub	r7,r21,r7
    9ac0:	39400117 	ldw	r5,4(r7)
    9ac4:	288a703a 	and	r5,r5,r2
    9ac8:	b0000426 	beq	r22,zero,9adc <_realloc_r+0xe0>
    9acc:	a16f883a 	add	r23,r20,r5
    9ad0:	b92f883a 	add	r23,r23,r4
    9ad4:	4580bf26 	beq	r8,r22,9dd4 <_realloc_r+0x3d8>
    9ad8:	b8c0930e 	bge	r23,r3,9d28 <_realloc_r+0x32c>
    9adc:	38004126 	beq	r7,zero,9be4 <_realloc_r+0x1e8>
    9ae0:	a16f883a 	add	r23,r20,r5
    9ae4:	b8c03f16 	blt	r23,r3,9be4 <_realloc_r+0x1e8>
    9ae8:	38800317 	ldw	r2,12(r7)
    9aec:	38c00217 	ldw	r3,8(r7)
    9af0:	a1bfff04 	addi	r6,r20,-4
    9af4:	31400968 	cmpgeui	r5,r6,37
    9af8:	18800315 	stw	r2,12(r3)
    9afc:	10c00215 	stw	r3,8(r2)
    9b00:	39000204 	addi	r4,r7,8
    9b04:	3ded883a 	add	r22,r7,r23
    9b08:	2800941e 	bne	r5,zero,9d5c <_realloc_r+0x360>
    9b0c:	30800530 	cmpltui	r2,r6,20
    9b10:	80c00017 	ldw	r3,0(r16)
    9b14:	1000df1e 	bne	r2,zero,9e94 <_realloc_r+0x498>
    9b18:	38c00215 	stw	r3,8(r7)
    9b1c:	80c00117 	ldw	r3,4(r16)
    9b20:	30800728 	cmpgeui	r2,r6,28
    9b24:	38c00315 	stw	r3,12(r7)
    9b28:	1000dc1e 	bne	r2,zero,9e9c <_realloc_r+0x4a0>
    9b2c:	80c00217 	ldw	r3,8(r16)
    9b30:	38800404 	addi	r2,r7,16
    9b34:	84000204 	addi	r16,r16,8
    9b38:	10c00015 	stw	r3,0(r2)
    9b3c:	80c00117 	ldw	r3,4(r16)
    9b40:	b829883a 	mov	r20,r23
    9b44:	382b883a 	mov	r21,r7
    9b48:	10c00115 	stw	r3,4(r2)
    9b4c:	80c00217 	ldw	r3,8(r16)
    9b50:	2021883a 	mov	r16,r4
    9b54:	10c00215 	stw	r3,8(r2)
    9b58:	a9800117 	ldw	r6,4(r21)
    9b5c:	a445c83a 	sub	r2,r20,r17
    9b60:	10c00430 	cmpltui	r3,r2,16
    9b64:	3180004c 	andi	r6,r6,1
    9b68:	18004926 	beq	r3,zero,9c90 <_realloc_r+0x294>
    9b6c:	a18cb03a 	or	r6,r20,r6
    9b70:	a9800115 	stw	r6,4(r21)
    9b74:	b0800117 	ldw	r2,4(r22)
    9b78:	10800054 	ori	r2,r2,1
    9b7c:	b0800115 	stw	r2,4(r22)
    9b80:	9809883a 	mov	r4,r19
    9b84:	000b4080 	call	b408 <__malloc_unlock>
    9b88:	8025883a 	mov	r18,r16
    9b8c:	00000606 	br	9ba8 <_realloc_r+0x1ac>
    9b90:	04400404 	movi	r17,16
    9b94:	00c00404 	movi	r3,16
    9b98:	8cbfb02e 	bgeu	r17,r18,9a5c <_realloc_r+0x60>
    9b9c:	00800304 	movi	r2,12
    9ba0:	98800015 	stw	r2,0(r19)
    9ba4:	0025883a 	mov	r18,zero
    9ba8:	9005883a 	mov	r2,r18
    9bac:	dfc00a17 	ldw	ra,40(sp)
    9bb0:	df000917 	ldw	fp,36(sp)
    9bb4:	ddc00817 	ldw	r23,32(sp)
    9bb8:	dd800717 	ldw	r22,28(sp)
    9bbc:	dd400617 	ldw	r21,24(sp)
    9bc0:	dd000517 	ldw	r20,20(sp)
    9bc4:	dcc00417 	ldw	r19,16(sp)
    9bc8:	dc800317 	ldw	r18,12(sp)
    9bcc:	dc400217 	ldw	r17,8(sp)
    9bd0:	dc000117 	ldw	r16,4(sp)
    9bd4:	dec00b04 	addi	sp,sp,44
    9bd8:	f800283a 	ret
    9bdc:	1080004c 	andi	r2,r2,1
    9be0:	10006c26 	beq	r2,zero,9d94 <_realloc_r+0x398>
    9be4:	900b883a 	mov	r5,r18
    9be8:	9809883a 	mov	r4,r19
    9bec:	0008e2c0 	call	8e2c <_malloc_r>
    9bf0:	1025883a 	mov	r18,r2
    9bf4:	10001626 	beq	r2,zero,9c50 <_realloc_r+0x254>
    9bf8:	80bfff17 	ldw	r2,-4(r16)
    9bfc:	013fff84 	movi	r4,-2
    9c00:	90fffe04 	addi	r3,r18,-8
    9c04:	1104703a 	and	r2,r2,r4
    9c08:	a885883a 	add	r2,r21,r2
    9c0c:	10c05b26 	beq	r2,r3,9d7c <_realloc_r+0x380>
    9c10:	a1bfff04 	addi	r6,r20,-4
    9c14:	30800968 	cmpgeui	r2,r6,37
    9c18:	10006a1e 	bne	r2,zero,9dc4 <_realloc_r+0x3c8>
    9c1c:	30800530 	cmpltui	r2,r6,20
    9c20:	81000017 	ldw	r4,0(r16)
    9c24:	10003726 	beq	r2,zero,9d04 <_realloc_r+0x308>
    9c28:	9005883a 	mov	r2,r18
    9c2c:	8007883a 	mov	r3,r16
    9c30:	11000015 	stw	r4,0(r2)
    9c34:	19000117 	ldw	r4,4(r3)
    9c38:	11000115 	stw	r4,4(r2)
    9c3c:	18c00217 	ldw	r3,8(r3)
    9c40:	10c00215 	stw	r3,8(r2)
    9c44:	800b883a 	mov	r5,r16
    9c48:	9809883a 	mov	r4,r19
    9c4c:	000a7e40 	call	a7e4 <_free_r>
    9c50:	9809883a 	mov	r4,r19
    9c54:	000b4080 	call	b408 <__malloc_unlock>
    9c58:	003fd306 	br	9ba8 <_realloc_r+0x1ac>
    9c5c:	300b883a 	mov	r5,r6
    9c60:	dfc00a17 	ldw	ra,40(sp)
    9c64:	df000917 	ldw	fp,36(sp)
    9c68:	ddc00817 	ldw	r23,32(sp)
    9c6c:	dd800717 	ldw	r22,28(sp)
    9c70:	dd400617 	ldw	r21,24(sp)
    9c74:	dd000517 	ldw	r20,20(sp)
    9c78:	dcc00417 	ldw	r19,16(sp)
    9c7c:	dc800317 	ldw	r18,12(sp)
    9c80:	dc400217 	ldw	r17,8(sp)
    9c84:	dc000117 	ldw	r16,4(sp)
    9c88:	dec00b04 	addi	sp,sp,44
    9c8c:	0008e2c1 	jmpi	8e2c <_malloc_r>
    9c90:	344cb03a 	or	r6,r6,r17
    9c94:	a9800115 	stw	r6,4(r21)
    9c98:	ac4b883a 	add	r5,r21,r17
    9c9c:	10800054 	ori	r2,r2,1
    9ca0:	28800115 	stw	r2,4(r5)
    9ca4:	b0800117 	ldw	r2,4(r22)
    9ca8:	29400204 	addi	r5,r5,8
    9cac:	9809883a 	mov	r4,r19
    9cb0:	10800054 	ori	r2,r2,1
    9cb4:	b0800115 	stw	r2,4(r22)
    9cb8:	000a7e40 	call	a7e4 <_free_r>
    9cbc:	003fb006 	br	9b80 <_realloc_r+0x184>
    9cc0:	2148703a 	and	r4,r4,r5
    9cc4:	a10b883a 	add	r5,r20,r4
    9cc8:	89800404 	addi	r6,r17,16
    9ccc:	29bf7716 	blt	r5,r6,9aac <_realloc_r+0xb0>
    9cd0:	ac6b883a 	add	r21,r21,r17
    9cd4:	2c45c83a 	sub	r2,r5,r17
    9cd8:	e5400215 	stw	r21,8(fp)
    9cdc:	10800054 	ori	r2,r2,1
    9ce0:	a8800115 	stw	r2,4(r21)
    9ce4:	80bfff17 	ldw	r2,-4(r16)
    9ce8:	9809883a 	mov	r4,r19
    9cec:	8025883a 	mov	r18,r16
    9cf0:	1080004c 	andi	r2,r2,1
    9cf4:	1462b03a 	or	r17,r2,r17
    9cf8:	847fff15 	stw	r17,-4(r16)
    9cfc:	000b4080 	call	b408 <__malloc_unlock>
    9d00:	003fa906 	br	9ba8 <_realloc_r+0x1ac>
    9d04:	91000015 	stw	r4,0(r18)
    9d08:	80c00117 	ldw	r3,4(r16)
    9d0c:	30800728 	cmpgeui	r2,r6,28
    9d10:	90c00115 	stw	r3,4(r18)
    9d14:	1000551e 	bne	r2,zero,9e6c <_realloc_r+0x470>
    9d18:	81000217 	ldw	r4,8(r16)
    9d1c:	80c00204 	addi	r3,r16,8
    9d20:	90800204 	addi	r2,r18,8
    9d24:	003fc206 	br	9c30 <_realloc_r+0x234>
    9d28:	b0800317 	ldw	r2,12(r22)
    9d2c:	b0c00217 	ldw	r3,8(r22)
    9d30:	a1bfff04 	addi	r6,r20,-4
    9d34:	31400968 	cmpgeui	r5,r6,37
    9d38:	18800315 	stw	r2,12(r3)
    9d3c:	10c00215 	stw	r3,8(r2)
    9d40:	38c00217 	ldw	r3,8(r7)
    9d44:	38800317 	ldw	r2,12(r7)
    9d48:	39000204 	addi	r4,r7,8
    9d4c:	3ded883a 	add	r22,r7,r23
    9d50:	18800315 	stw	r2,12(r3)
    9d54:	10c00215 	stw	r3,8(r2)
    9d58:	283f6c26 	beq	r5,zero,9b0c <_realloc_r+0x110>
    9d5c:	800b883a 	mov	r5,r16
    9d60:	d9c00015 	stw	r7,0(sp)
    9d64:	00097e00 	call	97e0 <memmove>
    9d68:	d9c00017 	ldw	r7,0(sp)
    9d6c:	1021883a 	mov	r16,r2
    9d70:	b829883a 	mov	r20,r23
    9d74:	382b883a 	mov	r21,r7
    9d78:	003f7706 	br	9b58 <_realloc_r+0x15c>
    9d7c:	90bfff17 	ldw	r2,-4(r18)
    9d80:	00ffff04 	movi	r3,-4
    9d84:	10c4703a 	and	r2,r2,r3
    9d88:	a0a9883a 	add	r20,r20,r2
    9d8c:	ad2d883a 	add	r22,r21,r20
    9d90:	003f7106 	br	9b58 <_realloc_r+0x15c>
    9d94:	81fffe17 	ldw	r7,-8(r16)
    9d98:	a9cfc83a 	sub	r7,r21,r7
    9d9c:	39000117 	ldw	r4,4(r7)
    9da0:	214a703a 	and	r5,r4,r5
    9da4:	003f4d06 	br	9adc <_realloc_r+0xe0>
    9da8:	b0800317 	ldw	r2,12(r22)
    9dac:	b0c00217 	ldw	r3,8(r22)
    9db0:	2829883a 	mov	r20,r5
    9db4:	a96d883a 	add	r22,r21,r5
    9db8:	18800315 	stw	r2,12(r3)
    9dbc:	10c00215 	stw	r3,8(r2)
    9dc0:	003f6506 	br	9b58 <_realloc_r+0x15c>
    9dc4:	800b883a 	mov	r5,r16
    9dc8:	9009883a 	mov	r4,r18
    9dcc:	00097e00 	call	97e0 <memmove>
    9dd0:	003f9c06 	br	9c44 <_realloc_r+0x248>
    9dd4:	88800404 	addi	r2,r17,16
    9dd8:	b8bf4016 	blt	r23,r2,9adc <_realloc_r+0xe0>
    9ddc:	38800317 	ldw	r2,12(r7)
    9de0:	38c00217 	ldw	r3,8(r7)
    9de4:	a1bfff04 	addi	r6,r20,-4
    9de8:	31000968 	cmpgeui	r4,r6,37
    9dec:	18800315 	stw	r2,12(r3)
    9df0:	10c00215 	stw	r3,8(r2)
    9df4:	3c800204 	addi	r18,r7,8
    9df8:	20003b1e 	bne	r4,zero,9ee8 <_realloc_r+0x4ec>
    9dfc:	30800530 	cmpltui	r2,r6,20
    9e00:	80c00017 	ldw	r3,0(r16)
    9e04:	1000361e 	bne	r2,zero,9ee0 <_realloc_r+0x4e4>
    9e08:	38c00215 	stw	r3,8(r7)
    9e0c:	80c00117 	ldw	r3,4(r16)
    9e10:	30800728 	cmpgeui	r2,r6,28
    9e14:	38c00315 	stw	r3,12(r7)
    9e18:	1000401e 	bne	r2,zero,9f1c <_realloc_r+0x520>
    9e1c:	80c00217 	ldw	r3,8(r16)
    9e20:	38800404 	addi	r2,r7,16
    9e24:	84000204 	addi	r16,r16,8
    9e28:	10c00015 	stw	r3,0(r2)
    9e2c:	80c00117 	ldw	r3,4(r16)
    9e30:	10c00115 	stw	r3,4(r2)
    9e34:	80c00217 	ldw	r3,8(r16)
    9e38:	10c00215 	stw	r3,8(r2)
    9e3c:	3c47883a 	add	r3,r7,r17
    9e40:	bc45c83a 	sub	r2,r23,r17
    9e44:	e0c00215 	stw	r3,8(fp)
    9e48:	10800054 	ori	r2,r2,1
    9e4c:	18800115 	stw	r2,4(r3)
    9e50:	38800117 	ldw	r2,4(r7)
    9e54:	9809883a 	mov	r4,r19
    9e58:	1080004c 	andi	r2,r2,1
    9e5c:	1462b03a 	or	r17,r2,r17
    9e60:	3c400115 	stw	r17,4(r7)
    9e64:	000b4080 	call	b408 <__malloc_unlock>
    9e68:	003f4f06 	br	9ba8 <_realloc_r+0x1ac>
    9e6c:	80800217 	ldw	r2,8(r16)
    9e70:	31800920 	cmpeqi	r6,r6,36
    9e74:	90800215 	stw	r2,8(r18)
    9e78:	80800317 	ldw	r2,12(r16)
    9e7c:	90800315 	stw	r2,12(r18)
    9e80:	81000417 	ldw	r4,16(r16)
    9e84:	30000f1e 	bne	r6,zero,9ec4 <_realloc_r+0x4c8>
    9e88:	80c00404 	addi	r3,r16,16
    9e8c:	90800404 	addi	r2,r18,16
    9e90:	003f6706 	br	9c30 <_realloc_r+0x234>
    9e94:	2005883a 	mov	r2,r4
    9e98:	003f2706 	br	9b38 <_realloc_r+0x13c>
    9e9c:	80800217 	ldw	r2,8(r16)
    9ea0:	31800920 	cmpeqi	r6,r6,36
    9ea4:	38800415 	stw	r2,16(r7)
    9ea8:	80800317 	ldw	r2,12(r16)
    9eac:	38800515 	stw	r2,20(r7)
    9eb0:	80c00417 	ldw	r3,16(r16)
    9eb4:	3000121e 	bne	r6,zero,9f00 <_realloc_r+0x504>
    9eb8:	38800604 	addi	r2,r7,24
    9ebc:	84000404 	addi	r16,r16,16
    9ec0:	003f1d06 	br	9b38 <_realloc_r+0x13c>
    9ec4:	91000415 	stw	r4,16(r18)
    9ec8:	81000517 	ldw	r4,20(r16)
    9ecc:	80c00604 	addi	r3,r16,24
    9ed0:	90800604 	addi	r2,r18,24
    9ed4:	91000515 	stw	r4,20(r18)
    9ed8:	81000617 	ldw	r4,24(r16)
    9edc:	003f5406 	br	9c30 <_realloc_r+0x234>
    9ee0:	9005883a 	mov	r2,r18
    9ee4:	003fd006 	br	9e28 <_realloc_r+0x42c>
    9ee8:	800b883a 	mov	r5,r16
    9eec:	9009883a 	mov	r4,r18
    9ef0:	d9c00015 	stw	r7,0(sp)
    9ef4:	00097e00 	call	97e0 <memmove>
    9ef8:	d9c00017 	ldw	r7,0(sp)
    9efc:	003fcf06 	br	9e3c <_realloc_r+0x440>
    9f00:	84000604 	addi	r16,r16,24
    9f04:	38c00615 	stw	r3,24(r7)
    9f08:	80ffff17 	ldw	r3,-4(r16)
    9f0c:	38800804 	addi	r2,r7,32
    9f10:	38c00715 	stw	r3,28(r7)
    9f14:	80c00017 	ldw	r3,0(r16)
    9f18:	003f0706 	br	9b38 <_realloc_r+0x13c>
    9f1c:	80800217 	ldw	r2,8(r16)
    9f20:	31800920 	cmpeqi	r6,r6,36
    9f24:	38800415 	stw	r2,16(r7)
    9f28:	80800317 	ldw	r2,12(r16)
    9f2c:	38800515 	stw	r2,20(r7)
    9f30:	80c00417 	ldw	r3,16(r16)
    9f34:	3000031e 	bne	r6,zero,9f44 <_realloc_r+0x548>
    9f38:	38800604 	addi	r2,r7,24
    9f3c:	84000404 	addi	r16,r16,16
    9f40:	003fb906 	br	9e28 <_realloc_r+0x42c>
    9f44:	84000604 	addi	r16,r16,24
    9f48:	38c00615 	stw	r3,24(r7)
    9f4c:	80ffff17 	ldw	r3,-4(r16)
    9f50:	38800804 	addi	r2,r7,32
    9f54:	38c00715 	stw	r3,28(r7)
    9f58:	80c00017 	ldw	r3,0(r16)
    9f5c:	003fb206 	br	9e28 <_realloc_r+0x42c>

00009f60 <_sbrk_r>:
    9f60:	defffe04 	addi	sp,sp,-8
    9f64:	dc000015 	stw	r16,0(sp)
    9f68:	00800074 	movhi	r2,1
    9f6c:	2021883a 	mov	r16,r4
    9f70:	2809883a 	mov	r4,r5
    9f74:	dfc00115 	stw	ra,4(sp)
    9f78:	1036ef15 	stw	zero,-9284(r2)
    9f7c:	000b5e00 	call	b5e0 <sbrk>
    9f80:	10ffffd8 	cmpnei	r3,r2,-1
    9f84:	18000426 	beq	r3,zero,9f98 <_sbrk_r+0x38>
    9f88:	dfc00117 	ldw	ra,4(sp)
    9f8c:	dc000017 	ldw	r16,0(sp)
    9f90:	dec00204 	addi	sp,sp,8
    9f94:	f800283a 	ret
    9f98:	00c00074 	movhi	r3,1
    9f9c:	18f6ef17 	ldw	r3,-9284(r3)
    9fa0:	183ff926 	beq	r3,zero,9f88 <_sbrk_r+0x28>
    9fa4:	80c00015 	stw	r3,0(r16)
    9fa8:	dfc00117 	ldw	ra,4(sp)
    9fac:	dc000017 	ldw	r16,0(sp)
    9fb0:	dec00204 	addi	sp,sp,8
    9fb4:	f800283a 	ret

00009fb8 <__sread>:
    9fb8:	defffe04 	addi	sp,sp,-8
    9fbc:	dc000015 	stw	r16,0(sp)
    9fc0:	2821883a 	mov	r16,r5
    9fc4:	2940038f 	ldh	r5,14(r5)
    9fc8:	dfc00115 	stw	ra,4(sp)
    9fcc:	000ad1c0 	call	ad1c <_read_r>
    9fd0:	10000716 	blt	r2,zero,9ff0 <__sread+0x38>
    9fd4:	80c01417 	ldw	r3,80(r16)
    9fd8:	1887883a 	add	r3,r3,r2
    9fdc:	80c01415 	stw	r3,80(r16)
    9fe0:	dfc00117 	ldw	ra,4(sp)
    9fe4:	dc000017 	ldw	r16,0(sp)
    9fe8:	dec00204 	addi	sp,sp,8
    9fec:	f800283a 	ret
    9ff0:	80c0030b 	ldhu	r3,12(r16)
    9ff4:	18fbffcc 	andi	r3,r3,61439
    9ff8:	80c0030d 	sth	r3,12(r16)
    9ffc:	dfc00117 	ldw	ra,4(sp)
    a000:	dc000017 	ldw	r16,0(sp)
    a004:	dec00204 	addi	sp,sp,8
    a008:	f800283a 	ret

0000a00c <__seofread>:
    a00c:	0005883a 	mov	r2,zero
    a010:	f800283a 	ret

0000a014 <__swrite>:
    a014:	2880030b 	ldhu	r2,12(r5)
    a018:	defffb04 	addi	sp,sp,-20
    a01c:	dcc00315 	stw	r19,12(sp)
    a020:	dc800215 	stw	r18,8(sp)
    a024:	dc400115 	stw	r17,4(sp)
    a028:	dc000015 	stw	r16,0(sp)
    a02c:	dfc00415 	stw	ra,16(sp)
    a030:	10c0400c 	andi	r3,r2,256
    a034:	2821883a 	mov	r16,r5
    a038:	2023883a 	mov	r17,r4
    a03c:	2940038f 	ldh	r5,14(r5)
    a040:	3025883a 	mov	r18,r6
    a044:	3827883a 	mov	r19,r7
    a048:	18000c1e 	bne	r3,zero,a07c <__swrite+0x68>
    a04c:	10bbffcc 	andi	r2,r2,61439
    a050:	980f883a 	mov	r7,r19
    a054:	900d883a 	mov	r6,r18
    a058:	8809883a 	mov	r4,r17
    a05c:	8080030d 	sth	r2,12(r16)
    a060:	dfc00417 	ldw	ra,16(sp)
    a064:	dcc00317 	ldw	r19,12(sp)
    a068:	dc800217 	ldw	r18,8(sp)
    a06c:	dc400117 	ldw	r17,4(sp)
    a070:	dc000017 	ldw	r16,0(sp)
    a074:	dec00504 	addi	sp,sp,20
    a078:	000a0f81 	jmpi	a0f8 <_write_r>
    a07c:	01c00084 	movi	r7,2
    a080:	000d883a 	mov	r6,zero
    a084:	000aae00 	call	aae0 <_lseek_r>
    a088:	8080030b 	ldhu	r2,12(r16)
    a08c:	8140038f 	ldh	r5,14(r16)
    a090:	003fee06 	br	a04c <__swrite+0x38>

0000a094 <__sseek>:
    a094:	defffe04 	addi	sp,sp,-8
    a098:	dc000015 	stw	r16,0(sp)
    a09c:	2821883a 	mov	r16,r5
    a0a0:	2940038f 	ldh	r5,14(r5)
    a0a4:	dfc00115 	stw	ra,4(sp)
    a0a8:	000aae00 	call	aae0 <_lseek_r>
    a0ac:	10ffffd8 	cmpnei	r3,r2,-1
    a0b0:	18000826 	beq	r3,zero,a0d4 <__sseek+0x40>
    a0b4:	80c0030b 	ldhu	r3,12(r16)
    a0b8:	80801415 	stw	r2,80(r16)
    a0bc:	18c40014 	ori	r3,r3,4096
    a0c0:	80c0030d 	sth	r3,12(r16)
    a0c4:	dfc00117 	ldw	ra,4(sp)
    a0c8:	dc000017 	ldw	r16,0(sp)
    a0cc:	dec00204 	addi	sp,sp,8
    a0d0:	f800283a 	ret
    a0d4:	80c0030b 	ldhu	r3,12(r16)
    a0d8:	18fbffcc 	andi	r3,r3,61439
    a0dc:	80c0030d 	sth	r3,12(r16)
    a0e0:	dfc00117 	ldw	ra,4(sp)
    a0e4:	dc000017 	ldw	r16,0(sp)
    a0e8:	dec00204 	addi	sp,sp,8
    a0ec:	f800283a 	ret

0000a0f0 <__sclose>:
    a0f0:	2940038f 	ldh	r5,14(r5)
    a0f4:	000a2b81 	jmpi	a2b8 <_close_r>

0000a0f8 <_write_r>:
    a0f8:	2807883a 	mov	r3,r5
    a0fc:	defffe04 	addi	sp,sp,-8
    a100:	dc000015 	stw	r16,0(sp)
    a104:	300b883a 	mov	r5,r6
    a108:	00800074 	movhi	r2,1
    a10c:	380d883a 	mov	r6,r7
    a110:	2021883a 	mov	r16,r4
    a114:	1809883a 	mov	r4,r3
    a118:	dfc00115 	stw	ra,4(sp)
    a11c:	1036ef15 	stw	zero,-9284(r2)
    a120:	000b7040 	call	b704 <write>
    a124:	10ffffd8 	cmpnei	r3,r2,-1
    a128:	18000426 	beq	r3,zero,a13c <_write_r+0x44>
    a12c:	dfc00117 	ldw	ra,4(sp)
    a130:	dc000017 	ldw	r16,0(sp)
    a134:	dec00204 	addi	sp,sp,8
    a138:	f800283a 	ret
    a13c:	00c00074 	movhi	r3,1
    a140:	18f6ef17 	ldw	r3,-9284(r3)
    a144:	183ff926 	beq	r3,zero,a12c <_write_r+0x34>
    a148:	80c00015 	stw	r3,0(r16)
    a14c:	dfc00117 	ldw	ra,4(sp)
    a150:	dc000017 	ldw	r16,0(sp)
    a154:	dec00204 	addi	sp,sp,8
    a158:	f800283a 	ret

0000a15c <__swsetup_r>:
    a15c:	00800074 	movhi	r2,1
    a160:	10b45717 	ldw	r2,-11940(r2)
    a164:	defffd04 	addi	sp,sp,-12
    a168:	dc400115 	stw	r17,4(sp)
    a16c:	dc000015 	stw	r16,0(sp)
    a170:	dfc00215 	stw	ra,8(sp)
    a174:	2023883a 	mov	r17,r4
    a178:	2821883a 	mov	r16,r5
    a17c:	10000226 	beq	r2,zero,a188 <__swsetup_r+0x2c>
    a180:	10c00e17 	ldw	r3,56(r2)
    a184:	18003326 	beq	r3,zero,a254 <__swsetup_r+0xf8>
    a188:	8180030b 	ldhu	r6,12(r16)
    a18c:	30c0020c 	andi	r3,r6,8
    a190:	3005883a 	mov	r2,r6
    a194:	18000f26 	beq	r3,zero,a1d4 <__swsetup_r+0x78>
    a198:	80c00417 	ldw	r3,16(r16)
    a19c:	18001626 	beq	r3,zero,a1f8 <__swsetup_r+0x9c>
    a1a0:	1100004c 	andi	r4,r2,1
    a1a4:	20001f1e 	bne	r4,zero,a224 <__swsetup_r+0xc8>
    a1a8:	1100008c 	andi	r4,r2,2
    a1ac:	20002c1e 	bne	r4,zero,a260 <__swsetup_r+0x104>
    a1b0:	81000517 	ldw	r4,20(r16)
    a1b4:	81000215 	stw	r4,8(r16)
    a1b8:	18001f26 	beq	r3,zero,a238 <__swsetup_r+0xdc>
    a1bc:	0005883a 	mov	r2,zero
    a1c0:	dfc00217 	ldw	ra,8(sp)
    a1c4:	dc400117 	ldw	r17,4(sp)
    a1c8:	dc000017 	ldw	r16,0(sp)
    a1cc:	dec00304 	addi	sp,sp,12
    a1d0:	f800283a 	ret
    a1d4:	3080040c 	andi	r2,r6,16
    a1d8:	10003126 	beq	r2,zero,a2a0 <__swsetup_r+0x144>
    a1dc:	3080010c 	andi	r2,r6,4
    a1e0:	1000211e 	bne	r2,zero,a268 <__swsetup_r+0x10c>
    a1e4:	80c00417 	ldw	r3,16(r16)
    a1e8:	30800214 	ori	r2,r6,8
    a1ec:	8080030d 	sth	r2,12(r16)
    a1f0:	100d883a 	mov	r6,r2
    a1f4:	183fea1e 	bne	r3,zero,a1a0 <__swsetup_r+0x44>
    a1f8:	1100a00c 	andi	r4,r2,640
    a1fc:	21008020 	cmpeqi	r4,r4,512
    a200:	203fe71e 	bne	r4,zero,a1a0 <__swsetup_r+0x44>
    a204:	8809883a 	mov	r4,r17
    a208:	800b883a 	mov	r5,r16
    a20c:	000abdc0 	call	abdc <__smakebuf_r>
    a210:	8180030b 	ldhu	r6,12(r16)
    a214:	80c00417 	ldw	r3,16(r16)
    a218:	3005883a 	mov	r2,r6
    a21c:	1100004c 	andi	r4,r2,1
    a220:	203fe126 	beq	r4,zero,a1a8 <__swsetup_r+0x4c>
    a224:	81000517 	ldw	r4,20(r16)
    a228:	80000215 	stw	zero,8(r16)
    a22c:	0109c83a 	sub	r4,zero,r4
    a230:	81000615 	stw	r4,24(r16)
    a234:	183fe11e 	bne	r3,zero,a1bc <__swsetup_r+0x60>
    a238:	10c0200c 	andi	r3,r2,128
    a23c:	0005883a 	mov	r2,zero
    a240:	183fdf26 	beq	r3,zero,a1c0 <__swsetup_r+0x64>
    a244:	31801014 	ori	r6,r6,64
    a248:	8180030d 	sth	r6,12(r16)
    a24c:	00bfffc4 	movi	r2,-1
    a250:	003fdb06 	br	a1c0 <__swsetup_r+0x64>
    a254:	1009883a 	mov	r4,r2
    a258:	00087d80 	call	87d8 <__sinit>
    a25c:	003fca06 	br	a188 <__swsetup_r+0x2c>
    a260:	0009883a 	mov	r4,zero
    a264:	003fd306 	br	a1b4 <__swsetup_r+0x58>
    a268:	81400c17 	ldw	r5,48(r16)
    a26c:	28000626 	beq	r5,zero,a288 <__swsetup_r+0x12c>
    a270:	80801004 	addi	r2,r16,64
    a274:	28800326 	beq	r5,r2,a284 <__swsetup_r+0x128>
    a278:	8809883a 	mov	r4,r17
    a27c:	000a7e40 	call	a7e4 <_free_r>
    a280:	8180030b 	ldhu	r6,12(r16)
    a284:	80000c15 	stw	zero,48(r16)
    a288:	80c00417 	ldw	r3,16(r16)
    a28c:	00bff6c4 	movi	r2,-37
    a290:	118c703a 	and	r6,r2,r6
    a294:	80000115 	stw	zero,4(r16)
    a298:	80c00015 	stw	r3,0(r16)
    a29c:	003fd206 	br	a1e8 <__swsetup_r+0x8c>
    a2a0:	00800244 	movi	r2,9
    a2a4:	88800015 	stw	r2,0(r17)
    a2a8:	31801014 	ori	r6,r6,64
    a2ac:	8180030d 	sth	r6,12(r16)
    a2b0:	00bfffc4 	movi	r2,-1
    a2b4:	003fc206 	br	a1c0 <__swsetup_r+0x64>

0000a2b8 <_close_r>:
    a2b8:	defffe04 	addi	sp,sp,-8
    a2bc:	dc000015 	stw	r16,0(sp)
    a2c0:	00800074 	movhi	r2,1
    a2c4:	2021883a 	mov	r16,r4
    a2c8:	2809883a 	mov	r4,r5
    a2cc:	dfc00115 	stw	ra,4(sp)
    a2d0:	1036ef15 	stw	zero,-9284(r2)
    a2d4:	000ae740 	call	ae74 <close>
    a2d8:	10ffffd8 	cmpnei	r3,r2,-1
    a2dc:	18000426 	beq	r3,zero,a2f0 <_close_r+0x38>
    a2e0:	dfc00117 	ldw	ra,4(sp)
    a2e4:	dc000017 	ldw	r16,0(sp)
    a2e8:	dec00204 	addi	sp,sp,8
    a2ec:	f800283a 	ret
    a2f0:	00c00074 	movhi	r3,1
    a2f4:	18f6ef17 	ldw	r3,-9284(r3)
    a2f8:	183ff926 	beq	r3,zero,a2e0 <_close_r+0x28>
    a2fc:	80c00015 	stw	r3,0(r16)
    a300:	dfc00117 	ldw	ra,4(sp)
    a304:	dc000017 	ldw	r16,0(sp)
    a308:	dec00204 	addi	sp,sp,8
    a30c:	f800283a 	ret

0000a310 <_fclose_r>:
    a310:	defffc04 	addi	sp,sp,-16
    a314:	dfc00315 	stw	ra,12(sp)
    a318:	dc800215 	stw	r18,8(sp)
    a31c:	dc400115 	stw	r17,4(sp)
    a320:	dc000015 	stw	r16,0(sp)
    a324:	28000726 	beq	r5,zero,a344 <_fclose_r+0x34>
    a328:	2821883a 	mov	r16,r5
    a32c:	2023883a 	mov	r17,r4
    a330:	20000226 	beq	r4,zero,a33c <_fclose_r+0x2c>
    a334:	20800e17 	ldw	r2,56(r4)
    a338:	10002726 	beq	r2,zero,a3d8 <_fclose_r+0xc8>
    a33c:	8080030f 	ldh	r2,12(r16)
    a340:	1000081e 	bne	r2,zero,a364 <_fclose_r+0x54>
    a344:	0025883a 	mov	r18,zero
    a348:	9005883a 	mov	r2,r18
    a34c:	dfc00317 	ldw	ra,12(sp)
    a350:	dc800217 	ldw	r18,8(sp)
    a354:	dc400117 	ldw	r17,4(sp)
    a358:	dc000017 	ldw	r16,0(sp)
    a35c:	dec00404 	addi	sp,sp,16
    a360:	f800283a 	ret
    a364:	800b883a 	mov	r5,r16
    a368:	8809883a 	mov	r4,r17
    a36c:	000a4180 	call	a418 <__sflush_r>
    a370:	80c00b17 	ldw	r3,44(r16)
    a374:	1025883a 	mov	r18,r2
    a378:	18000426 	beq	r3,zero,a38c <_fclose_r+0x7c>
    a37c:	81400717 	ldw	r5,28(r16)
    a380:	8809883a 	mov	r4,r17
    a384:	183ee83a 	callr	r3
    a388:	10001716 	blt	r2,zero,a3e8 <_fclose_r+0xd8>
    a38c:	8080030b 	ldhu	r2,12(r16)
    a390:	1080200c 	andi	r2,r2,128
    a394:	1000181e 	bne	r2,zero,a3f8 <_fclose_r+0xe8>
    a398:	81400c17 	ldw	r5,48(r16)
    a39c:	28000526 	beq	r5,zero,a3b4 <_fclose_r+0xa4>
    a3a0:	80801004 	addi	r2,r16,64
    a3a4:	28800226 	beq	r5,r2,a3b0 <_fclose_r+0xa0>
    a3a8:	8809883a 	mov	r4,r17
    a3ac:	000a7e40 	call	a7e4 <_free_r>
    a3b0:	80000c15 	stw	zero,48(r16)
    a3b4:	81401117 	ldw	r5,68(r16)
    a3b8:	28000326 	beq	r5,zero,a3c8 <_fclose_r+0xb8>
    a3bc:	8809883a 	mov	r4,r17
    a3c0:	000a7e40 	call	a7e4 <_free_r>
    a3c4:	80001115 	stw	zero,68(r16)
    a3c8:	00087e80 	call	87e8 <__sfp_lock_acquire>
    a3cc:	8000030d 	sth	zero,12(r16)
    a3d0:	00087ec0 	call	87ec <__sfp_lock_release>
    a3d4:	003fdc06 	br	a348 <_fclose_r+0x38>
    a3d8:	00087d80 	call	87d8 <__sinit>
    a3dc:	8080030f 	ldh	r2,12(r16)
    a3e0:	103fd826 	beq	r2,zero,a344 <_fclose_r+0x34>
    a3e4:	003fdf06 	br	a364 <_fclose_r+0x54>
    a3e8:	8080030b 	ldhu	r2,12(r16)
    a3ec:	04bfffc4 	movi	r18,-1
    a3f0:	1080200c 	andi	r2,r2,128
    a3f4:	103fe826 	beq	r2,zero,a398 <_fclose_r+0x88>
    a3f8:	81400417 	ldw	r5,16(r16)
    a3fc:	8809883a 	mov	r4,r17
    a400:	000a7e40 	call	a7e4 <_free_r>
    a404:	003fe406 	br	a398 <_fclose_r+0x88>

0000a408 <fclose>:
    a408:	00800074 	movhi	r2,1
    a40c:	200b883a 	mov	r5,r4
    a410:	11345717 	ldw	r4,-11940(r2)
    a414:	000a3101 	jmpi	a310 <_fclose_r>

0000a418 <__sflush_r>:
    a418:	2880030b 	ldhu	r2,12(r5)
    a41c:	defffb04 	addi	sp,sp,-20
    a420:	dcc00315 	stw	r19,12(sp)
    a424:	dc000015 	stw	r16,0(sp)
    a428:	dfc00415 	stw	ra,16(sp)
    a42c:	dc800215 	stw	r18,8(sp)
    a430:	dc400115 	stw	r17,4(sp)
    a434:	10c0020c 	andi	r3,r2,8
    a438:	2821883a 	mov	r16,r5
    a43c:	2027883a 	mov	r19,r4
    a440:	18003f1e 	bne	r3,zero,a540 <__sflush_r+0x128>
    a444:	28c00117 	ldw	r3,4(r5)
    a448:	10820014 	ori	r2,r2,2048
    a44c:	2880030d 	sth	r2,12(r5)
    a450:	00c0550e 	bge	zero,r3,a5a8 <__sflush_r+0x190>
    a454:	82000a17 	ldw	r8,40(r16)
    a458:	40003126 	beq	r8,zero,a520 <__sflush_r+0x108>
    a45c:	9c400017 	ldw	r17,0(r19)
    a460:	1104000c 	andi	r4,r2,4096
    a464:	98000015 	stw	zero,0(r19)
    a468:	81400717 	ldw	r5,28(r16)
    a46c:	1007883a 	mov	r3,r2
    a470:	2000521e 	bne	r4,zero,a5bc <__sflush_r+0x1a4>
    a474:	01c00044 	movi	r7,1
    a478:	000d883a 	mov	r6,zero
    a47c:	9809883a 	mov	r4,r19
    a480:	403ee83a 	callr	r8
    a484:	10ffffd8 	cmpnei	r3,r2,-1
    a488:	18005826 	beq	r3,zero,a5ec <__sflush_r+0x1d4>
    a48c:	80c0030b 	ldhu	r3,12(r16)
    a490:	82000a17 	ldw	r8,40(r16)
    a494:	81400717 	ldw	r5,28(r16)
    a498:	18c0010c 	andi	r3,r3,4
    a49c:	18000626 	beq	r3,zero,a4b8 <__sflush_r+0xa0>
    a4a0:	81000117 	ldw	r4,4(r16)
    a4a4:	80c00c17 	ldw	r3,48(r16)
    a4a8:	1105c83a 	sub	r2,r2,r4
    a4ac:	18000226 	beq	r3,zero,a4b8 <__sflush_r+0xa0>
    a4b0:	80c00f17 	ldw	r3,60(r16)
    a4b4:	10c5c83a 	sub	r2,r2,r3
    a4b8:	100d883a 	mov	r6,r2
    a4bc:	000f883a 	mov	r7,zero
    a4c0:	9809883a 	mov	r4,r19
    a4c4:	403ee83a 	callr	r8
    a4c8:	10ffffd8 	cmpnei	r3,r2,-1
    a4cc:	18003d1e 	bne	r3,zero,a5c4 <__sflush_r+0x1ac>
    a4d0:	99000017 	ldw	r4,0(r19)
    a4d4:	80c0030b 	ldhu	r3,12(r16)
    a4d8:	20004e26 	beq	r4,zero,a614 <__sflush_r+0x1fc>
    a4dc:	21400760 	cmpeqi	r5,r4,29
    a4e0:	2800021e 	bne	r5,zero,a4ec <__sflush_r+0xd4>
    a4e4:	210005a0 	cmpeqi	r4,r4,22
    a4e8:	20002c26 	beq	r4,zero,a59c <__sflush_r+0x184>
    a4ec:	80800417 	ldw	r2,16(r16)
    a4f0:	18fdffcc 	andi	r3,r3,63487
    a4f4:	80c0030d 	sth	r3,12(r16)
    a4f8:	80000115 	stw	zero,4(r16)
    a4fc:	80800015 	stw	r2,0(r16)
    a500:	81400c17 	ldw	r5,48(r16)
    a504:	9c400015 	stw	r17,0(r19)
    a508:	28000526 	beq	r5,zero,a520 <__sflush_r+0x108>
    a50c:	80801004 	addi	r2,r16,64
    a510:	28800226 	beq	r5,r2,a51c <__sflush_r+0x104>
    a514:	9809883a 	mov	r4,r19
    a518:	000a7e40 	call	a7e4 <_free_r>
    a51c:	80000c15 	stw	zero,48(r16)
    a520:	0005883a 	mov	r2,zero
    a524:	dfc00417 	ldw	ra,16(sp)
    a528:	dcc00317 	ldw	r19,12(sp)
    a52c:	dc800217 	ldw	r18,8(sp)
    a530:	dc400117 	ldw	r17,4(sp)
    a534:	dc000017 	ldw	r16,0(sp)
    a538:	dec00504 	addi	sp,sp,20
    a53c:	f800283a 	ret
    a540:	2c800417 	ldw	r18,16(r5)
    a544:	903ff626 	beq	r18,zero,a520 <__sflush_r+0x108>
    a548:	2c400017 	ldw	r17,0(r5)
    a54c:	108000cc 	andi	r2,r2,3
    a550:	2c800015 	stw	r18,0(r5)
    a554:	8ca3c83a 	sub	r17,r17,r18
    a558:	1000161e 	bne	r2,zero,a5b4 <__sflush_r+0x19c>
    a55c:	28800517 	ldw	r2,20(r5)
    a560:	80800215 	stw	r2,8(r16)
    a564:	04400316 	blt	zero,r17,a574 <__sflush_r+0x15c>
    a568:	003fed06 	br	a520 <__sflush_r+0x108>
    a56c:	90a5883a 	add	r18,r18,r2
    a570:	047feb0e 	bge	zero,r17,a520 <__sflush_r+0x108>
    a574:	80800917 	ldw	r2,36(r16)
    a578:	81400717 	ldw	r5,28(r16)
    a57c:	880f883a 	mov	r7,r17
    a580:	900d883a 	mov	r6,r18
    a584:	9809883a 	mov	r4,r19
    a588:	103ee83a 	callr	r2
    a58c:	88a3c83a 	sub	r17,r17,r2
    a590:	00bff616 	blt	zero,r2,a56c <__sflush_r+0x154>
    a594:	80c0030b 	ldhu	r3,12(r16)
    a598:	00bfffc4 	movi	r2,-1
    a59c:	18c01014 	ori	r3,r3,64
    a5a0:	80c0030d 	sth	r3,12(r16)
    a5a4:	003fdf06 	br	a524 <__sflush_r+0x10c>
    a5a8:	28c00f17 	ldw	r3,60(r5)
    a5ac:	00ffa916 	blt	zero,r3,a454 <__sflush_r+0x3c>
    a5b0:	003fdb06 	br	a520 <__sflush_r+0x108>
    a5b4:	0005883a 	mov	r2,zero
    a5b8:	003fe906 	br	a560 <__sflush_r+0x148>
    a5bc:	80801417 	ldw	r2,80(r16)
    a5c0:	003fb506 	br	a498 <__sflush_r+0x80>
    a5c4:	80c0030b 	ldhu	r3,12(r16)
    a5c8:	81000417 	ldw	r4,16(r16)
    a5cc:	80000115 	stw	zero,4(r16)
    a5d0:	197dffcc 	andi	r5,r3,63487
    a5d4:	8140030d 	sth	r5,12(r16)
    a5d8:	81000015 	stw	r4,0(r16)
    a5dc:	18c4000c 	andi	r3,r3,4096
    a5e0:	183fc726 	beq	r3,zero,a500 <__sflush_r+0xe8>
    a5e4:	80801415 	stw	r2,80(r16)
    a5e8:	003fc506 	br	a500 <__sflush_r+0xe8>
    a5ec:	98c00017 	ldw	r3,0(r19)
    a5f0:	183fa626 	beq	r3,zero,a48c <__sflush_r+0x74>
    a5f4:	19000760 	cmpeqi	r4,r3,29
    a5f8:	20000e1e 	bne	r4,zero,a634 <__sflush_r+0x21c>
    a5fc:	18c00598 	cmpnei	r3,r3,22
    a600:	18000c26 	beq	r3,zero,a634 <__sflush_r+0x21c>
    a604:	80c0030b 	ldhu	r3,12(r16)
    a608:	18c01014 	ori	r3,r3,64
    a60c:	80c0030d 	sth	r3,12(r16)
    a610:	003fc406 	br	a524 <__sflush_r+0x10c>
    a614:	81000417 	ldw	r4,16(r16)
    a618:	197dffcc 	andi	r5,r3,63487
    a61c:	8140030d 	sth	r5,12(r16)
    a620:	80000115 	stw	zero,4(r16)
    a624:	81000015 	stw	r4,0(r16)
    a628:	18c4000c 	andi	r3,r3,4096
    a62c:	183fb426 	beq	r3,zero,a500 <__sflush_r+0xe8>
    a630:	003fec06 	br	a5e4 <__sflush_r+0x1cc>
    a634:	9c400015 	stw	r17,0(r19)
    a638:	0005883a 	mov	r2,zero
    a63c:	003fb906 	br	a524 <__sflush_r+0x10c>

0000a640 <_fflush_r>:
    a640:	defffd04 	addi	sp,sp,-12
    a644:	dc000115 	stw	r16,4(sp)
    a648:	dfc00215 	stw	ra,8(sp)
    a64c:	2021883a 	mov	r16,r4
    a650:	20000226 	beq	r4,zero,a65c <_fflush_r+0x1c>
    a654:	20800e17 	ldw	r2,56(r4)
    a658:	10000726 	beq	r2,zero,a678 <_fflush_r+0x38>
    a65c:	2880030f 	ldh	r2,12(r5)
    a660:	10000a1e 	bne	r2,zero,a68c <_fflush_r+0x4c>
    a664:	0005883a 	mov	r2,zero
    a668:	dfc00217 	ldw	ra,8(sp)
    a66c:	dc000117 	ldw	r16,4(sp)
    a670:	dec00304 	addi	sp,sp,12
    a674:	f800283a 	ret
    a678:	d9400015 	stw	r5,0(sp)
    a67c:	00087d80 	call	87d8 <__sinit>
    a680:	d9400017 	ldw	r5,0(sp)
    a684:	2880030f 	ldh	r2,12(r5)
    a688:	103ff626 	beq	r2,zero,a664 <_fflush_r+0x24>
    a68c:	8009883a 	mov	r4,r16
    a690:	dfc00217 	ldw	ra,8(sp)
    a694:	dc000117 	ldw	r16,4(sp)
    a698:	dec00304 	addi	sp,sp,12
    a69c:	000a4181 	jmpi	a418 <__sflush_r>

0000a6a0 <fflush>:
    a6a0:	200b883a 	mov	r5,r4
    a6a4:	20000326 	beq	r4,zero,a6b4 <fflush+0x14>
    a6a8:	00800074 	movhi	r2,1
    a6ac:	11345717 	ldw	r4,-11940(r2)
    a6b0:	000a6401 	jmpi	a640 <_fflush_r>
    a6b4:	00800074 	movhi	r2,1
    a6b8:	11345617 	ldw	r4,-11944(r2)
    a6bc:	01400074 	movhi	r5,1
    a6c0:	29699004 	addi	r5,r5,-22976
    a6c4:	0008d841 	jmpi	8d84 <_fwalk_reent>

0000a6c8 <_malloc_trim_r>:
    a6c8:	defffb04 	addi	sp,sp,-20
    a6cc:	dcc00315 	stw	r19,12(sp)
    a6d0:	04c00074 	movhi	r19,1
    a6d4:	dc800215 	stw	r18,8(sp)
    a6d8:	dc400115 	stw	r17,4(sp)
    a6dc:	dc000015 	stw	r16,0(sp)
    a6e0:	dfc00415 	stw	ra,16(sp)
    a6e4:	2821883a 	mov	r16,r5
    a6e8:	9cf2df04 	addi	r19,r19,-13444
    a6ec:	2025883a 	mov	r18,r4
    a6f0:	000b3e40 	call	b3e4 <__malloc_lock>
    a6f4:	98800217 	ldw	r2,8(r19)
    a6f8:	14400117 	ldw	r17,4(r2)
    a6fc:	00bfff04 	movi	r2,-4
    a700:	88a2703a 	and	r17,r17,r2
    a704:	8c21c83a 	sub	r16,r17,r16
    a708:	8403fbc4 	addi	r16,r16,4079
    a70c:	8020d33a 	srli	r16,r16,12
    a710:	843fffc4 	addi	r16,r16,-1
    a714:	8020933a 	slli	r16,r16,12
    a718:	80840008 	cmpgei	r2,r16,4096
    a71c:	10000626 	beq	r2,zero,a738 <_malloc_trim_r+0x70>
    a720:	000b883a 	mov	r5,zero
    a724:	9009883a 	mov	r4,r18
    a728:	0009f600 	call	9f60 <_sbrk_r>
    a72c:	98c00217 	ldw	r3,8(r19)
    a730:	1c47883a 	add	r3,r3,r17
    a734:	10c00a26 	beq	r2,r3,a760 <_malloc_trim_r+0x98>
    a738:	9009883a 	mov	r4,r18
    a73c:	000b4080 	call	b408 <__malloc_unlock>
    a740:	0005883a 	mov	r2,zero
    a744:	dfc00417 	ldw	ra,16(sp)
    a748:	dcc00317 	ldw	r19,12(sp)
    a74c:	dc800217 	ldw	r18,8(sp)
    a750:	dc400117 	ldw	r17,4(sp)
    a754:	dc000017 	ldw	r16,0(sp)
    a758:	dec00504 	addi	sp,sp,20
    a75c:	f800283a 	ret
    a760:	040bc83a 	sub	r5,zero,r16
    a764:	9009883a 	mov	r4,r18
    a768:	0009f600 	call	9f60 <_sbrk_r>
    a76c:	10bfffd8 	cmpnei	r2,r2,-1
    a770:	10000d26 	beq	r2,zero,a7a8 <_malloc_trim_r+0xe0>
    a774:	00800074 	movhi	r2,1
    a778:	10b6f317 	ldw	r2,-9268(r2)
    a77c:	98c00217 	ldw	r3,8(r19)
    a780:	8c23c83a 	sub	r17,r17,r16
    a784:	8c400054 	ori	r17,r17,1
    a788:	1421c83a 	sub	r16,r2,r16
    a78c:	1c400115 	stw	r17,4(r3)
    a790:	00800074 	movhi	r2,1
    a794:	9009883a 	mov	r4,r18
    a798:	1436f315 	stw	r16,-9268(r2)
    a79c:	000b4080 	call	b408 <__malloc_unlock>
    a7a0:	00800044 	movi	r2,1
    a7a4:	003fe706 	br	a744 <_malloc_trim_r+0x7c>
    a7a8:	000b883a 	mov	r5,zero
    a7ac:	9009883a 	mov	r4,r18
    a7b0:	0009f600 	call	9f60 <_sbrk_r>
    a7b4:	99000217 	ldw	r4,8(r19)
    a7b8:	1107c83a 	sub	r3,r2,r4
    a7bc:	19400410 	cmplti	r5,r3,16
    a7c0:	283fdd1e 	bne	r5,zero,a738 <_malloc_trim_r+0x70>
    a7c4:	01400074 	movhi	r5,1
    a7c8:	29745817 	ldw	r5,-11936(r5)
    a7cc:	18c00054 	ori	r3,r3,1
    a7d0:	20c00115 	stw	r3,4(r4)
    a7d4:	1145c83a 	sub	r2,r2,r5
    a7d8:	01400074 	movhi	r5,1
    a7dc:	28b6f315 	stw	r2,-9268(r5)
    a7e0:	003fd506 	br	a738 <_malloc_trim_r+0x70>

0000a7e4 <_free_r>:
    a7e4:	28004f26 	beq	r5,zero,a924 <_free_r+0x140>
    a7e8:	defffd04 	addi	sp,sp,-12
    a7ec:	dc400115 	stw	r17,4(sp)
    a7f0:	dc000015 	stw	r16,0(sp)
    a7f4:	2023883a 	mov	r17,r4
    a7f8:	2821883a 	mov	r16,r5
    a7fc:	dfc00215 	stw	ra,8(sp)
    a800:	000b3e40 	call	b3e4 <__malloc_lock>
    a804:	81ffff17 	ldw	r7,-4(r16)
    a808:	00bfff84 	movi	r2,-2
    a80c:	80fffe04 	addi	r3,r16,-8
    a810:	3884703a 	and	r2,r7,r2
    a814:	01000074 	movhi	r4,1
    a818:	188d883a 	add	r6,r3,r2
    a81c:	2132df04 	addi	r4,r4,-13444
    a820:	31400117 	ldw	r5,4(r6)
    a824:	22000217 	ldw	r8,8(r4)
    a828:	027fff04 	movi	r9,-4
    a82c:	2a4a703a 	and	r5,r5,r9
    a830:	41806426 	beq	r8,r6,a9c4 <_free_r+0x1e0>
    a834:	31400115 	stw	r5,4(r6)
    a838:	39c0004c 	andi	r7,r7,1
    a83c:	3151883a 	add	r8,r6,r5
    a840:	3800281e 	bne	r7,zero,a8e4 <_free_r+0x100>
    a844:	82bffe17 	ldw	r10,-8(r16)
    a848:	42000117 	ldw	r8,4(r8)
    a84c:	01c00074 	movhi	r7,1
    a850:	1a87c83a 	sub	r3,r3,r10
    a854:	1a400217 	ldw	r9,8(r3)
    a858:	39f2e104 	addi	r7,r7,-13436
    a85c:	1285883a 	add	r2,r2,r10
    a860:	4200004c 	andi	r8,r8,1
    a864:	49c04c26 	beq	r9,r7,a998 <_free_r+0x1b4>
    a868:	1a800317 	ldw	r10,12(r3)
    a86c:	4a800315 	stw	r10,12(r9)
    a870:	52400215 	stw	r9,8(r10)
    a874:	40007126 	beq	r8,zero,aa3c <_free_r+0x258>
    a878:	11400054 	ori	r5,r2,1
    a87c:	19400115 	stw	r5,4(r3)
    a880:	30800015 	stw	r2,0(r6)
    a884:	11408028 	cmpgeui	r5,r2,512
    a888:	28002c1e 	bne	r5,zero,a93c <_free_r+0x158>
    a88c:	100ad0fa 	srli	r5,r2,3
    a890:	100cd17a 	srli	r6,r2,5
    a894:	00800044 	movi	r2,1
    a898:	29400044 	addi	r5,r5,1
    a89c:	280a90fa 	slli	r5,r5,3
    a8a0:	21c00117 	ldw	r7,4(r4)
    a8a4:	1184983a 	sll	r2,r2,r6
    a8a8:	214b883a 	add	r5,r4,r5
    a8ac:	29800017 	ldw	r6,0(r5)
    a8b0:	11c4b03a 	or	r2,r2,r7
    a8b4:	29fffe04 	addi	r7,r5,-8
    a8b8:	19c00315 	stw	r7,12(r3)
    a8bc:	19800215 	stw	r6,8(r3)
    a8c0:	20800115 	stw	r2,4(r4)
    a8c4:	28c00015 	stw	r3,0(r5)
    a8c8:	30c00315 	stw	r3,12(r6)
    a8cc:	8809883a 	mov	r4,r17
    a8d0:	dfc00217 	ldw	ra,8(sp)
    a8d4:	dc400117 	ldw	r17,4(sp)
    a8d8:	dc000017 	ldw	r16,0(sp)
    a8dc:	dec00304 	addi	sp,sp,12
    a8e0:	000b4081 	jmpi	b408 <__malloc_unlock>
    a8e4:	41c00117 	ldw	r7,4(r8)
    a8e8:	39c0004c 	andi	r7,r7,1
    a8ec:	38000e1e 	bne	r7,zero,a928 <_free_r+0x144>
    a8f0:	01c00074 	movhi	r7,1
    a8f4:	1145883a 	add	r2,r2,r5
    a8f8:	39f2e104 	addi	r7,r7,-13436
    a8fc:	31400217 	ldw	r5,8(r6)
    a900:	12400054 	ori	r9,r2,1
    a904:	1891883a 	add	r8,r3,r2
    a908:	29c05226 	beq	r5,r7,aa54 <_free_r+0x270>
    a90c:	31800317 	ldw	r6,12(r6)
    a910:	29800315 	stw	r6,12(r5)
    a914:	31400215 	stw	r5,8(r6)
    a918:	1a400115 	stw	r9,4(r3)
    a91c:	40800015 	stw	r2,0(r8)
    a920:	003fd806 	br	a884 <_free_r+0xa0>
    a924:	f800283a 	ret
    a928:	11400054 	ori	r5,r2,1
    a92c:	817fff15 	stw	r5,-4(r16)
    a930:	30800015 	stw	r2,0(r6)
    a934:	11408028 	cmpgeui	r5,r2,512
    a938:	283fd426 	beq	r5,zero,a88c <_free_r+0xa8>
    a93c:	100ad27a 	srli	r5,r2,9
    a940:	29800168 	cmpgeui	r6,r5,5
    a944:	3000341e 	bne	r6,zero,aa18 <_free_r+0x234>
    a948:	100ad1ba 	srli	r5,r2,6
    a94c:	29800e44 	addi	r6,r5,57
    a950:	300c90fa 	slli	r6,r6,3
    a954:	29c00e04 	addi	r7,r5,56
    a958:	218d883a 	add	r6,r4,r6
    a95c:	31400017 	ldw	r5,0(r6)
    a960:	31bffe04 	addi	r6,r6,-8
    a964:	31404226 	beq	r6,r5,aa70 <_free_r+0x28c>
    a968:	01ffff04 	movi	r7,-4
    a96c:	29000117 	ldw	r4,4(r5)
    a970:	21c8703a 	and	r4,r4,r7
    a974:	1100022e 	bgeu	r2,r4,a980 <_free_r+0x19c>
    a978:	29400217 	ldw	r5,8(r5)
    a97c:	317ffb1e 	bne	r6,r5,a96c <_free_r+0x188>
    a980:	29800317 	ldw	r6,12(r5)
    a984:	19800315 	stw	r6,12(r3)
    a988:	19400215 	stw	r5,8(r3)
    a98c:	30c00215 	stw	r3,8(r6)
    a990:	28c00315 	stw	r3,12(r5)
    a994:	003fcd06 	br	a8cc <_free_r+0xe8>
    a998:	40004d1e 	bne	r8,zero,aad0 <_free_r+0x2ec>
    a99c:	31000317 	ldw	r4,12(r6)
    a9a0:	31800217 	ldw	r6,8(r6)
    a9a4:	2885883a 	add	r2,r5,r2
    a9a8:	11400054 	ori	r5,r2,1
    a9ac:	31000315 	stw	r4,12(r6)
    a9b0:	21800215 	stw	r6,8(r4)
    a9b4:	19400115 	stw	r5,4(r3)
    a9b8:	1887883a 	add	r3,r3,r2
    a9bc:	18800015 	stw	r2,0(r3)
    a9c0:	003fc206 	br	a8cc <_free_r+0xe8>
    a9c4:	39c0004c 	andi	r7,r7,1
    a9c8:	1145883a 	add	r2,r2,r5
    a9cc:	3800071e 	bne	r7,zero,a9ec <_free_r+0x208>
    a9d0:	81fffe17 	ldw	r7,-8(r16)
    a9d4:	19c7c83a 	sub	r3,r3,r7
    a9d8:	19400317 	ldw	r5,12(r3)
    a9dc:	19800217 	ldw	r6,8(r3)
    a9e0:	11c5883a 	add	r2,r2,r7
    a9e4:	31400315 	stw	r5,12(r6)
    a9e8:	29800215 	stw	r6,8(r5)
    a9ec:	01400074 	movhi	r5,1
    a9f0:	11800054 	ori	r6,r2,1
    a9f4:	29745917 	ldw	r5,-11932(r5)
    a9f8:	19800115 	stw	r6,4(r3)
    a9fc:	20c00215 	stw	r3,8(r4)
    aa00:	117fb236 	bltu	r2,r5,a8cc <_free_r+0xe8>
    aa04:	00800074 	movhi	r2,1
    aa08:	1176ee17 	ldw	r5,-9288(r2)
    aa0c:	8809883a 	mov	r4,r17
    aa10:	000a6c80 	call	a6c8 <_malloc_trim_r>
    aa14:	003fad06 	br	a8cc <_free_r+0xe8>
    aa18:	29800568 	cmpgeui	r6,r5,21
    aa1c:	30000926 	beq	r6,zero,aa44 <_free_r+0x260>
    aa20:	29801568 	cmpgeui	r6,r5,85
    aa24:	3000191e 	bne	r6,zero,aa8c <_free_r+0x2a8>
    aa28:	100ad33a 	srli	r5,r2,12
    aa2c:	29801bc4 	addi	r6,r5,111
    aa30:	300c90fa 	slli	r6,r6,3
    aa34:	29c01b84 	addi	r7,r5,110
    aa38:	003fc706 	br	a958 <_free_r+0x174>
    aa3c:	1145883a 	add	r2,r2,r5
    aa40:	003fae06 	br	a8fc <_free_r+0x118>
    aa44:	29801704 	addi	r6,r5,92
    aa48:	300c90fa 	slli	r6,r6,3
    aa4c:	29c016c4 	addi	r7,r5,91
    aa50:	003fc106 	br	a958 <_free_r+0x174>
    aa54:	20c00515 	stw	r3,20(r4)
    aa58:	20c00415 	stw	r3,16(r4)
    aa5c:	19c00315 	stw	r7,12(r3)
    aa60:	19c00215 	stw	r7,8(r3)
    aa64:	1a400115 	stw	r9,4(r3)
    aa68:	40800015 	stw	r2,0(r8)
    aa6c:	003f9706 	br	a8cc <_free_r+0xe8>
    aa70:	380fd0ba 	srai	r7,r7,2
    aa74:	00800044 	movi	r2,1
    aa78:	22000117 	ldw	r8,4(r4)
    aa7c:	11ce983a 	sll	r7,r2,r7
    aa80:	3a0eb03a 	or	r7,r7,r8
    aa84:	21c00115 	stw	r7,4(r4)
    aa88:	003fbe06 	br	a984 <_free_r+0x1a0>
    aa8c:	29805568 	cmpgeui	r6,r5,341
    aa90:	3000051e 	bne	r6,zero,aaa8 <_free_r+0x2c4>
    aa94:	100ad3fa 	srli	r5,r2,15
    aa98:	29801e04 	addi	r6,r5,120
    aa9c:	300c90fa 	slli	r6,r6,3
    aaa0:	29c01dc4 	addi	r7,r5,119
    aaa4:	003fac06 	br	a958 <_free_r+0x174>
    aaa8:	29415568 	cmpgeui	r5,r5,1365
    aaac:	2800051e 	bne	r5,zero,aac4 <_free_r+0x2e0>
    aab0:	100ad4ba 	srli	r5,r2,18
    aab4:	29801f44 	addi	r6,r5,125
    aab8:	300c90fa 	slli	r6,r6,3
    aabc:	29c01f04 	addi	r7,r5,124
    aac0:	003fa506 	br	a958 <_free_r+0x174>
    aac4:	0180fe04 	movi	r6,1016
    aac8:	01c01f84 	movi	r7,126
    aacc:	003fa206 	br	a958 <_free_r+0x174>
    aad0:	11000054 	ori	r4,r2,1
    aad4:	19000115 	stw	r4,4(r3)
    aad8:	30800015 	stw	r2,0(r6)
    aadc:	003f7b06 	br	a8cc <_free_r+0xe8>

0000aae0 <_lseek_r>:
    aae0:	2807883a 	mov	r3,r5
    aae4:	defffe04 	addi	sp,sp,-8
    aae8:	dc000015 	stw	r16,0(sp)
    aaec:	300b883a 	mov	r5,r6
    aaf0:	00800074 	movhi	r2,1
    aaf4:	380d883a 	mov	r6,r7
    aaf8:	2021883a 	mov	r16,r4
    aafc:	1809883a 	mov	r4,r3
    ab00:	dfc00115 	stw	ra,4(sp)
    ab04:	1036ef15 	stw	zero,-9284(r2)
    ab08:	000b2880 	call	b288 <lseek>
    ab0c:	10ffffd8 	cmpnei	r3,r2,-1
    ab10:	18000426 	beq	r3,zero,ab24 <_lseek_r+0x44>
    ab14:	dfc00117 	ldw	ra,4(sp)
    ab18:	dc000017 	ldw	r16,0(sp)
    ab1c:	dec00204 	addi	sp,sp,8
    ab20:	f800283a 	ret
    ab24:	00c00074 	movhi	r3,1
    ab28:	18f6ef17 	ldw	r3,-9284(r3)
    ab2c:	183ff926 	beq	r3,zero,ab14 <_lseek_r+0x34>
    ab30:	80c00015 	stw	r3,0(r16)
    ab34:	dfc00117 	ldw	ra,4(sp)
    ab38:	dc000017 	ldw	r16,0(sp)
    ab3c:	dec00204 	addi	sp,sp,8
    ab40:	f800283a 	ret

0000ab44 <__swhatbuf_r>:
    ab44:	deffea04 	addi	sp,sp,-88
    ab48:	dc001215 	stw	r16,72(sp)
    ab4c:	2821883a 	mov	r16,r5
    ab50:	2940038f 	ldh	r5,14(r5)
    ab54:	dc801415 	stw	r18,80(sp)
    ab58:	dc401315 	stw	r17,76(sp)
    ab5c:	dfc01515 	stw	ra,84(sp)
    ab60:	3023883a 	mov	r17,r6
    ab64:	3825883a 	mov	r18,r7
    ab68:	28001016 	blt	r5,zero,abac <__swhatbuf_r+0x68>
    ab6c:	d80d883a 	mov	r6,sp
    ab70:	000ad800 	call	ad80 <_fstat_r>
    ab74:	10000d16 	blt	r2,zero,abac <__swhatbuf_r+0x68>
    ab78:	d8c00117 	ldw	r3,4(sp)
    ab7c:	00820004 	movi	r2,2048
    ab80:	18fc000c 	andi	r3,r3,61440
    ab84:	18c80020 	cmpeqi	r3,r3,8192
    ab88:	90c00015 	stw	r3,0(r18)
    ab8c:	00c10004 	movi	r3,1024
    ab90:	88c00015 	stw	r3,0(r17)
    ab94:	dfc01517 	ldw	ra,84(sp)
    ab98:	dc801417 	ldw	r18,80(sp)
    ab9c:	dc401317 	ldw	r17,76(sp)
    aba0:	dc001217 	ldw	r16,72(sp)
    aba4:	dec01604 	addi	sp,sp,88
    aba8:	f800283a 	ret
    abac:	8080030b 	ldhu	r2,12(r16)
    abb0:	90000015 	stw	zero,0(r18)
    abb4:	1080200c 	andi	r2,r2,128
    abb8:	10000426 	beq	r2,zero,abcc <__swhatbuf_r+0x88>
    abbc:	00801004 	movi	r2,64
    abc0:	88800015 	stw	r2,0(r17)
    abc4:	0005883a 	mov	r2,zero
    abc8:	003ff206 	br	ab94 <__swhatbuf_r+0x50>
    abcc:	00810004 	movi	r2,1024
    abd0:	88800015 	stw	r2,0(r17)
    abd4:	0005883a 	mov	r2,zero
    abd8:	003fee06 	br	ab94 <__swhatbuf_r+0x50>

0000abdc <__smakebuf_r>:
    abdc:	2880030b 	ldhu	r2,12(r5)
    abe0:	defffa04 	addi	sp,sp,-24
    abe4:	dc000215 	stw	r16,8(sp)
    abe8:	dfc00515 	stw	ra,20(sp)
    abec:	dc800415 	stw	r18,16(sp)
    abf0:	dc400315 	stw	r17,12(sp)
    abf4:	1080008c 	andi	r2,r2,2
    abf8:	2821883a 	mov	r16,r5
    abfc:	10000b26 	beq	r2,zero,ac2c <__smakebuf_r+0x50>
    ac00:	288010c4 	addi	r2,r5,67
    ac04:	28800015 	stw	r2,0(r5)
    ac08:	28800415 	stw	r2,16(r5)
    ac0c:	00800044 	movi	r2,1
    ac10:	28800515 	stw	r2,20(r5)
    ac14:	dfc00517 	ldw	ra,20(sp)
    ac18:	dc800417 	ldw	r18,16(sp)
    ac1c:	dc400317 	ldw	r17,12(sp)
    ac20:	dc000217 	ldw	r16,8(sp)
    ac24:	dec00604 	addi	sp,sp,24
    ac28:	f800283a 	ret
    ac2c:	d9c00104 	addi	r7,sp,4
    ac30:	d80d883a 	mov	r6,sp
    ac34:	2023883a 	mov	r17,r4
    ac38:	000ab440 	call	ab44 <__swhatbuf_r>
    ac3c:	d9000117 	ldw	r4,4(sp)
    ac40:	1025883a 	mov	r18,r2
    ac44:	2000131e 	bne	r4,zero,ac94 <__smakebuf_r+0xb8>
    ac48:	d9400017 	ldw	r5,0(sp)
    ac4c:	8809883a 	mov	r4,r17
    ac50:	0008e2c0 	call	8e2c <_malloc_r>
    ac54:	10001c26 	beq	r2,zero,acc8 <__smakebuf_r+0xec>
    ac58:	01000074 	movhi	r4,1
    ac5c:	21213504 	addi	r4,r4,-31532
    ac60:	80c0030b 	ldhu	r3,12(r16)
    ac64:	89000f15 	stw	r4,60(r17)
    ac68:	80800015 	stw	r2,0(r16)
    ac6c:	80800415 	stw	r2,16(r16)
    ac70:	d8800017 	ldw	r2,0(sp)
    ac74:	d9400117 	ldw	r5,4(sp)
    ac78:	18c02014 	ori	r3,r3,128
    ac7c:	80c0030d 	sth	r3,12(r16)
    ac80:	80800515 	stw	r2,20(r16)
    ac84:	28001d1e 	bne	r5,zero,acfc <__smakebuf_r+0x120>
    ac88:	90c6b03a 	or	r3,r18,r3
    ac8c:	80c0030d 	sth	r3,12(r16)
    ac90:	003fe006 	br	ac14 <__smakebuf_r+0x38>
    ac94:	8140038f 	ldh	r5,14(r16)
    ac98:	8809883a 	mov	r4,r17
    ac9c:	000ade00 	call	ade0 <_isatty_r>
    aca0:	103fe926 	beq	r2,zero,ac48 <__smakebuf_r+0x6c>
    aca4:	8080030b 	ldhu	r2,12(r16)
    aca8:	80c010c4 	addi	r3,r16,67
    acac:	80c00015 	stw	r3,0(r16)
    acb0:	10800054 	ori	r2,r2,1
    acb4:	8080030d 	sth	r2,12(r16)
    acb8:	00800044 	movi	r2,1
    acbc:	80c00415 	stw	r3,16(r16)
    acc0:	80800515 	stw	r2,20(r16)
    acc4:	003fe006 	br	ac48 <__smakebuf_r+0x6c>
    acc8:	8080030b 	ldhu	r2,12(r16)
    accc:	10c0800c 	andi	r3,r2,512
    acd0:	183fd01e 	bne	r3,zero,ac14 <__smakebuf_r+0x38>
    acd4:	00ffff04 	movi	r3,-4
    acd8:	10c4703a 	and	r2,r2,r3
    acdc:	10800094 	ori	r2,r2,2
    ace0:	80c010c4 	addi	r3,r16,67
    ace4:	8080030d 	sth	r2,12(r16)
    ace8:	00800044 	movi	r2,1
    acec:	80c00015 	stw	r3,0(r16)
    acf0:	80c00415 	stw	r3,16(r16)
    acf4:	80800515 	stw	r2,20(r16)
    acf8:	003fc606 	br	ac14 <__smakebuf_r+0x38>
    acfc:	8140038f 	ldh	r5,14(r16)
    ad00:	8809883a 	mov	r4,r17
    ad04:	000ade00 	call	ade0 <_isatty_r>
    ad08:	80c0030b 	ldhu	r3,12(r16)
    ad0c:	103fde26 	beq	r2,zero,ac88 <__smakebuf_r+0xac>
    ad10:	18ffff0c 	andi	r3,r3,65532
    ad14:	18c00054 	ori	r3,r3,1
    ad18:	003fdb06 	br	ac88 <__smakebuf_r+0xac>

0000ad1c <_read_r>:
    ad1c:	2807883a 	mov	r3,r5
    ad20:	defffe04 	addi	sp,sp,-8
    ad24:	dc000015 	stw	r16,0(sp)
    ad28:	300b883a 	mov	r5,r6
    ad2c:	00800074 	movhi	r2,1
    ad30:	380d883a 	mov	r6,r7
    ad34:	2021883a 	mov	r16,r4
    ad38:	1809883a 	mov	r4,r3
    ad3c:	dfc00115 	stw	ra,4(sp)
    ad40:	1036ef15 	stw	zero,-9284(r2)
    ad44:	000b4680 	call	b468 <read>
    ad48:	10ffffd8 	cmpnei	r3,r2,-1
    ad4c:	18000426 	beq	r3,zero,ad60 <_read_r+0x44>
    ad50:	dfc00117 	ldw	ra,4(sp)
    ad54:	dc000017 	ldw	r16,0(sp)
    ad58:	dec00204 	addi	sp,sp,8
    ad5c:	f800283a 	ret
    ad60:	00c00074 	movhi	r3,1
    ad64:	18f6ef17 	ldw	r3,-9284(r3)
    ad68:	183ff926 	beq	r3,zero,ad50 <_read_r+0x34>
    ad6c:	80c00015 	stw	r3,0(r16)
    ad70:	dfc00117 	ldw	ra,4(sp)
    ad74:	dc000017 	ldw	r16,0(sp)
    ad78:	dec00204 	addi	sp,sp,8
    ad7c:	f800283a 	ret

0000ad80 <_fstat_r>:
    ad80:	2807883a 	mov	r3,r5
    ad84:	defffe04 	addi	sp,sp,-8
    ad88:	dc000015 	stw	r16,0(sp)
    ad8c:	00800074 	movhi	r2,1
    ad90:	300b883a 	mov	r5,r6
    ad94:	2021883a 	mov	r16,r4
    ad98:	1809883a 	mov	r4,r3
    ad9c:	dfc00115 	stw	ra,4(sp)
    ada0:	1036ef15 	stw	zero,-9284(r2)
    ada4:	000afb80 	call	afb8 <fstat>
    ada8:	10ffffd8 	cmpnei	r3,r2,-1
    adac:	18000426 	beq	r3,zero,adc0 <_fstat_r+0x40>
    adb0:	dfc00117 	ldw	ra,4(sp)
    adb4:	dc000017 	ldw	r16,0(sp)
    adb8:	dec00204 	addi	sp,sp,8
    adbc:	f800283a 	ret
    adc0:	00c00074 	movhi	r3,1
    adc4:	18f6ef17 	ldw	r3,-9284(r3)
    adc8:	183ff926 	beq	r3,zero,adb0 <_fstat_r+0x30>
    adcc:	80c00015 	stw	r3,0(r16)
    add0:	dfc00117 	ldw	ra,4(sp)
    add4:	dc000017 	ldw	r16,0(sp)
    add8:	dec00204 	addi	sp,sp,8
    addc:	f800283a 	ret

0000ade0 <_isatty_r>:
    ade0:	defffe04 	addi	sp,sp,-8
    ade4:	dc000015 	stw	r16,0(sp)
    ade8:	00800074 	movhi	r2,1
    adec:	2021883a 	mov	r16,r4
    adf0:	2809883a 	mov	r4,r5
    adf4:	dfc00115 	stw	ra,4(sp)
    adf8:	1036ef15 	stw	zero,-9284(r2)
    adfc:	000b0b00 	call	b0b0 <isatty>
    ae00:	10ffffd8 	cmpnei	r3,r2,-1
    ae04:	18000426 	beq	r3,zero,ae18 <_isatty_r+0x38>
    ae08:	dfc00117 	ldw	ra,4(sp)
    ae0c:	dc000017 	ldw	r16,0(sp)
    ae10:	dec00204 	addi	sp,sp,8
    ae14:	f800283a 	ret
    ae18:	00c00074 	movhi	r3,1
    ae1c:	18f6ef17 	ldw	r3,-9284(r3)
    ae20:	183ff926 	beq	r3,zero,ae08 <_isatty_r+0x28>
    ae24:	80c00015 	stw	r3,0(r16)
    ae28:	dfc00117 	ldw	ra,4(sp)
    ae2c:	dc000017 	ldw	r16,0(sp)
    ae30:	dec00204 	addi	sp,sp,8
    ae34:	f800283a 	ret

0000ae38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ae38:	defffe04 	addi	sp,sp,-8
    ae3c:	dfc00115 	stw	ra,4(sp)
    ae40:	df000015 	stw	fp,0(sp)
    ae44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ae48:	d0a00917 	ldw	r2,-32732(gp)
    ae4c:	10000326 	beq	r2,zero,ae5c <alt_get_errno+0x24>
    ae50:	d0a00917 	ldw	r2,-32732(gp)
    ae54:	103ee83a 	callr	r2
    ae58:	00000106 	br	ae60 <alt_get_errno+0x28>
    ae5c:	d0a29904 	addi	r2,gp,-30108
}
    ae60:	e037883a 	mov	sp,fp
    ae64:	dfc00117 	ldw	ra,4(sp)
    ae68:	df000017 	ldw	fp,0(sp)
    ae6c:	dec00204 	addi	sp,sp,8
    ae70:	f800283a 	ret

0000ae74 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    ae74:	defffb04 	addi	sp,sp,-20
    ae78:	dfc00415 	stw	ra,16(sp)
    ae7c:	df000315 	stw	fp,12(sp)
    ae80:	df000304 	addi	fp,sp,12
    ae84:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    ae88:	e0bffd17 	ldw	r2,-12(fp)
    ae8c:	10000916 	blt	r2,zero,aeb4 <close+0x40>
    ae90:	e0fffd17 	ldw	r3,-12(fp)
    ae94:	1805883a 	mov	r2,r3
    ae98:	1085883a 	add	r2,r2,r2
    ae9c:	10c5883a 	add	r2,r2,r3
    aea0:	100490ba 	slli	r2,r2,2
    aea4:	00c00074 	movhi	r3,1
    aea8:	18f3eb04 	addi	r3,r3,-12372
    aeac:	10c5883a 	add	r2,r2,r3
    aeb0:	00000106 	br	aeb8 <close+0x44>
    aeb4:	0005883a 	mov	r2,zero
    aeb8:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
    aebc:	e0bfff17 	ldw	r2,-4(fp)
    aec0:	10001926 	beq	r2,zero,af28 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    aec4:	e0bfff17 	ldw	r2,-4(fp)
    aec8:	10800017 	ldw	r2,0(r2)
    aecc:	10800417 	ldw	r2,16(r2)
    aed0:	10000626 	beq	r2,zero,aeec <close+0x78>
    aed4:	e0bfff17 	ldw	r2,-4(fp)
    aed8:	10800017 	ldw	r2,0(r2)
    aedc:	10800417 	ldw	r2,16(r2)
    aee0:	e13fff17 	ldw	r4,-4(fp)
    aee4:	103ee83a 	callr	r2
    aee8:	00000106 	br	aef0 <close+0x7c>
    aeec:	0005883a 	mov	r2,zero
    aef0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    aef4:	e13ffd17 	ldw	r4,-12(fp)
    aef8:	000b5700 	call	b570 <alt_release_fd>
    if (rval < 0)
    aefc:	e0bffe17 	ldw	r2,-8(fp)
    af00:	1000070e 	bge	r2,zero,af20 <close+0xac>
    {
      ALT_ERRNO = -rval;
    af04:	000ae380 	call	ae38 <alt_get_errno>
    af08:	1007883a 	mov	r3,r2
    af0c:	e0bffe17 	ldw	r2,-8(fp)
    af10:	0085c83a 	sub	r2,zero,r2
    af14:	18800015 	stw	r2,0(r3)
      return -1;
    af18:	00bfffc4 	movi	r2,-1
    af1c:	00000706 	br	af3c <close+0xc8>
    }
    return 0;
    af20:	0005883a 	mov	r2,zero
    af24:	00000506 	br	af3c <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    af28:	000ae380 	call	ae38 <alt_get_errno>
    af2c:	1007883a 	mov	r3,r2
    af30:	00801444 	movi	r2,81
    af34:	18800015 	stw	r2,0(r3)
    return -1;
    af38:	00bfffc4 	movi	r2,-1
  }
}
    af3c:	e037883a 	mov	sp,fp
    af40:	dfc00117 	ldw	ra,4(sp)
    af44:	df000017 	ldw	fp,0(sp)
    af48:	dec00204 	addi	sp,sp,8
    af4c:	f800283a 	ret

0000af50 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    af50:	defffc04 	addi	sp,sp,-16
    af54:	df000315 	stw	fp,12(sp)
    af58:	df000304 	addi	fp,sp,12
    af5c:	e13fff15 	stw	r4,-4(fp)
    af60:	e17ffe15 	stw	r5,-8(fp)
    af64:	e1bffd15 	stw	r6,-12(fp)
  return len;
    af68:	e0bffd17 	ldw	r2,-12(fp)
}
    af6c:	e037883a 	mov	sp,fp
    af70:	df000017 	ldw	fp,0(sp)
    af74:	dec00104 	addi	sp,sp,4
    af78:	f800283a 	ret

0000af7c <alt_get_errno>:
{
    af7c:	defffe04 	addi	sp,sp,-8
    af80:	dfc00115 	stw	ra,4(sp)
    af84:	df000015 	stw	fp,0(sp)
    af88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    af8c:	d0a00917 	ldw	r2,-32732(gp)
    af90:	10000326 	beq	r2,zero,afa0 <alt_get_errno+0x24>
    af94:	d0a00917 	ldw	r2,-32732(gp)
    af98:	103ee83a 	callr	r2
    af9c:	00000106 	br	afa4 <alt_get_errno+0x28>
    afa0:	d0a29904 	addi	r2,gp,-30108
}
    afa4:	e037883a 	mov	sp,fp
    afa8:	dfc00117 	ldw	ra,4(sp)
    afac:	df000017 	ldw	fp,0(sp)
    afb0:	dec00204 	addi	sp,sp,8
    afb4:	f800283a 	ret

0000afb8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    afb8:	defffb04 	addi	sp,sp,-20
    afbc:	dfc00415 	stw	ra,16(sp)
    afc0:	df000315 	stw	fp,12(sp)
    afc4:	df000304 	addi	fp,sp,12
    afc8:	e13ffe15 	stw	r4,-8(fp)
    afcc:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    afd0:	e0bffe17 	ldw	r2,-8(fp)
    afd4:	10000916 	blt	r2,zero,affc <fstat+0x44>
    afd8:	e0fffe17 	ldw	r3,-8(fp)
    afdc:	1805883a 	mov	r2,r3
    afe0:	1085883a 	add	r2,r2,r2
    afe4:	10c5883a 	add	r2,r2,r3
    afe8:	100490ba 	slli	r2,r2,2
    afec:	00c00074 	movhi	r3,1
    aff0:	18f3eb04 	addi	r3,r3,-12372
    aff4:	10c5883a 	add	r2,r2,r3
    aff8:	00000106 	br	b000 <fstat+0x48>
    affc:	0005883a 	mov	r2,zero
    b000:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    b004:	e0bfff17 	ldw	r2,-4(fp)
    b008:	10001026 	beq	r2,zero,b04c <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    b00c:	e0bfff17 	ldw	r2,-4(fp)
    b010:	10800017 	ldw	r2,0(r2)
    b014:	10800817 	ldw	r2,32(r2)
    b018:	10000726 	beq	r2,zero,b038 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
    b01c:	e0bfff17 	ldw	r2,-4(fp)
    b020:	10800017 	ldw	r2,0(r2)
    b024:	10800817 	ldw	r2,32(r2)
    b028:	e17ffd17 	ldw	r5,-12(fp)
    b02c:	e13fff17 	ldw	r4,-4(fp)
    b030:	103ee83a 	callr	r2
    b034:	00000a06 	br	b060 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    b038:	e0bffd17 	ldw	r2,-12(fp)
    b03c:	00c80004 	movi	r3,8192
    b040:	10c00115 	stw	r3,4(r2)
      return 0;
    b044:	0005883a 	mov	r2,zero
    b048:	00000506 	br	b060 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b04c:	000af7c0 	call	af7c <alt_get_errno>
    b050:	1007883a 	mov	r3,r2
    b054:	00801444 	movi	r2,81
    b058:	18800015 	stw	r2,0(r3)
    return -1;
    b05c:	00bfffc4 	movi	r2,-1
  }
}
    b060:	e037883a 	mov	sp,fp
    b064:	dfc00117 	ldw	ra,4(sp)
    b068:	df000017 	ldw	fp,0(sp)
    b06c:	dec00204 	addi	sp,sp,8
    b070:	f800283a 	ret

0000b074 <alt_get_errno>:
{
    b074:	defffe04 	addi	sp,sp,-8
    b078:	dfc00115 	stw	ra,4(sp)
    b07c:	df000015 	stw	fp,0(sp)
    b080:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b084:	d0a00917 	ldw	r2,-32732(gp)
    b088:	10000326 	beq	r2,zero,b098 <alt_get_errno+0x24>
    b08c:	d0a00917 	ldw	r2,-32732(gp)
    b090:	103ee83a 	callr	r2
    b094:	00000106 	br	b09c <alt_get_errno+0x28>
    b098:	d0a29904 	addi	r2,gp,-30108
}
    b09c:	e037883a 	mov	sp,fp
    b0a0:	dfc00117 	ldw	ra,4(sp)
    b0a4:	df000017 	ldw	fp,0(sp)
    b0a8:	dec00204 	addi	sp,sp,8
    b0ac:	f800283a 	ret

0000b0b0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    b0b0:	deffea04 	addi	sp,sp,-88
    b0b4:	dfc01515 	stw	ra,84(sp)
    b0b8:	df001415 	stw	fp,80(sp)
    b0bc:	df001404 	addi	fp,sp,80
    b0c0:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b0c4:	e0bfec17 	ldw	r2,-80(fp)
    b0c8:	10000916 	blt	r2,zero,b0f0 <isatty+0x40>
    b0cc:	e0ffec17 	ldw	r3,-80(fp)
    b0d0:	1805883a 	mov	r2,r3
    b0d4:	1085883a 	add	r2,r2,r2
    b0d8:	10c5883a 	add	r2,r2,r3
    b0dc:	100490ba 	slli	r2,r2,2
    b0e0:	00c00074 	movhi	r3,1
    b0e4:	18f3eb04 	addi	r3,r3,-12372
    b0e8:	10c5883a 	add	r2,r2,r3
    b0ec:	00000106 	br	b0f4 <isatty+0x44>
    b0f0:	0005883a 	mov	r2,zero
    b0f4:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    b0f8:	e0bfff17 	ldw	r2,-4(fp)
    b0fc:	10000e26 	beq	r2,zero,b138 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    b100:	e0bfff17 	ldw	r2,-4(fp)
    b104:	10800017 	ldw	r2,0(r2)
    b108:	10800817 	ldw	r2,32(r2)
    b10c:	1000021e 	bne	r2,zero,b118 <isatty+0x68>
    {
      return 1;
    b110:	00800044 	movi	r2,1
    b114:	00000d06 	br	b14c <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    b118:	e0bfed04 	addi	r2,fp,-76
    b11c:	100b883a 	mov	r5,r2
    b120:	e13fec17 	ldw	r4,-80(fp)
    b124:	000afb80 	call	afb8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    b128:	e0bfee17 	ldw	r2,-72(fp)
    b12c:	10880020 	cmpeqi	r2,r2,8192
    b130:	10803fcc 	andi	r2,r2,255
    b134:	00000506 	br	b14c <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b138:	000b0740 	call	b074 <alt_get_errno>
    b13c:	1007883a 	mov	r3,r2
    b140:	00801444 	movi	r2,81
    b144:	18800015 	stw	r2,0(r3)
    return 0;
    b148:	0005883a 	mov	r2,zero
  }
}
    b14c:	e037883a 	mov	sp,fp
    b150:	dfc00117 	ldw	ra,4(sp)
    b154:	df000017 	ldw	fp,0(sp)
    b158:	dec00204 	addi	sp,sp,8
    b15c:	f800283a 	ret

0000b160 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    b160:	defffc04 	addi	sp,sp,-16
    b164:	df000315 	stw	fp,12(sp)
    b168:	df000304 	addi	fp,sp,12
    b16c:	e13fff15 	stw	r4,-4(fp)
    b170:	e17ffe15 	stw	r5,-8(fp)
    b174:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
    b178:	e0fffe17 	ldw	r3,-8(fp)
    b17c:	e0bfff17 	ldw	r2,-4(fp)
    b180:	18800c26 	beq	r3,r2,b1b4 <alt_load_section+0x54>
  {
    while( to != end )
    b184:	00000806 	br	b1a8 <alt_load_section+0x48>
    {
      *to++ = *from++;
    b188:	e0ffff17 	ldw	r3,-4(fp)
    b18c:	18800104 	addi	r2,r3,4
    b190:	e0bfff15 	stw	r2,-4(fp)
    b194:	e0bffe17 	ldw	r2,-8(fp)
    b198:	11000104 	addi	r4,r2,4
    b19c:	e13ffe15 	stw	r4,-8(fp)
    b1a0:	18c00017 	ldw	r3,0(r3)
    b1a4:	10c00015 	stw	r3,0(r2)
    while( to != end )
    b1a8:	e0fffe17 	ldw	r3,-8(fp)
    b1ac:	e0bffd17 	ldw	r2,-12(fp)
    b1b0:	18bff51e 	bne	r3,r2,b188 <alt_load_section+0x28>
    }
  }
}
    b1b4:	0001883a 	nop
    b1b8:	e037883a 	mov	sp,fp
    b1bc:	df000017 	ldw	fp,0(sp)
    b1c0:	dec00104 	addi	sp,sp,4
    b1c4:	f800283a 	ret

0000b1c8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    b1c8:	defffe04 	addi	sp,sp,-8
    b1cc:	dfc00115 	stw	ra,4(sp)
    b1d0:	df000015 	stw	fp,0(sp)
    b1d4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    b1d8:	01800074 	movhi	r6,1
    b1dc:	31b46104 	addi	r6,r6,-11900
    b1e0:	01400074 	movhi	r5,1
    b1e4:	2971d604 	addi	r5,r5,-14504
    b1e8:	01000074 	movhi	r4,1
    b1ec:	21346104 	addi	r4,r4,-11900
    b1f0:	000b1600 	call	b160 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    b1f4:	01800074 	movhi	r6,1
    b1f8:	31a00804 	addi	r6,r6,-32736
    b1fc:	01400074 	movhi	r5,1
    b200:	29600804 	addi	r5,r5,-32736
    b204:	01000074 	movhi	r4,1
    b208:	21200804 	addi	r4,r4,-32736
    b20c:	000b1600 	call	b160 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    b210:	01800074 	movhi	r6,1
    b214:	31b1d604 	addi	r6,r6,-14504
    b218:	01400074 	movhi	r5,1
    b21c:	2971c504 	addi	r5,r5,-14572
    b220:	01000074 	movhi	r4,1
    b224:	2131c504 	addi	r4,r4,-14572
    b228:	000b1600 	call	b160 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b22c:	000bc440 	call	bc44 <alt_dcache_flush_all>
  alt_icache_flush_all();
    b230:	000be100 	call	be10 <alt_icache_flush_all>
}
    b234:	0001883a 	nop
    b238:	e037883a 	mov	sp,fp
    b23c:	dfc00117 	ldw	ra,4(sp)
    b240:	df000017 	ldw	fp,0(sp)
    b244:	dec00204 	addi	sp,sp,8
    b248:	f800283a 	ret

0000b24c <alt_get_errno>:
{
    b24c:	defffe04 	addi	sp,sp,-8
    b250:	dfc00115 	stw	ra,4(sp)
    b254:	df000015 	stw	fp,0(sp)
    b258:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b25c:	d0a00917 	ldw	r2,-32732(gp)
    b260:	10000326 	beq	r2,zero,b270 <alt_get_errno+0x24>
    b264:	d0a00917 	ldw	r2,-32732(gp)
    b268:	103ee83a 	callr	r2
    b26c:	00000106 	br	b274 <alt_get_errno+0x28>
    b270:	d0a29904 	addi	r2,gp,-30108
}
    b274:	e037883a 	mov	sp,fp
    b278:	dfc00117 	ldw	ra,4(sp)
    b27c:	df000017 	ldw	fp,0(sp)
    b280:	dec00204 	addi	sp,sp,8
    b284:	f800283a 	ret

0000b288 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    b288:	defff904 	addi	sp,sp,-28
    b28c:	dfc00615 	stw	ra,24(sp)
    b290:	df000515 	stw	fp,20(sp)
    b294:	df000504 	addi	fp,sp,20
    b298:	e13ffd15 	stw	r4,-12(fp)
    b29c:	e17ffc15 	stw	r5,-16(fp)
    b2a0:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    b2a4:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b2a8:	e0bffd17 	ldw	r2,-12(fp)
    b2ac:	10000916 	blt	r2,zero,b2d4 <lseek+0x4c>
    b2b0:	e0fffd17 	ldw	r3,-12(fp)
    b2b4:	1805883a 	mov	r2,r3
    b2b8:	1085883a 	add	r2,r2,r2
    b2bc:	10c5883a 	add	r2,r2,r3
    b2c0:	100490ba 	slli	r2,r2,2
    b2c4:	00c00074 	movhi	r3,1
    b2c8:	18f3eb04 	addi	r3,r3,-12372
    b2cc:	10c5883a 	add	r2,r2,r3
    b2d0:	00000106 	br	b2d8 <lseek+0x50>
    b2d4:	0005883a 	mov	r2,zero
    b2d8:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
    b2dc:	e0bffe17 	ldw	r2,-8(fp)
    b2e0:	10001026 	beq	r2,zero,b324 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    b2e4:	e0bffe17 	ldw	r2,-8(fp)
    b2e8:	10800017 	ldw	r2,0(r2)
    b2ec:	10800717 	ldw	r2,28(r2)
    b2f0:	10000926 	beq	r2,zero,b318 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    b2f4:	e0bffe17 	ldw	r2,-8(fp)
    b2f8:	10800017 	ldw	r2,0(r2)
    b2fc:	10800717 	ldw	r2,28(r2)
    b300:	e1bffb17 	ldw	r6,-20(fp)
    b304:	e17ffc17 	ldw	r5,-16(fp)
    b308:	e13ffe17 	ldw	r4,-8(fp)
    b30c:	103ee83a 	callr	r2
    b310:	e0bfff15 	stw	r2,-4(fp)
    b314:	00000506 	br	b32c <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    b318:	00bfde84 	movi	r2,-134
    b31c:	e0bfff15 	stw	r2,-4(fp)
    b320:	00000206 	br	b32c <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
    b324:	00bfebc4 	movi	r2,-81
    b328:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
    b32c:	e0bfff17 	ldw	r2,-4(fp)
    b330:	1000070e 	bge	r2,zero,b350 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
    b334:	000b24c0 	call	b24c <alt_get_errno>
    b338:	1007883a 	mov	r3,r2
    b33c:	e0bfff17 	ldw	r2,-4(fp)
    b340:	0085c83a 	sub	r2,zero,r2
    b344:	18800015 	stw	r2,0(r3)
    rc = -1;
    b348:	00bfffc4 	movi	r2,-1
    b34c:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
    b350:	e0bfff17 	ldw	r2,-4(fp)
}
    b354:	e037883a 	mov	sp,fp
    b358:	dfc00117 	ldw	ra,4(sp)
    b35c:	df000017 	ldw	fp,0(sp)
    b360:	dec00204 	addi	sp,sp,8
    b364:	f800283a 	ret

0000b368 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    b368:	defffd04 	addi	sp,sp,-12
    b36c:	dfc00215 	stw	ra,8(sp)
    b370:	df000115 	stw	fp,4(sp)
    b374:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    b378:	0009883a 	mov	r4,zero
    b37c:	000b83c0 	call	b83c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    b380:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    b384:	000b8780 	call	b878 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    b388:	01800074 	movhi	r6,1
    b38c:	31b1cc04 	addi	r6,r6,-14544
    b390:	01400074 	movhi	r5,1
    b394:	2971cc04 	addi	r5,r5,-14544
    b398:	01000074 	movhi	r4,1
    b39c:	2131cc04 	addi	r4,r4,-14544
    b3a0:	000bf040 	call	bf04 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    b3a4:	000bd480 	call	bd48 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    b3a8:	01000074 	movhi	r4,1
    b3ac:	212f6b04 	addi	r4,r4,-16980
    b3b0:	000c46c0 	call	c46c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    b3b4:	d0a29a17 	ldw	r2,-30104(gp)
    b3b8:	d0e29b17 	ldw	r3,-30100(gp)
    b3bc:	d1229c17 	ldw	r4,-30096(gp)
    b3c0:	200d883a 	mov	r6,r4
    b3c4:	180b883a 	mov	r5,r3
    b3c8:	1009883a 	mov	r4,r2
    b3cc:	000805c0 	call	805c <main>
    b3d0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    b3d4:	01000044 	movi	r4,1
    b3d8:	000ae740 	call	ae74 <close>
  exit (result);
    b3dc:	e13fff17 	ldw	r4,-4(fp)
    b3e0:	000c4800 	call	c480 <exit>

0000b3e4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    b3e4:	defffe04 	addi	sp,sp,-8
    b3e8:	df000115 	stw	fp,4(sp)
    b3ec:	df000104 	addi	fp,sp,4
    b3f0:	e13fff15 	stw	r4,-4(fp)
}
    b3f4:	0001883a 	nop
    b3f8:	e037883a 	mov	sp,fp
    b3fc:	df000017 	ldw	fp,0(sp)
    b400:	dec00104 	addi	sp,sp,4
    b404:	f800283a 	ret

0000b408 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    b408:	defffe04 	addi	sp,sp,-8
    b40c:	df000115 	stw	fp,4(sp)
    b410:	df000104 	addi	fp,sp,4
    b414:	e13fff15 	stw	r4,-4(fp)
}
    b418:	0001883a 	nop
    b41c:	e037883a 	mov	sp,fp
    b420:	df000017 	ldw	fp,0(sp)
    b424:	dec00104 	addi	sp,sp,4
    b428:	f800283a 	ret

0000b42c <alt_get_errno>:
{
    b42c:	defffe04 	addi	sp,sp,-8
    b430:	dfc00115 	stw	ra,4(sp)
    b434:	df000015 	stw	fp,0(sp)
    b438:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b43c:	d0a00917 	ldw	r2,-32732(gp)
    b440:	10000326 	beq	r2,zero,b450 <alt_get_errno+0x24>
    b444:	d0a00917 	ldw	r2,-32732(gp)
    b448:	103ee83a 	callr	r2
    b44c:	00000106 	br	b454 <alt_get_errno+0x28>
    b450:	d0a29904 	addi	r2,gp,-30108
}
    b454:	e037883a 	mov	sp,fp
    b458:	dfc00117 	ldw	ra,4(sp)
    b45c:	df000017 	ldw	fp,0(sp)
    b460:	dec00204 	addi	sp,sp,8
    b464:	f800283a 	ret

0000b468 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    b468:	defff904 	addi	sp,sp,-28
    b46c:	dfc00615 	stw	ra,24(sp)
    b470:	df000515 	stw	fp,20(sp)
    b474:	df000504 	addi	fp,sp,20
    b478:	e13ffd15 	stw	r4,-12(fp)
    b47c:	e17ffc15 	stw	r5,-16(fp)
    b480:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b484:	e0bffd17 	ldw	r2,-12(fp)
    b488:	10000916 	blt	r2,zero,b4b0 <read+0x48>
    b48c:	e0fffd17 	ldw	r3,-12(fp)
    b490:	1805883a 	mov	r2,r3
    b494:	1085883a 	add	r2,r2,r2
    b498:	10c5883a 	add	r2,r2,r3
    b49c:	100490ba 	slli	r2,r2,2
    b4a0:	00c00074 	movhi	r3,1
    b4a4:	18f3eb04 	addi	r3,r3,-12372
    b4a8:	10c5883a 	add	r2,r2,r3
    b4ac:	00000106 	br	b4b4 <read+0x4c>
    b4b0:	0005883a 	mov	r2,zero
    b4b4:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    b4b8:	e0bfff17 	ldw	r2,-4(fp)
    b4bc:	10002226 	beq	r2,zero,b548 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b4c0:	e0bfff17 	ldw	r2,-4(fp)
    b4c4:	10800217 	ldw	r2,8(r2)
    b4c8:	108000cc 	andi	r2,r2,3
    b4cc:	10800060 	cmpeqi	r2,r2,1
    b4d0:	1000181e 	bne	r2,zero,b534 <read+0xcc>
        (fd->dev->read))
    b4d4:	e0bfff17 	ldw	r2,-4(fp)
    b4d8:	10800017 	ldw	r2,0(r2)
    b4dc:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b4e0:	10001426 	beq	r2,zero,b534 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    b4e4:	e0bfff17 	ldw	r2,-4(fp)
    b4e8:	10800017 	ldw	r2,0(r2)
    b4ec:	10800517 	ldw	r2,20(r2)
    b4f0:	e0fffb17 	ldw	r3,-20(fp)
    b4f4:	180d883a 	mov	r6,r3
    b4f8:	e17ffc17 	ldw	r5,-16(fp)
    b4fc:	e13fff17 	ldw	r4,-4(fp)
    b500:	103ee83a 	callr	r2
    b504:	e0bffe15 	stw	r2,-8(fp)
    b508:	e0bffe17 	ldw	r2,-8(fp)
    b50c:	1000070e 	bge	r2,zero,b52c <read+0xc4>
        {
          ALT_ERRNO = -rval;
    b510:	000b42c0 	call	b42c <alt_get_errno>
    b514:	1007883a 	mov	r3,r2
    b518:	e0bffe17 	ldw	r2,-8(fp)
    b51c:	0085c83a 	sub	r2,zero,r2
    b520:	18800015 	stw	r2,0(r3)
          return -1;
    b524:	00bfffc4 	movi	r2,-1
    b528:	00000c06 	br	b55c <read+0xf4>
        }
        return rval;
    b52c:	e0bffe17 	ldw	r2,-8(fp)
    b530:	00000a06 	br	b55c <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
    b534:	000b42c0 	call	b42c <alt_get_errno>
    b538:	1007883a 	mov	r3,r2
    b53c:	00800344 	movi	r2,13
    b540:	18800015 	stw	r2,0(r3)
    b544:	00000406 	br	b558 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    b548:	000b42c0 	call	b42c <alt_get_errno>
    b54c:	1007883a 	mov	r3,r2
    b550:	00801444 	movi	r2,81
    b554:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b558:	00bfffc4 	movi	r2,-1
}
    b55c:	e037883a 	mov	sp,fp
    b560:	dfc00117 	ldw	ra,4(sp)
    b564:	df000017 	ldw	fp,0(sp)
    b568:	dec00204 	addi	sp,sp,8
    b56c:	f800283a 	ret

0000b570 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    b570:	defffe04 	addi	sp,sp,-8
    b574:	df000115 	stw	fp,4(sp)
    b578:	df000104 	addi	fp,sp,4
    b57c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    b580:	e0bfff17 	ldw	r2,-4(fp)
    b584:	108000d0 	cmplti	r2,r2,3
    b588:	1000101e 	bne	r2,zero,b5cc <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
    b58c:	e0ffff17 	ldw	r3,-4(fp)
    b590:	1805883a 	mov	r2,r3
    b594:	1085883a 	add	r2,r2,r2
    b598:	10c5883a 	add	r2,r2,r3
    b59c:	100490ba 	slli	r2,r2,2
    b5a0:	00c00074 	movhi	r3,1
    b5a4:	10c7883a 	add	r3,r2,r3
    b5a8:	1833ed15 	stw	zero,-12364(r3)
    alt_fd_list[fd].dev      = 0;
    b5ac:	e0ffff17 	ldw	r3,-4(fp)
    b5b0:	1805883a 	mov	r2,r3
    b5b4:	1085883a 	add	r2,r2,r2
    b5b8:	10c5883a 	add	r2,r2,r3
    b5bc:	100490ba 	slli	r2,r2,2
    b5c0:	00c00074 	movhi	r3,1
    b5c4:	10c7883a 	add	r3,r2,r3
    b5c8:	1833eb15 	stw	zero,-12372(r3)
  }
}
    b5cc:	0001883a 	nop
    b5d0:	e037883a 	mov	sp,fp
    b5d4:	df000017 	ldw	fp,0(sp)
    b5d8:	dec00104 	addi	sp,sp,4
    b5dc:	f800283a 	ret

0000b5e0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    b5e0:	defff904 	addi	sp,sp,-28
    b5e4:	df000615 	stw	fp,24(sp)
    b5e8:	df000604 	addi	fp,sp,24
    b5ec:	e13ffa15 	stw	r4,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b5f0:	0005303a 	rdctl	r2,status
    b5f4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b5f8:	e0fffd17 	ldw	r3,-12(fp)
    b5fc:	00bfff84 	movi	r2,-2
    b600:	1884703a 	and	r2,r3,r2
    b604:	1001703a 	wrctl	status,r2
  
  return context;
    b608:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    b60c:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    b610:	d0a00a17 	ldw	r2,-32728(gp)
    b614:	10c000c4 	addi	r3,r2,3
    b618:	00bfff04 	movi	r2,-4
    b61c:	1884703a 	and	r2,r3,r2
    b620:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    b624:	d0e00a17 	ldw	r3,-32728(gp)
    b628:	e0bffa17 	ldw	r2,-24(fp)
    b62c:	1887883a 	add	r3,r3,r2
    b630:	00800074 	movhi	r2,1
    b634:	10800004 	addi	r2,r2,0
    b638:	10c0072e 	bgeu	r2,r3,b658 <sbrk+0x78>
    b63c:	e0bfff17 	ldw	r2,-4(fp)
    b640:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b644:	e0bffc17 	ldw	r2,-16(fp)
    b648:	1001703a 	wrctl	status,r2
#endif
}
    b64c:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    b650:	00bfffc4 	movi	r2,-1
    b654:	00000c06 	br	b688 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    b658:	d0a00a17 	ldw	r2,-32728(gp)
    b65c:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
    b660:	d0e00a17 	ldw	r3,-32728(gp)
    b664:	e0bffa17 	ldw	r2,-24(fp)
    b668:	1885883a 	add	r2,r3,r2
    b66c:	d0a00a15 	stw	r2,-32728(gp)
    b670:	e0bfff17 	ldw	r2,-4(fp)
    b674:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
    b678:	e0bffb17 	ldw	r2,-20(fp)
    b67c:	1001703a 	wrctl	status,r2
}
    b680:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    b684:	e0bffe17 	ldw	r2,-8(fp)
} 
    b688:	e037883a 	mov	sp,fp
    b68c:	df000017 	ldw	fp,0(sp)
    b690:	dec00104 	addi	sp,sp,4
    b694:	f800283a 	ret

0000b698 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    b698:	defffd04 	addi	sp,sp,-12
    b69c:	dfc00215 	stw	ra,8(sp)
    b6a0:	df000115 	stw	fp,4(sp)
    b6a4:	df000104 	addi	fp,sp,4
    b6a8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    b6ac:	e13fff17 	ldw	r4,-4(fp)
    b6b0:	000baec0 	call	baec <alt_busy_sleep>
}
    b6b4:	e037883a 	mov	sp,fp
    b6b8:	dfc00117 	ldw	ra,4(sp)
    b6bc:	df000017 	ldw	fp,0(sp)
    b6c0:	dec00204 	addi	sp,sp,8
    b6c4:	f800283a 	ret

0000b6c8 <alt_get_errno>:
{
    b6c8:	defffe04 	addi	sp,sp,-8
    b6cc:	dfc00115 	stw	ra,4(sp)
    b6d0:	df000015 	stw	fp,0(sp)
    b6d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    b6d8:	d0a00917 	ldw	r2,-32732(gp)
    b6dc:	10000326 	beq	r2,zero,b6ec <alt_get_errno+0x24>
    b6e0:	d0a00917 	ldw	r2,-32732(gp)
    b6e4:	103ee83a 	callr	r2
    b6e8:	00000106 	br	b6f0 <alt_get_errno+0x28>
    b6ec:	d0a29904 	addi	r2,gp,-30108
}
    b6f0:	e037883a 	mov	sp,fp
    b6f4:	dfc00117 	ldw	ra,4(sp)
    b6f8:	df000017 	ldw	fp,0(sp)
    b6fc:	dec00204 	addi	sp,sp,8
    b700:	f800283a 	ret

0000b704 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    b704:	defff904 	addi	sp,sp,-28
    b708:	dfc00615 	stw	ra,24(sp)
    b70c:	df000515 	stw	fp,20(sp)
    b710:	df000504 	addi	fp,sp,20
    b714:	e13ffd15 	stw	r4,-12(fp)
    b718:	e17ffc15 	stw	r5,-16(fp)
    b71c:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b720:	e0bffd17 	ldw	r2,-12(fp)
    b724:	10000916 	blt	r2,zero,b74c <write+0x48>
    b728:	e0fffd17 	ldw	r3,-12(fp)
    b72c:	1805883a 	mov	r2,r3
    b730:	1085883a 	add	r2,r2,r2
    b734:	10c5883a 	add	r2,r2,r3
    b738:	100490ba 	slli	r2,r2,2
    b73c:	00c00074 	movhi	r3,1
    b740:	18f3eb04 	addi	r3,r3,-12372
    b744:	10c5883a 	add	r2,r2,r3
    b748:	00000106 	br	b750 <write+0x4c>
    b74c:	0005883a 	mov	r2,zero
    b750:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
    b754:	e0bfff17 	ldw	r2,-4(fp)
    b758:	10002126 	beq	r2,zero,b7e0 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    b75c:	e0bfff17 	ldw	r2,-4(fp)
    b760:	10800217 	ldw	r2,8(r2)
    b764:	108000cc 	andi	r2,r2,3
    b768:	10001826 	beq	r2,zero,b7cc <write+0xc8>
    b76c:	e0bfff17 	ldw	r2,-4(fp)
    b770:	10800017 	ldw	r2,0(r2)
    b774:	10800617 	ldw	r2,24(r2)
    b778:	10001426 	beq	r2,zero,b7cc <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    b77c:	e0bfff17 	ldw	r2,-4(fp)
    b780:	10800017 	ldw	r2,0(r2)
    b784:	10800617 	ldw	r2,24(r2)
    b788:	e0fffb17 	ldw	r3,-20(fp)
    b78c:	180d883a 	mov	r6,r3
    b790:	e17ffc17 	ldw	r5,-16(fp)
    b794:	e13fff17 	ldw	r4,-4(fp)
    b798:	103ee83a 	callr	r2
    b79c:	e0bffe15 	stw	r2,-8(fp)
    b7a0:	e0bffe17 	ldw	r2,-8(fp)
    b7a4:	1000070e 	bge	r2,zero,b7c4 <write+0xc0>
      {
        ALT_ERRNO = -rval;
    b7a8:	000b6c80 	call	b6c8 <alt_get_errno>
    b7ac:	1007883a 	mov	r3,r2
    b7b0:	e0bffe17 	ldw	r2,-8(fp)
    b7b4:	0085c83a 	sub	r2,zero,r2
    b7b8:	18800015 	stw	r2,0(r3)
        return -1;
    b7bc:	00bfffc4 	movi	r2,-1
    b7c0:	00000c06 	br	b7f4 <write+0xf0>
      }
      return rval;
    b7c4:	e0bffe17 	ldw	r2,-8(fp)
    b7c8:	00000a06 	br	b7f4 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
    b7cc:	000b6c80 	call	b6c8 <alt_get_errno>
    b7d0:	1007883a 	mov	r3,r2
    b7d4:	00800344 	movi	r2,13
    b7d8:	18800015 	stw	r2,0(r3)
    b7dc:	00000406 	br	b7f0 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    b7e0:	000b6c80 	call	b6c8 <alt_get_errno>
    b7e4:	1007883a 	mov	r3,r2
    b7e8:	00801444 	movi	r2,81
    b7ec:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b7f0:	00bfffc4 	movi	r2,-1
}
    b7f4:	e037883a 	mov	sp,fp
    b7f8:	dfc00117 	ldw	ra,4(sp)
    b7fc:	df000017 	ldw	fp,0(sp)
    b800:	dec00204 	addi	sp,sp,8
    b804:	f800283a 	ret

0000b808 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    b808:	defffd04 	addi	sp,sp,-12
    b80c:	dfc00215 	stw	ra,8(sp)
    b810:	df000115 	stw	fp,4(sp)
    b814:	df000104 	addi	fp,sp,4
    b818:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    b81c:	d1600604 	addi	r5,gp,-32744
    b820:	e13fff17 	ldw	r4,-4(fp)
    b824:	000bca00 	call	bca0 <alt_dev_llist_insert>
}
    b828:	e037883a 	mov	sp,fp
    b82c:	dfc00117 	ldw	ra,4(sp)
    b830:	df000017 	ldw	fp,0(sp)
    b834:	dec00204 	addi	sp,sp,8
    b838:	f800283a 	ret

0000b83c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b83c:	defffd04 	addi	sp,sp,-12
    b840:	dfc00215 	stw	ra,8(sp)
    b844:	df000115 	stw	fp,4(sp)
    b848:	df000104 	addi	fp,sp,4
    b84c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    b850:	000c1f80 	call	c1f8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    b854:	00800044 	movi	r2,1
    b858:	1001703a 	wrctl	status,r2
#if defined(NIOS2_EIC_PRESENT) && (NIOS2_NUM_OF_SHADOW_REG_SETS > 0)
    | NIOS2_STATUS_RSIE_MSK
#endif      
      );
}
    b85c:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
    b860:	0001883a 	nop
    b864:	e037883a 	mov	sp,fp
    b868:	dfc00117 	ldw	ra,4(sp)
    b86c:	df000017 	ldw	fp,0(sp)
    b870:	dec00204 	addi	sp,sp,8
    b874:	f800283a 	ret

0000b878 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b878:	defffe04 	addi	sp,sp,-8
    b87c:	dfc00115 	stw	ra,4(sp)
    b880:	df000015 	stw	fp,0(sp)
    b884:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    b888:	01000074 	movhi	r4,1
    b88c:	21344b04 	addi	r4,r4,-11988
    b890:	000b8080 	call	b808 <alt_dev_reg>
}
    b894:	0001883a 	nop
    b898:	e037883a 	mov	sp,fp
    b89c:	dfc00117 	ldw	ra,4(sp)
    b8a0:	df000017 	ldw	fp,0(sp)
    b8a4:	dec00204 	addi	sp,sp,8
    b8a8:	f800283a 	ret

0000b8ac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    b8ac:	defffa04 	addi	sp,sp,-24
    b8b0:	dfc00515 	stw	ra,20(sp)
    b8b4:	df000415 	stw	fp,16(sp)
    b8b8:	df000404 	addi	fp,sp,16
    b8bc:	e13ffe15 	stw	r4,-8(fp)
    b8c0:	e17ffd15 	stw	r5,-12(fp)
    b8c4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b8c8:	e0bffe17 	ldw	r2,-8(fp)
    b8cc:	10800017 	ldw	r2,0(r2)
    b8d0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    b8d4:	e0bfff17 	ldw	r2,-4(fp)
    b8d8:	10c00a04 	addi	r3,r2,40
    b8dc:	e0bffe17 	ldw	r2,-8(fp)
    b8e0:	10800217 	ldw	r2,8(r2)
    b8e4:	100f883a 	mov	r7,r2
    b8e8:	e1bffc17 	ldw	r6,-16(fp)
    b8ec:	e17ffd17 	ldw	r5,-12(fp)
    b8f0:	1809883a 	mov	r4,r3
    b8f4:	000b96c0 	call	b96c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    b8f8:	e037883a 	mov	sp,fp
    b8fc:	dfc00117 	ldw	ra,4(sp)
    b900:	df000017 	ldw	fp,0(sp)
    b904:	dec00204 	addi	sp,sp,8
    b908:	f800283a 	ret

0000b90c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    b90c:	defffa04 	addi	sp,sp,-24
    b910:	dfc00515 	stw	ra,20(sp)
    b914:	df000415 	stw	fp,16(sp)
    b918:	df000404 	addi	fp,sp,16
    b91c:	e13ffe15 	stw	r4,-8(fp)
    b920:	e17ffd15 	stw	r5,-12(fp)
    b924:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    b928:	e0bffe17 	ldw	r2,-8(fp)
    b92c:	10800017 	ldw	r2,0(r2)
    b930:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    b934:	e0bfff17 	ldw	r2,-4(fp)
    b938:	10c00a04 	addi	r3,r2,40
    b93c:	e0bffe17 	ldw	r2,-8(fp)
    b940:	10800217 	ldw	r2,8(r2)
    b944:	100f883a 	mov	r7,r2
    b948:	e1bffc17 	ldw	r6,-16(fp)
    b94c:	e17ffd17 	ldw	r5,-12(fp)
    b950:	1809883a 	mov	r4,r3
    b954:	000ba580 	call	ba58 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    b958:	e037883a 	mov	sp,fp
    b95c:	dfc00117 	ldw	ra,4(sp)
    b960:	df000017 	ldw	fp,0(sp)
    b964:	dec00204 	addi	sp,sp,8
    b968:	f800283a 	ret

0000b96c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    b96c:	defff704 	addi	sp,sp,-36
    b970:	df000815 	stw	fp,32(sp)
    b974:	df000804 	addi	fp,sp,32
    b978:	e13ffb15 	stw	r4,-20(fp)
    b97c:	e17ffa15 	stw	r5,-24(fp)
    b980:	e1bff915 	stw	r6,-28(fp)
    b984:	e1fff815 	stw	r7,-32(fp)
  unsigned int base = sp->base;
    b988:	e0bffb17 	ldw	r2,-20(fp)
    b98c:	10800017 	ldw	r2,0(r2)
    b990:	e0bffe15 	stw	r2,-8(fp)

  char * ptr = buffer;
    b994:	e0bffa17 	ldw	r2,-24(fp)
    b998:	e0bfff15 	stw	r2,-4(fp)
  char * end = buffer + space;
    b99c:	e0bff917 	ldw	r2,-28(fp)
    b9a0:	e0fffa17 	ldw	r3,-24(fp)
    b9a4:	1885883a 	add	r2,r3,r2
    b9a8:	e0bffd15 	stw	r2,-12(fp)

  while (ptr < end)
    b9ac:	00001206 	br	b9f8 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    b9b0:	e0bffe17 	ldw	r2,-8(fp)
    b9b4:	10800037 	ldwio	r2,0(r2)
    b9b8:	e0bffc15 	stw	r2,-16(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    b9bc:	e0bffc17 	ldw	r2,-16(fp)
    b9c0:	10a0000c 	andi	r2,r2,32768
    b9c4:	10000626 	beq	r2,zero,b9e0 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    b9c8:	e0bfff17 	ldw	r2,-4(fp)
    b9cc:	10c00044 	addi	r3,r2,1
    b9d0:	e0ffff15 	stw	r3,-4(fp)
    b9d4:	e0fffc17 	ldw	r3,-16(fp)
    b9d8:	10c00005 	stb	r3,0(r2)
    b9dc:	00000606 	br	b9f8 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    b9e0:	e0ffff17 	ldw	r3,-4(fp)
    b9e4:	e0bffa17 	ldw	r2,-24(fp)
    b9e8:	1880071e 	bne	r3,r2,ba08 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    b9ec:	e0bff817 	ldw	r2,-32(fp)
    b9f0:	1090000c 	andi	r2,r2,16384
    b9f4:	1000061e 	bne	r2,zero,ba10 <altera_avalon_jtag_uart_read+0xa4>
  while (ptr < end)
    b9f8:	e0ffff17 	ldw	r3,-4(fp)
    b9fc:	e0bffd17 	ldw	r2,-12(fp)
    ba00:	18bfeb36 	bltu	r3,r2,b9b0 <altera_avalon_jtag_uart_read+0x44>
    ba04:	00000306 	br	ba14 <altera_avalon_jtag_uart_read+0xa8>
      break;
    ba08:	0001883a 	nop
    ba0c:	00000106 	br	ba14 <altera_avalon_jtag_uart_read+0xa8>
      break;   
    ba10:	0001883a 	nop
    
  }

  if (ptr != buffer)
    ba14:	e0ffff17 	ldw	r3,-4(fp)
    ba18:	e0bffa17 	ldw	r2,-24(fp)
    ba1c:	18800426 	beq	r3,r2,ba30 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    ba20:	e0ffff17 	ldw	r3,-4(fp)
    ba24:	e0bffa17 	ldw	r2,-24(fp)
    ba28:	1885c83a 	sub	r2,r3,r2
    ba2c:	00000606 	br	ba48 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    ba30:	e0bff817 	ldw	r2,-32(fp)
    ba34:	1090000c 	andi	r2,r2,16384
    ba38:	10000226 	beq	r2,zero,ba44 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    ba3c:	00bffd44 	movi	r2,-11
    ba40:	00000106 	br	ba48 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    ba44:	00bffec4 	movi	r2,-5
}
    ba48:	e037883a 	mov	sp,fp
    ba4c:	df000017 	ldw	fp,0(sp)
    ba50:	dec00104 	addi	sp,sp,4
    ba54:	f800283a 	ret

0000ba58 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    ba58:	defff904 	addi	sp,sp,-28
    ba5c:	df000615 	stw	fp,24(sp)
    ba60:	df000604 	addi	fp,sp,24
    ba64:	e13ffd15 	stw	r4,-12(fp)
    ba68:	e17ffc15 	stw	r5,-16(fp)
    ba6c:	e1bffb15 	stw	r6,-20(fp)
    ba70:	e1fffa15 	stw	r7,-24(fp)
  unsigned int base = sp->base;
    ba74:	e0bffd17 	ldw	r2,-12(fp)
    ba78:	10800017 	ldw	r2,0(r2)
    ba7c:	e0bfff15 	stw	r2,-4(fp)

  const char * end = ptr + count;
    ba80:	e0bffb17 	ldw	r2,-20(fp)
    ba84:	e0fffc17 	ldw	r3,-16(fp)
    ba88:	1885883a 	add	r2,r3,r2
    ba8c:	e0bffe15 	stw	r2,-8(fp)

  while (ptr < end)
    ba90:	00000e06 	br	bacc <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    ba94:	e0bfff17 	ldw	r2,-4(fp)
    ba98:	10800104 	addi	r2,r2,4
    ba9c:	10800037 	ldwio	r2,0(r2)
    baa0:	10bfffec 	andhi	r2,r2,65535
    baa4:	10000926 	beq	r2,zero,bacc <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    baa8:	e0ffff17 	ldw	r3,-4(fp)
    baac:	e0bffc17 	ldw	r2,-16(fp)
    bab0:	11000044 	addi	r4,r2,1
    bab4:	e13ffc15 	stw	r4,-16(fp)
    bab8:	10800003 	ldbu	r2,0(r2)
    babc:	10803fcc 	andi	r2,r2,255
    bac0:	1080201c 	xori	r2,r2,128
    bac4:	10bfe004 	addi	r2,r2,-128
    bac8:	18800035 	stwio	r2,0(r3)
  while (ptr < end)
    bacc:	e0fffc17 	ldw	r3,-16(fp)
    bad0:	e0bffe17 	ldw	r2,-8(fp)
    bad4:	18bfef36 	bltu	r3,r2,ba94 <altera_avalon_jtag_uart_write+0x3c>

  return count;
    bad8:	e0bffb17 	ldw	r2,-20(fp)
}
    badc:	e037883a 	mov	sp,fp
    bae0:	df000017 	ldw	fp,0(sp)
    bae4:	dec00104 	addi	sp,sp,4
    bae8:	f800283a 	ret

0000baec <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    baec:	defffa04 	addi	sp,sp,-24
    baf0:	dfc00515 	stw	ra,20(sp)
    baf4:	df000415 	stw	fp,16(sp)
    baf8:	df000404 	addi	fp,sp,16
    bafc:	e13ffc15 	stw	r4,-16(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    bb00:	00800244 	movi	r2,9
    bb04:	e0bffe15 	stw	r2,-8(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    bb08:	014003f4 	movhi	r5,15
    bb0c:	29509004 	addi	r5,r5,16960
    bb10:	e13ffe17 	ldw	r4,-8(fp)
    bb14:	00083300 	call	8330 <__mulsi3>
    bb18:	100b883a 	mov	r5,r2
    bb1c:	0100bef4 	movhi	r4,763
    bb20:	213c2004 	addi	r4,r4,-3968
    bb24:	00082700 	call	8270 <__udivsi3>
  big_loops = us / (INT_MAX/
    bb28:	100b883a 	mov	r5,r2
    bb2c:	01200034 	movhi	r4,32768
    bb30:	213fffc4 	addi	r4,r4,-1
    bb34:	00082700 	call	8270 <__udivsi3>
    bb38:	100b883a 	mov	r5,r2
    bb3c:	e13ffc17 	ldw	r4,-16(fp)
    bb40:	00082700 	call	8270 <__udivsi3>
    bb44:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
    bb48:	e0bffd17 	ldw	r2,-12(fp)
    bb4c:	10002a26 	beq	r2,zero,bbf8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    bb50:	e03fff15 	stw	zero,-4(fp)
    bb54:	00001706 	br	bbb4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    bb58:	00a00034 	movhi	r2,32768
    bb5c:	10bfffc4 	addi	r2,r2,-1
    bb60:	10bfffc4 	addi	r2,r2,-1
    bb64:	103ffe1e 	bne	r2,zero,bb60 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    bb68:	014003f4 	movhi	r5,15
    bb6c:	29509004 	addi	r5,r5,16960
    bb70:	e13ffe17 	ldw	r4,-8(fp)
    bb74:	00083300 	call	8330 <__mulsi3>
      us -= (INT_MAX/(ALT_CPU_FREQ/
    bb78:	100b883a 	mov	r5,r2
    bb7c:	0100bef4 	movhi	r4,763
    bb80:	213c2004 	addi	r4,r4,-3968
    bb84:	00082700 	call	8270 <__udivsi3>
    bb88:	100b883a 	mov	r5,r2
    bb8c:	01200034 	movhi	r4,32768
    bb90:	213fffc4 	addi	r4,r4,-1
    bb94:	00082700 	call	8270 <__udivsi3>
    bb98:	1007883a 	mov	r3,r2
    bb9c:	e0bffc17 	ldw	r2,-16(fp)
    bba0:	10c5c83a 	sub	r2,r2,r3
    bba4:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
    bba8:	e0bfff17 	ldw	r2,-4(fp)
    bbac:	10800044 	addi	r2,r2,1
    bbb0:	e0bfff15 	stw	r2,-4(fp)
    bbb4:	e0ffff17 	ldw	r3,-4(fp)
    bbb8:	e0bffd17 	ldw	r2,-12(fp)
    bbbc:	18bfe616 	blt	r3,r2,bb58 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    bbc0:	014003f4 	movhi	r5,15
    bbc4:	29509004 	addi	r5,r5,16960
    bbc8:	e13ffe17 	ldw	r4,-8(fp)
    bbcc:	00083300 	call	8330 <__mulsi3>
    bbd0:	100b883a 	mov	r5,r2
    bbd4:	0100bef4 	movhi	r4,763
    bbd8:	213c2004 	addi	r4,r4,-3968
    bbdc:	00082700 	call	8270 <__udivsi3>
    bbe0:	e17ffc17 	ldw	r5,-16(fp)
    bbe4:	1009883a 	mov	r4,r2
    bbe8:	00083300 	call	8330 <__mulsi3>
    __asm__ volatile (
    bbec:	10bfffc4 	addi	r2,r2,-1
    bbf0:	103ffe1e 	bne	r2,zero,bbec <alt_busy_sleep+0x100>
    bbf4:	00000d06 	br	bc2c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    bbf8:	014003f4 	movhi	r5,15
    bbfc:	29509004 	addi	r5,r5,16960
    bc00:	e13ffe17 	ldw	r4,-8(fp)
    bc04:	00083300 	call	8330 <__mulsi3>
    bc08:	100b883a 	mov	r5,r2
    bc0c:	0100bef4 	movhi	r4,763
    bc10:	213c2004 	addi	r4,r4,-3968
    bc14:	00082700 	call	8270 <__udivsi3>
    bc18:	e17ffc17 	ldw	r5,-16(fp)
    bc1c:	1009883a 	mov	r4,r2
    bc20:	00083300 	call	8330 <__mulsi3>
    __asm__ volatile (
    bc24:	10bfffc4 	addi	r2,r2,-1
    bc28:	00bffe16 	blt	zero,r2,bc24 <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    bc2c:	0005883a 	mov	r2,zero
}
    bc30:	e037883a 	mov	sp,fp
    bc34:	dfc00117 	ldw	ra,4(sp)
    bc38:	df000017 	ldw	fp,0(sp)
    bc3c:	dec00204 	addi	sp,sp,8
    bc40:	f800283a 	ret

0000bc44 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    bc44:	deffff04 	addi	sp,sp,-4
    bc48:	df000015 	stw	fp,0(sp)
    bc4c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    bc50:	0001883a 	nop
    bc54:	e037883a 	mov	sp,fp
    bc58:	df000017 	ldw	fp,0(sp)
    bc5c:	dec00104 	addi	sp,sp,4
    bc60:	f800283a 	ret

0000bc64 <alt_get_errno>:
{
    bc64:	defffe04 	addi	sp,sp,-8
    bc68:	dfc00115 	stw	ra,4(sp)
    bc6c:	df000015 	stw	fp,0(sp)
    bc70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    bc74:	d0a00917 	ldw	r2,-32732(gp)
    bc78:	10000326 	beq	r2,zero,bc88 <alt_get_errno+0x24>
    bc7c:	d0a00917 	ldw	r2,-32732(gp)
    bc80:	103ee83a 	callr	r2
    bc84:	00000106 	br	bc8c <alt_get_errno+0x28>
    bc88:	d0a29904 	addi	r2,gp,-30108
}
    bc8c:	e037883a 	mov	sp,fp
    bc90:	dfc00117 	ldw	ra,4(sp)
    bc94:	df000017 	ldw	fp,0(sp)
    bc98:	dec00204 	addi	sp,sp,8
    bc9c:	f800283a 	ret

0000bca0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    bca0:	defffa04 	addi	sp,sp,-24
    bca4:	dfc00515 	stw	ra,20(sp)
    bca8:	df000415 	stw	fp,16(sp)
    bcac:	df000404 	addi	fp,sp,16
    bcb0:	e13ffd15 	stw	r4,-12(fp)
    bcb4:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    bcb8:	e0bffd17 	ldw	r2,-12(fp)
    bcbc:	10000326 	beq	r2,zero,bccc <alt_dev_llist_insert+0x2c>
    bcc0:	e0bffd17 	ldw	r2,-12(fp)
    bcc4:	10800217 	ldw	r2,8(r2)
    bcc8:	1000061e 	bne	r2,zero,bce4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    bccc:	000bc640 	call	bc64 <alt_get_errno>
    bcd0:	1007883a 	mov	r3,r2
    bcd4:	00800584 	movi	r2,22
    bcd8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    bcdc:	00bffa84 	movi	r2,-22
    bce0:	00001406 	br	bd34 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    bce4:	e0bffd17 	ldw	r2,-12(fp)
    bce8:	e0fffc17 	ldw	r3,-16(fp)
    bcec:	e0ffff15 	stw	r3,-4(fp)
    bcf0:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    bcf4:	e0bffe17 	ldw	r2,-8(fp)
    bcf8:	e0ffff17 	ldw	r3,-4(fp)
    bcfc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    bd00:	e0bfff17 	ldw	r2,-4(fp)
    bd04:	10c00017 	ldw	r3,0(r2)
    bd08:	e0bffe17 	ldw	r2,-8(fp)
    bd0c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    bd10:	e0bfff17 	ldw	r2,-4(fp)
    bd14:	10800017 	ldw	r2,0(r2)
    bd18:	e0fffe17 	ldw	r3,-8(fp)
    bd1c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    bd20:	e0bfff17 	ldw	r2,-4(fp)
    bd24:	e0fffe17 	ldw	r3,-8(fp)
    bd28:	10c00015 	stw	r3,0(r2)
}
    bd2c:	0001883a 	nop

  return 0;  
    bd30:	0005883a 	mov	r2,zero
}
    bd34:	e037883a 	mov	sp,fp
    bd38:	dfc00117 	ldw	ra,4(sp)
    bd3c:	df000017 	ldw	fp,0(sp)
    bd40:	dec00204 	addi	sp,sp,8
    bd44:	f800283a 	ret

0000bd48 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    bd48:	defffd04 	addi	sp,sp,-12
    bd4c:	dfc00215 	stw	ra,8(sp)
    bd50:	df000115 	stw	fp,4(sp)
    bd54:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    bd58:	00800074 	movhi	r2,1
    bd5c:	10b1c404 	addi	r2,r2,-14576
    bd60:	e0bfff15 	stw	r2,-4(fp)
    bd64:	00000606 	br	bd80 <_do_ctors+0x38>
        (*ctor) (); 
    bd68:	e0bfff17 	ldw	r2,-4(fp)
    bd6c:	10800017 	ldw	r2,0(r2)
    bd70:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    bd74:	e0bfff17 	ldw	r2,-4(fp)
    bd78:	10bfff04 	addi	r2,r2,-4
    bd7c:	e0bfff15 	stw	r2,-4(fp)
    bd80:	e0ffff17 	ldw	r3,-4(fp)
    bd84:	00800074 	movhi	r2,1
    bd88:	10b1c504 	addi	r2,r2,-14572
    bd8c:	18bff62e 	bgeu	r3,r2,bd68 <_do_ctors+0x20>
}
    bd90:	0001883a 	nop
    bd94:	0001883a 	nop
    bd98:	e037883a 	mov	sp,fp
    bd9c:	dfc00117 	ldw	ra,4(sp)
    bda0:	df000017 	ldw	fp,0(sp)
    bda4:	dec00204 	addi	sp,sp,8
    bda8:	f800283a 	ret

0000bdac <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    bdac:	defffd04 	addi	sp,sp,-12
    bdb0:	dfc00215 	stw	ra,8(sp)
    bdb4:	df000115 	stw	fp,4(sp)
    bdb8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    bdbc:	00800074 	movhi	r2,1
    bdc0:	10b1c404 	addi	r2,r2,-14576
    bdc4:	e0bfff15 	stw	r2,-4(fp)
    bdc8:	00000606 	br	bde4 <_do_dtors+0x38>
        (*dtor) (); 
    bdcc:	e0bfff17 	ldw	r2,-4(fp)
    bdd0:	10800017 	ldw	r2,0(r2)
    bdd4:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    bdd8:	e0bfff17 	ldw	r2,-4(fp)
    bddc:	10bfff04 	addi	r2,r2,-4
    bde0:	e0bfff15 	stw	r2,-4(fp)
    bde4:	e0ffff17 	ldw	r3,-4(fp)
    bde8:	00800074 	movhi	r2,1
    bdec:	10b1c504 	addi	r2,r2,-14572
    bdf0:	18bff62e 	bgeu	r3,r2,bdcc <_do_dtors+0x20>
}
    bdf4:	0001883a 	nop
    bdf8:	0001883a 	nop
    bdfc:	e037883a 	mov	sp,fp
    be00:	dfc00117 	ldw	ra,4(sp)
    be04:	df000017 	ldw	fp,0(sp)
    be08:	dec00204 	addi	sp,sp,8
    be0c:	f800283a 	ret

0000be10 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    be10:	deffff04 	addi	sp,sp,-4
    be14:	df000015 	stw	fp,0(sp)
    be18:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    be1c:	0001883a 	nop
    be20:	e037883a 	mov	sp,fp
    be24:	df000017 	ldw	fp,0(sp)
    be28:	dec00104 	addi	sp,sp,4
    be2c:	f800283a 	ret

0000be30 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    be30:	defff904 	addi	sp,sp,-28
    be34:	dfc00615 	stw	ra,24(sp)
    be38:	df000515 	stw	fp,20(sp)
    be3c:	df000504 	addi	fp,sp,20
    be40:	e13ffe15 	stw	r4,-8(fp)
    be44:	e17ffd15 	stw	r5,-12(fp)
    be48:	e1bffc15 	stw	r6,-16(fp)
    be4c:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
    be50:	e1bffb17 	ldw	r6,-20(fp)
    be54:	e17ffc17 	ldw	r5,-16(fp)
    be58:	e13ffd17 	ldw	r4,-12(fp)
    be5c:	000c0980 	call	c098 <open>
    be60:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
    be64:	e0bfff17 	ldw	r2,-4(fp)
    be68:	10002016 	blt	r2,zero,beec <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
    be6c:	e0ffff17 	ldw	r3,-4(fp)
    be70:	1805883a 	mov	r2,r3
    be74:	1085883a 	add	r2,r2,r2
    be78:	10c5883a 	add	r2,r2,r3
    be7c:	100490ba 	slli	r2,r2,2
    be80:	00c00074 	movhi	r3,1
    be84:	10c7883a 	add	r3,r2,r3
    be88:	18f3eb17 	ldw	r3,-12372(r3)
    be8c:	e0bffe17 	ldw	r2,-8(fp)
    be90:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    be94:	e0ffff17 	ldw	r3,-4(fp)
    be98:	1805883a 	mov	r2,r3
    be9c:	1085883a 	add	r2,r2,r2
    bea0:	10c5883a 	add	r2,r2,r3
    bea4:	100490ba 	slli	r2,r2,2
    bea8:	00c00074 	movhi	r3,1
    beac:	10c7883a 	add	r3,r2,r3
    beb0:	18f3ec17 	ldw	r3,-12368(r3)
    beb4:	e0bffe17 	ldw	r2,-8(fp)
    beb8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    bebc:	e0ffff17 	ldw	r3,-4(fp)
    bec0:	1805883a 	mov	r2,r3
    bec4:	1085883a 	add	r2,r2,r2
    bec8:	10c5883a 	add	r2,r2,r3
    becc:	100490ba 	slli	r2,r2,2
    bed0:	00c00074 	movhi	r3,1
    bed4:	10c7883a 	add	r3,r2,r3
    bed8:	18f3ed17 	ldw	r3,-12364(r3)
    bedc:	e0bffe17 	ldw	r2,-8(fp)
    bee0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    bee4:	e13fff17 	ldw	r4,-4(fp)
    bee8:	000b5700 	call	b570 <alt_release_fd>
  }
} 
    beec:	0001883a 	nop
    bef0:	e037883a 	mov	sp,fp
    bef4:	dfc00117 	ldw	ra,4(sp)
    bef8:	df000017 	ldw	fp,0(sp)
    befc:	dec00204 	addi	sp,sp,8
    bf00:	f800283a 	ret

0000bf04 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    bf04:	defffb04 	addi	sp,sp,-20
    bf08:	dfc00415 	stw	ra,16(sp)
    bf0c:	df000315 	stw	fp,12(sp)
    bf10:	df000304 	addi	fp,sp,12
    bf14:	e13fff15 	stw	r4,-4(fp)
    bf18:	e17ffe15 	stw	r5,-8(fp)
    bf1c:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    bf20:	01c07fc4 	movi	r7,511
    bf24:	01800044 	movi	r6,1
    bf28:	e17fff17 	ldw	r5,-4(fp)
    bf2c:	01000074 	movhi	r4,1
    bf30:	2133ee04 	addi	r4,r4,-12360
    bf34:	000be300 	call	be30 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    bf38:	01c07fc4 	movi	r7,511
    bf3c:	000d883a 	mov	r6,zero
    bf40:	e17ffe17 	ldw	r5,-8(fp)
    bf44:	01000074 	movhi	r4,1
    bf48:	2133eb04 	addi	r4,r4,-12372
    bf4c:	000be300 	call	be30 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    bf50:	01c07fc4 	movi	r7,511
    bf54:	01800044 	movi	r6,1
    bf58:	e17ffd17 	ldw	r5,-12(fp)
    bf5c:	01000074 	movhi	r4,1
    bf60:	2133f104 	addi	r4,r4,-12348
    bf64:	000be300 	call	be30 <alt_open_fd>
}  
    bf68:	0001883a 	nop
    bf6c:	e037883a 	mov	sp,fp
    bf70:	dfc00117 	ldw	ra,4(sp)
    bf74:	df000017 	ldw	fp,0(sp)
    bf78:	dec00204 	addi	sp,sp,8
    bf7c:	f800283a 	ret

0000bf80 <alt_get_errno>:
{
    bf80:	defffe04 	addi	sp,sp,-8
    bf84:	dfc00115 	stw	ra,4(sp)
    bf88:	df000015 	stw	fp,0(sp)
    bf8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    bf90:	d0a00917 	ldw	r2,-32732(gp)
    bf94:	10000326 	beq	r2,zero,bfa4 <alt_get_errno+0x24>
    bf98:	d0a00917 	ldw	r2,-32732(gp)
    bf9c:	103ee83a 	callr	r2
    bfa0:	00000106 	br	bfa8 <alt_get_errno+0x28>
    bfa4:	d0a29904 	addi	r2,gp,-30108
}
    bfa8:	e037883a 	mov	sp,fp
    bfac:	dfc00117 	ldw	ra,4(sp)
    bfb0:	df000017 	ldw	fp,0(sp)
    bfb4:	dec00204 	addi	sp,sp,8
    bfb8:	f800283a 	ret

0000bfbc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    bfbc:	defffd04 	addi	sp,sp,-12
    bfc0:	df000215 	stw	fp,8(sp)
    bfc4:	df000204 	addi	fp,sp,8
    bfc8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    bfcc:	e0bffe17 	ldw	r2,-8(fp)
    bfd0:	10800217 	ldw	r2,8(r2)
    bfd4:	10d00034 	orhi	r3,r2,16384
    bfd8:	e0bffe17 	ldw	r2,-8(fp)
    bfdc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bfe0:	e03fff15 	stw	zero,-4(fp)
    bfe4:	00002306 	br	c074 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    bfe8:	e0ffff17 	ldw	r3,-4(fp)
    bfec:	1805883a 	mov	r2,r3
    bff0:	1085883a 	add	r2,r2,r2
    bff4:	10c5883a 	add	r2,r2,r3
    bff8:	100490ba 	slli	r2,r2,2
    bffc:	00c00074 	movhi	r3,1
    c000:	10c7883a 	add	r3,r2,r3
    c004:	18f3eb17 	ldw	r3,-12372(r3)
    c008:	e0bffe17 	ldw	r2,-8(fp)
    c00c:	10800017 	ldw	r2,0(r2)
    c010:	1880151e 	bne	r3,r2,c068 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c014:	e0ffff17 	ldw	r3,-4(fp)
    c018:	1805883a 	mov	r2,r3
    c01c:	1085883a 	add	r2,r2,r2
    c020:	10c5883a 	add	r2,r2,r3
    c024:	100490ba 	slli	r2,r2,2
    c028:	00c00074 	movhi	r3,1
    c02c:	10c7883a 	add	r3,r2,r3
    c030:	18b3ed17 	ldw	r2,-12364(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
    c034:	10000c0e 	bge	r2,zero,c068 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
    c038:	e0ffff17 	ldw	r3,-4(fp)
    c03c:	1805883a 	mov	r2,r3
    c040:	1085883a 	add	r2,r2,r2
    c044:	10c5883a 	add	r2,r2,r3
    c048:	100490ba 	slli	r2,r2,2
    c04c:	00c00074 	movhi	r3,1
    c050:	18f3eb04 	addi	r3,r3,-12372
    c054:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    c058:	e0fffe17 	ldw	r3,-8(fp)
    c05c:	18800226 	beq	r3,r2,c068 <alt_file_locked+0xac>
    {
      return -EACCES;
    c060:	00bffcc4 	movi	r2,-13
    c064:	00000806 	br	c088 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
    c068:	e0bfff17 	ldw	r2,-4(fp)
    c06c:	10800044 	addi	r2,r2,1
    c070:	e0bfff15 	stw	r2,-4(fp)
    c074:	d0a00817 	ldw	r2,-32736(gp)
    c078:	1007883a 	mov	r3,r2
    c07c:	e0bfff17 	ldw	r2,-4(fp)
    c080:	18bfd92e 	bgeu	r3,r2,bfe8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    c084:	0005883a 	mov	r2,zero
}
    c088:	e037883a 	mov	sp,fp
    c08c:	df000017 	ldw	fp,0(sp)
    c090:	dec00104 	addi	sp,sp,4
    c094:	f800283a 	ret

0000c098 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    c098:	defff604 	addi	sp,sp,-40
    c09c:	dfc00915 	stw	ra,36(sp)
    c0a0:	df000815 	stw	fp,32(sp)
    c0a4:	df000804 	addi	fp,sp,32
    c0a8:	e13ffa15 	stw	r4,-24(fp)
    c0ac:	e17ff915 	stw	r5,-28(fp)
    c0b0:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    c0b4:	00bfffc4 	movi	r2,-1
    c0b8:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
    c0bc:	00bffb44 	movi	r2,-19
    c0c0:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
    c0c4:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    c0c8:	d1600604 	addi	r5,gp,-32744
    c0cc:	e13ffa17 	ldw	r4,-24(fp)
    c0d0:	000c21c0 	call	c21c <alt_find_dev>
    c0d4:	e0bfff15 	stw	r2,-4(fp)
    c0d8:	e0bfff17 	ldw	r2,-4(fp)
    c0dc:	1000051e 	bne	r2,zero,c0f4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    c0e0:	e13ffa17 	ldw	r4,-24(fp)
    c0e4:	000c2ac0 	call	c2ac <alt_find_file>
    c0e8:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
    c0ec:	00800044 	movi	r2,1
    c0f0:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    c0f4:	e0bfff17 	ldw	r2,-4(fp)
    c0f8:	10002c26 	beq	r2,zero,c1ac <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    c0fc:	e13fff17 	ldw	r4,-4(fp)
    c100:	000c3b40 	call	c3b4 <alt_get_fd>
    c104:	e0bffe15 	stw	r2,-8(fp)
    c108:	e0bffe17 	ldw	r2,-8(fp)
    c10c:	1000030e 	bge	r2,zero,c11c <open+0x84>
    {
      status = index;
    c110:	e0bffe17 	ldw	r2,-8(fp)
    c114:	e0bffd15 	stw	r2,-12(fp)
    c118:	00002606 	br	c1b4 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    c11c:	e0fffe17 	ldw	r3,-8(fp)
    c120:	1805883a 	mov	r2,r3
    c124:	1085883a 	add	r2,r2,r2
    c128:	10c5883a 	add	r2,r2,r3
    c12c:	100490ba 	slli	r2,r2,2
    c130:	00c00074 	movhi	r3,1
    c134:	18f3eb04 	addi	r3,r3,-12372
    c138:	10c5883a 	add	r2,r2,r3
    c13c:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    c140:	e0fff917 	ldw	r3,-28(fp)
    c144:	00900034 	movhi	r2,16384
    c148:	10bfffc4 	addi	r2,r2,-1
    c14c:	1886703a 	and	r3,r3,r2
    c150:	e0bffb17 	ldw	r2,-20(fp)
    c154:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    c158:	e0bffc17 	ldw	r2,-16(fp)
    c15c:	1000051e 	bne	r2,zero,c174 <open+0xdc>
    c160:	e13ffb17 	ldw	r4,-20(fp)
    c164:	000bfbc0 	call	bfbc <alt_file_locked>
    c168:	e0bffd15 	stw	r2,-12(fp)
    c16c:	e0bffd17 	ldw	r2,-12(fp)
    c170:	10001016 	blt	r2,zero,c1b4 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    c174:	e0bfff17 	ldw	r2,-4(fp)
    c178:	10800317 	ldw	r2,12(r2)
    c17c:	10000826 	beq	r2,zero,c1a0 <open+0x108>
    c180:	e0bfff17 	ldw	r2,-4(fp)
    c184:	10800317 	ldw	r2,12(r2)
    c188:	e1fff817 	ldw	r7,-32(fp)
    c18c:	e1bff917 	ldw	r6,-28(fp)
    c190:	e17ffa17 	ldw	r5,-24(fp)
    c194:	e13ffb17 	ldw	r4,-20(fp)
    c198:	103ee83a 	callr	r2
    c19c:	00000106 	br	c1a4 <open+0x10c>
    c1a0:	0005883a 	mov	r2,zero
    c1a4:	e0bffd15 	stw	r2,-12(fp)
    c1a8:	00000206 	br	c1b4 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    c1ac:	00bffb44 	movi	r2,-19
    c1b0:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    c1b4:	e0bffd17 	ldw	r2,-12(fp)
    c1b8:	1000090e 	bge	r2,zero,c1e0 <open+0x148>
  {
    alt_release_fd (index);  
    c1bc:	e13ffe17 	ldw	r4,-8(fp)
    c1c0:	000b5700 	call	b570 <alt_release_fd>
    ALT_ERRNO = -status;
    c1c4:	000bf800 	call	bf80 <alt_get_errno>
    c1c8:	1007883a 	mov	r3,r2
    c1cc:	e0bffd17 	ldw	r2,-12(fp)
    c1d0:	0085c83a 	sub	r2,zero,r2
    c1d4:	18800015 	stw	r2,0(r3)
    return -1;
    c1d8:	00bfffc4 	movi	r2,-1
    c1dc:	00000106 	br	c1e4 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
    c1e0:	e0bffe17 	ldw	r2,-8(fp)
}
    c1e4:	e037883a 	mov	sp,fp
    c1e8:	dfc00117 	ldw	ra,4(sp)
    c1ec:	df000017 	ldw	fp,0(sp)
    c1f0:	dec00204 	addi	sp,sp,8
    c1f4:	f800283a 	ret

0000c1f8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    c1f8:	deffff04 	addi	sp,sp,-4
    c1fc:	df000015 	stw	fp,0(sp)
    c200:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c204:	000170fa 	wrctl	ienable,zero
}
    c208:	0001883a 	nop
    c20c:	e037883a 	mov	sp,fp
    c210:	df000017 	ldw	fp,0(sp)
    c214:	dec00104 	addi	sp,sp,4
    c218:	f800283a 	ret

0000c21c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c21c:	defffa04 	addi	sp,sp,-24
    c220:	dfc00515 	stw	ra,20(sp)
    c224:	df000415 	stw	fp,16(sp)
    c228:	df000404 	addi	fp,sp,16
    c22c:	e13ffd15 	stw	r4,-12(fp)
    c230:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c234:	e0bffc17 	ldw	r2,-16(fp)
    c238:	10800017 	ldw	r2,0(r2)
    c23c:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c240:	e13ffd17 	ldw	r4,-12(fp)
    c244:	00084340 	call	8434 <strlen>
    c248:	10800044 	addi	r2,r2,1
    c24c:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c250:	00000d06 	br	c288 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    c254:	e0bfff17 	ldw	r2,-4(fp)
    c258:	10800217 	ldw	r2,8(r2)
    c25c:	e0fffe17 	ldw	r3,-8(fp)
    c260:	180d883a 	mov	r6,r3
    c264:	e17ffd17 	ldw	r5,-12(fp)
    c268:	1009883a 	mov	r4,r2
    c26c:	000c4b40 	call	c4b4 <memcmp>
    c270:	1000021e 	bne	r2,zero,c27c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    c274:	e0bfff17 	ldw	r2,-4(fp)
    c278:	00000706 	br	c298 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    c27c:	e0bfff17 	ldw	r2,-4(fp)
    c280:	10800017 	ldw	r2,0(r2)
    c284:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
    c288:	e0ffff17 	ldw	r3,-4(fp)
    c28c:	e0bffc17 	ldw	r2,-16(fp)
    c290:	18bff01e 	bne	r3,r2,c254 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
    c294:	0005883a 	mov	r2,zero
}
    c298:	e037883a 	mov	sp,fp
    c29c:	dfc00117 	ldw	ra,4(sp)
    c2a0:	df000017 	ldw	fp,0(sp)
    c2a4:	dec00204 	addi	sp,sp,8
    c2a8:	f800283a 	ret

0000c2ac <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    c2ac:	defffb04 	addi	sp,sp,-20
    c2b0:	dfc00415 	stw	ra,16(sp)
    c2b4:	df000315 	stw	fp,12(sp)
    c2b8:	df000304 	addi	fp,sp,12
    c2bc:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    c2c0:	d0a00417 	ldw	r2,-32752(gp)
    c2c4:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c2c8:	00003106 	br	c390 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    c2cc:	e0bfff17 	ldw	r2,-4(fp)
    c2d0:	10800217 	ldw	r2,8(r2)
    c2d4:	1009883a 	mov	r4,r2
    c2d8:	00084340 	call	8434 <strlen>
    c2dc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    c2e0:	e0bfff17 	ldw	r2,-4(fp)
    c2e4:	10c00217 	ldw	r3,8(r2)
    c2e8:	e0bffe17 	ldw	r2,-8(fp)
    c2ec:	10bfffc4 	addi	r2,r2,-1
    c2f0:	1885883a 	add	r2,r3,r2
    c2f4:	10800003 	ldbu	r2,0(r2)
    c2f8:	10803fcc 	andi	r2,r2,255
    c2fc:	1080201c 	xori	r2,r2,128
    c300:	10bfe004 	addi	r2,r2,-128
    c304:	10800bd8 	cmpnei	r2,r2,47
    c308:	1000031e 	bne	r2,zero,c318 <alt_find_file+0x6c>
    {
      len -= 1;
    c30c:	e0bffe17 	ldw	r2,-8(fp)
    c310:	10bfffc4 	addi	r2,r2,-1
    c314:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c318:	e0bffe17 	ldw	r2,-8(fp)
    c31c:	e0fffd17 	ldw	r3,-12(fp)
    c320:	1885883a 	add	r2,r3,r2
    c324:	10800003 	ldbu	r2,0(r2)
    c328:	10803fcc 	andi	r2,r2,255
    c32c:	1080201c 	xori	r2,r2,128
    c330:	10bfe004 	addi	r2,r2,-128
    c334:	10800be0 	cmpeqi	r2,r2,47
    c338:	1000081e 	bne	r2,zero,c35c <alt_find_file+0xb0>
    c33c:	e0bffe17 	ldw	r2,-8(fp)
    c340:	e0fffd17 	ldw	r3,-12(fp)
    c344:	1885883a 	add	r2,r3,r2
    c348:	10800003 	ldbu	r2,0(r2)
    c34c:	10803fcc 	andi	r2,r2,255
    c350:	1080201c 	xori	r2,r2,128
    c354:	10bfe004 	addi	r2,r2,-128
    c358:	10000a1e 	bne	r2,zero,c384 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    c35c:	e0bfff17 	ldw	r2,-4(fp)
    c360:	10800217 	ldw	r2,8(r2)
    c364:	e0fffe17 	ldw	r3,-8(fp)
    c368:	180d883a 	mov	r6,r3
    c36c:	e17ffd17 	ldw	r5,-12(fp)
    c370:	1009883a 	mov	r4,r2
    c374:	000c4b40 	call	c4b4 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
    c378:	1000021e 	bne	r2,zero,c384 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
    c37c:	e0bfff17 	ldw	r2,-4(fp)
    c380:	00000706 	br	c3a0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    c384:	e0bfff17 	ldw	r2,-4(fp)
    c388:	10800017 	ldw	r2,0(r2)
    c38c:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
    c390:	e0ffff17 	ldw	r3,-4(fp)
    c394:	d0a00404 	addi	r2,gp,-32752
    c398:	18bfcc1e 	bne	r3,r2,c2cc <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
    c39c:	0005883a 	mov	r2,zero
}
    c3a0:	e037883a 	mov	sp,fp
    c3a4:	dfc00117 	ldw	ra,4(sp)
    c3a8:	df000017 	ldw	fp,0(sp)
    c3ac:	dec00204 	addi	sp,sp,8
    c3b0:	f800283a 	ret

0000c3b4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    c3b4:	defffc04 	addi	sp,sp,-16
    c3b8:	df000315 	stw	fp,12(sp)
    c3bc:	df000304 	addi	fp,sp,12
    c3c0:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
    c3c4:	00bffa04 	movi	r2,-24
    c3c8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c3cc:	e03fff15 	stw	zero,-4(fp)
    c3d0:	00001d06 	br	c448 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    c3d4:	e0ffff17 	ldw	r3,-4(fp)
    c3d8:	1805883a 	mov	r2,r3
    c3dc:	1085883a 	add	r2,r2,r2
    c3e0:	10c5883a 	add	r2,r2,r3
    c3e4:	100490ba 	slli	r2,r2,2
    c3e8:	00c00074 	movhi	r3,1
    c3ec:	10c7883a 	add	r3,r2,r3
    c3f0:	18b3eb17 	ldw	r2,-12372(r3)
    c3f4:	1000111e 	bne	r2,zero,c43c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    c3f8:	e0ffff17 	ldw	r3,-4(fp)
    c3fc:	1805883a 	mov	r2,r3
    c400:	1085883a 	add	r2,r2,r2
    c404:	10c5883a 	add	r2,r2,r3
    c408:	100490ba 	slli	r2,r2,2
    c40c:	e13ffd17 	ldw	r4,-12(fp)
    c410:	00c00074 	movhi	r3,1
    c414:	10c7883a 	add	r3,r2,r3
    c418:	1933eb15 	stw	r4,-12372(r3)
      if (i > alt_max_fd)
    c41c:	d0e00817 	ldw	r3,-32736(gp)
    c420:	e0bfff17 	ldw	r2,-4(fp)
    c424:	1880020e 	bge	r3,r2,c430 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    c428:	e0bfff17 	ldw	r2,-4(fp)
    c42c:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
    c430:	e0bfff17 	ldw	r2,-4(fp)
    c434:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    c438:	00000706 	br	c458 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
    c43c:	e0bfff17 	ldw	r2,-4(fp)
    c440:	10800044 	addi	r2,r2,1
    c444:	e0bfff15 	stw	r2,-4(fp)
    c448:	e0bfff17 	ldw	r2,-4(fp)
    c44c:	10800810 	cmplti	r2,r2,32
    c450:	103fe01e 	bne	r2,zero,c3d4 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
    c454:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    c458:	e0bffe17 	ldw	r2,-8(fp)
}
    c45c:	e037883a 	mov	sp,fp
    c460:	df000017 	ldw	fp,0(sp)
    c464:	dec00104 	addi	sp,sp,4
    c468:	f800283a 	ret

0000c46c <atexit>:
    c46c:	200b883a 	mov	r5,r4
    c470:	000f883a 	mov	r7,zero
    c474:	000d883a 	mov	r6,zero
    c478:	0009883a 	mov	r4,zero
    c47c:	000c52c1 	jmpi	c52c <__register_exitproc>

0000c480 <exit>:
    c480:	defffe04 	addi	sp,sp,-8
    c484:	000b883a 	mov	r5,zero
    c488:	dc000015 	stw	r16,0(sp)
    c48c:	dfc00115 	stw	ra,4(sp)
    c490:	2021883a 	mov	r16,r4
    c494:	000c5bc0 	call	c5bc <__call_exitprocs>
    c498:	00800074 	movhi	r2,1
    c49c:	11345617 	ldw	r4,-11944(r2)
    c4a0:	20800f17 	ldw	r2,60(r4)
    c4a4:	10000126 	beq	r2,zero,c4ac <exit+0x2c>
    c4a8:	103ee83a 	callr	r2
    c4ac:	8009883a 	mov	r4,r16
    c4b0:	000c6dc0 	call	c6dc <_exit>

0000c4b4 <memcmp>:
    c4b4:	30800130 	cmpltui	r2,r6,4
    c4b8:	10000b1e 	bne	r2,zero,c4e8 <memcmp+0x34>
    c4bc:	2144b03a 	or	r2,r4,r5
    c4c0:	108000cc 	andi	r2,r2,3
    c4c4:	1000171e 	bne	r2,zero,c524 <memcmp+0x70>
    c4c8:	20c00017 	ldw	r3,0(r4)
    c4cc:	28800017 	ldw	r2,0(r5)
    c4d0:	1880141e 	bne	r3,r2,c524 <memcmp+0x70>
    c4d4:	31bfff04 	addi	r6,r6,-4
    c4d8:	30800128 	cmpgeui	r2,r6,4
    c4dc:	21000104 	addi	r4,r4,4
    c4e0:	29400104 	addi	r5,r5,4
    c4e4:	103ff81e 	bne	r2,zero,c4c8 <memcmp+0x14>
    c4e8:	30bfffc4 	addi	r2,r6,-1
    c4ec:	30000b26 	beq	r6,zero,c51c <memcmp+0x68>
    c4f0:	11800044 	addi	r6,r2,1
    c4f4:	298d883a 	add	r6,r5,r6
    c4f8:	00000106 	br	c500 <memcmp+0x4c>
    c4fc:	29800726 	beq	r5,r6,c51c <memcmp+0x68>
    c500:	20800003 	ldbu	r2,0(r4)
    c504:	28c00003 	ldbu	r3,0(r5)
    c508:	21000044 	addi	r4,r4,1
    c50c:	29400044 	addi	r5,r5,1
    c510:	10fffa26 	beq	r2,r3,c4fc <memcmp+0x48>
    c514:	10c5c83a 	sub	r2,r2,r3
    c518:	f800283a 	ret
    c51c:	0005883a 	mov	r2,zero
    c520:	f800283a 	ret
    c524:	30bfffc4 	addi	r2,r6,-1
    c528:	003ff106 	br	c4f0 <memcmp+0x3c>

0000c52c <__register_exitproc>:
    c52c:	00800074 	movhi	r2,1
    c530:	10f45617 	ldw	r3,-11944(r2)
    c534:	18805217 	ldw	r2,328(r3)
    c538:	10001726 	beq	r2,zero,c598 <__register_exitproc+0x6c>
    c53c:	10c00117 	ldw	r3,4(r2)
    c540:	1a000808 	cmpgei	r8,r3,32
    c544:	40001b1e 	bne	r8,zero,c5b4 <__register_exitproc+0x88>
    c548:	20000b26 	beq	r4,zero,c578 <__register_exitproc+0x4c>
    c54c:	181090ba 	slli	r8,r3,2
    c550:	02400044 	movi	r9,1
    c554:	48d2983a 	sll	r9,r9,r3
    c558:	1211883a 	add	r8,r2,r8
    c55c:	41802215 	stw	r6,136(r8)
    c560:	11806217 	ldw	r6,392(r2)
    c564:	21000098 	cmpnei	r4,r4,2
    c568:	324cb03a 	or	r6,r6,r9
    c56c:	11806215 	stw	r6,392(r2)
    c570:	41c04215 	stw	r7,264(r8)
    c574:	20000b26 	beq	r4,zero,c5a4 <__register_exitproc+0x78>
    c578:	19000084 	addi	r4,r3,2
    c57c:	200890ba 	slli	r4,r4,2
    c580:	18c00044 	addi	r3,r3,1
    c584:	10c00115 	stw	r3,4(r2)
    c588:	1105883a 	add	r2,r2,r4
    c58c:	11400015 	stw	r5,0(r2)
    c590:	0005883a 	mov	r2,zero
    c594:	f800283a 	ret
    c598:	18805304 	addi	r2,r3,332
    c59c:	18805215 	stw	r2,328(r3)
    c5a0:	003fe606 	br	c53c <__register_exitproc+0x10>
    c5a4:	11006317 	ldw	r4,396(r2)
    c5a8:	2252b03a 	or	r9,r4,r9
    c5ac:	12406315 	stw	r9,396(r2)
    c5b0:	003ff106 	br	c578 <__register_exitproc+0x4c>
    c5b4:	00bfffc4 	movi	r2,-1
    c5b8:	f800283a 	ret

0000c5bc <__call_exitprocs>:
    c5bc:	defff704 	addi	sp,sp,-36
    c5c0:	00800074 	movhi	r2,1
    c5c4:	dcc00315 	stw	r19,12(sp)
    c5c8:	14f45617 	ldw	r19,-11944(r2)
    c5cc:	dc800215 	stw	r18,8(sp)
    c5d0:	dfc00815 	stw	ra,32(sp)
    c5d4:	9c805217 	ldw	r18,328(r19)
    c5d8:	ddc00715 	stw	r23,28(sp)
    c5dc:	dd800615 	stw	r22,24(sp)
    c5e0:	dd400515 	stw	r21,20(sp)
    c5e4:	dd000415 	stw	r20,16(sp)
    c5e8:	dc400115 	stw	r17,4(sp)
    c5ec:	dc000015 	stw	r16,0(sp)
    c5f0:	90001026 	beq	r18,zero,c634 <__call_exitprocs+0x78>
    c5f4:	202b883a 	mov	r21,r4
    c5f8:	282d883a 	mov	r22,r5
    c5fc:	05000044 	movi	r20,1
    c600:	94000117 	ldw	r16,4(r18)
    c604:	847fffc4 	addi	r17,r16,-1
    c608:	88000a16 	blt	r17,zero,c634 <__call_exitprocs+0x78>
    c60c:	84000044 	addi	r16,r16,1
    c610:	802090ba 	slli	r16,r16,2
    c614:	9421883a 	add	r16,r18,r16
    c618:	b0001126 	beq	r22,zero,c660 <__call_exitprocs+0xa4>
    c61c:	80804017 	ldw	r2,256(r16)
    c620:	15800f26 	beq	r2,r22,c660 <__call_exitprocs+0xa4>
    c624:	8c7fffc4 	addi	r17,r17,-1
    c628:	88bfffd8 	cmpnei	r2,r17,-1
    c62c:	843fff04 	addi	r16,r16,-4
    c630:	103ff91e 	bne	r2,zero,c618 <__call_exitprocs+0x5c>
    c634:	dfc00817 	ldw	ra,32(sp)
    c638:	ddc00717 	ldw	r23,28(sp)
    c63c:	dd800617 	ldw	r22,24(sp)
    c640:	dd400517 	ldw	r21,20(sp)
    c644:	dd000417 	ldw	r20,16(sp)
    c648:	dcc00317 	ldw	r19,12(sp)
    c64c:	dc800217 	ldw	r18,8(sp)
    c650:	dc400117 	ldw	r17,4(sp)
    c654:	dc000017 	ldw	r16,0(sp)
    c658:	dec00904 	addi	sp,sp,36
    c65c:	f800283a 	ret
    c660:	90800117 	ldw	r2,4(r18)
    c664:	81800017 	ldw	r6,0(r16)
    c668:	10bfffc4 	addi	r2,r2,-1
    c66c:	14401726 	beq	r2,r17,c6cc <__call_exitprocs+0x110>
    c670:	80000015 	stw	zero,0(r16)
    c674:	303feb26 	beq	r6,zero,c624 <__call_exitprocs+0x68>
    c678:	a446983a 	sll	r3,r20,r17
    c67c:	90806217 	ldw	r2,392(r18)
    c680:	95c00117 	ldw	r23,4(r18)
    c684:	1884703a 	and	r2,r3,r2
    c688:	1000081e 	bne	r2,zero,c6ac <__call_exitprocs+0xf0>
    c68c:	303ee83a 	callr	r6
    c690:	90c00117 	ldw	r3,4(r18)
    c694:	98805217 	ldw	r2,328(r19)
    c698:	1dc0011e 	bne	r3,r23,c6a0 <__call_exitprocs+0xe4>
    c69c:	90bfe126 	beq	r18,r2,c624 <__call_exitprocs+0x68>
    c6a0:	103fe426 	beq	r2,zero,c634 <__call_exitprocs+0x78>
    c6a4:	1025883a 	mov	r18,r2
    c6a8:	003fd506 	br	c600 <__call_exitprocs+0x44>
    c6ac:	90806317 	ldw	r2,396(r18)
    c6b0:	81002017 	ldw	r4,128(r16)
    c6b4:	1886703a 	and	r3,r3,r2
    c6b8:	1800061e 	bne	r3,zero,c6d4 <__call_exitprocs+0x118>
    c6bc:	200b883a 	mov	r5,r4
    c6c0:	a809883a 	mov	r4,r21
    c6c4:	303ee83a 	callr	r6
    c6c8:	003ff106 	br	c690 <__call_exitprocs+0xd4>
    c6cc:	94400115 	stw	r17,4(r18)
    c6d0:	003fe806 	br	c674 <__call_exitprocs+0xb8>
    c6d4:	303ee83a 	callr	r6
    c6d8:	003fed06 	br	c690 <__call_exitprocs+0xd4>

0000c6dc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    c6dc:	defffd04 	addi	sp,sp,-12
    c6e0:	df000215 	stw	fp,8(sp)
    c6e4:	df000204 	addi	fp,sp,8
    c6e8:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    c6ec:	0001883a 	nop
    c6f0:	e0bffe17 	ldw	r2,-8(fp)
    c6f4:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    c6f8:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    c6fc:	10000226 	beq	r2,zero,c708 <_exit+0x2c>
    ALT_SIM_FAIL();
    c700:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
    c704:	00000106 	br	c70c <_exit+0x30>
    ALT_SIM_PASS();
    c708:	002af0b0 	cmpltui	zero,zero,43970
}
    c70c:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    c710:	003fff06 	br	c710 <_exit+0x34>
